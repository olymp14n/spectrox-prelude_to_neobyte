-- title:   PRELUDE TO NEOBYTE
-- author:  Olympian / Spectrox
-- desc:    TIC-80 demo.
-- site:    https://github.com/olymp14n
-- license: CC0 1.0 Universal
-- version: 1.0
-- script:  lua

package.path = package.path .. ";D:/projects/tic-80/storage/_core/?.lua"
require "core_constants"
require "core_util"
require "core_timer"
require "core_pal"
require "core_grad"
require "core_blit"
require "core_pcx"
require "core_image"
require "core_sprite"
require "core_math"
require "core_mat4"
require "core_anim"
require "core_easing"
require "core_sound"
require "core_dither"
require "core_geom2d"

package.path = package.path .. ";D:/projects/tic-80/storage/demo/res/?.lua"
require "res_pcx"
require "res_hmap"


-------------------------------------------------------------------------------
--- CONSTANTS
-------------------------------------------------------------------------------

local sin = math.sin
local cos = math.cos
local atan = math.atan
local abs = math.abs
local sqrt = math.sqrt
local table_insert = table.insert
local table_sort = table.sort
local min = math.min
local random = math.random

-------------------------------------------------------------------------------
--- VARIABLES
-------------------------------------------------------------------------------
local _timer = core_timer_create()
local _localTimer = {}

local _tracklist = core_sound_create_tracklist({
    { bank = 0, track = 1, pattern = -1, row = -1, lastPattern = -1, lastRow = -1 },
    { bank = 0, track = 0, pattern = -1, row = -1, lastPattern = -1, lastRow = -1 },
    { bank = 0, track = 2, pattern = -1, row = -1, lastPattern = -1, lastRow = -1 },
    { bank = 0, track = 3, pattern = -1, row = -1, lastPattern = -1, lastRow = -1 },
    { bank = 1, track = 0, pattern = -1, row = -1, lastPattern = -1, lastRow = -1 },
})
local _soundState = core_sound_create_soundstate()
local _musicStarted = false
local _syncKick4 = 0
local _syncSnare4 = 0
local _syncSnare8 = 0
local _syncKickSnare4 = 0

local _imgFont

local _matProj = core_mat4_projection()

--- STARTUP_DELAY VARIABLES
-- Shared with screen fader..

--- SCREEN_FADER VARIABLES
_screenTic = nil
_palTic = nil

--- PRESENTS VARIABLES
-- Uses palette "_imgNeobyte.palette"
_presentsFadeIndexes = { 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2, 5, 2, 2, 5, 5, 2, 5, 5, 5, 6, 5, 5, 6, 6, 5, 6, 6, 6, 7, 6, 6, 7, 7, 6, 7, 7, 7, 8, 7, 7, 8, 8, 7, 8, 8, 8, 9, 8, 8, 9, 9, 8, 9, 9, 9, 10, 9, 9, 10, 10, 9, 10, 10, 10, 11, 10, 10, 11, 11, 10, 11 }

--- TITLE VARIABLES
_imgPrelude = nil
_imgNeobyte = nil

_palTitleHighlightOnly = nil
_titleGridY = -200 -- Start y pos when moving grid vertically.

_pressStartBlinkerEnabled = true

--- BLOB VARIABLES
_blobSyncSnare = 0
_imgBlobSprites = {}
_blobShapes = {}
_blobList = {}
_blobListIdx = 1
_modelMatBlobs = core_mat4_identity()

-- 0: Black, 1-4: Blob colors. 5-7: Grid colors.
_palBlob = { 0, 0, 0, 20, 52, 100, 255, 255, 255, 36, 159, 222, 188, 74, 155, 9, 10, 20, 23, 32, 56, 37, 58, 94, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255 }
_palBlobBright = {
    0, 0, 0, 20, 52, 100, 255, 255, 255, 36, 159, 222, 188, 74, 155, 89, 97, 186, 124, 148, 213, 184, 210, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255
}

--- CREDITS VARIABLES
-- Nothing.

--- TANSIT2LISSA VARIABLES
_coverLines = {}

-- 0: Black (transparent), 1-9: Gradient, 10-14: unused.
_palTransit2LissaFont = { 0, 0, 0, 36, 34, 52, 64, 51, 83, 121, 58, 128, 188, 74, 155, 232, 106, 115, 245, 160, 151, 250, 214, 184, 254, 243, 192, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0 }

_lissaLogoFadeIndexes1 = { 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 3, 1, 1, 3, 3, 1, 3, 3, 3, 5, 3, 3, 5, 5, 3, 5, 5, 5, 7, 5, 7, 7, 5, 5, 7, 7, 7, 9, 7, 7, 9, 9, 7, 9, 9, 9, 7, 9, 9, 7, 7, 9, 7, 7, 7, 5, 7, 7, 5, 5, 7, 5, 5, 5, 4, 5, 5, 4, 4, 5, 4 }
_lissaLogoFadeIndexes2 = { 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 3, 1, 1, 3, 3, 1, 3, 3, 3, 5, 3, 3, 5, 5, 3, 5, 5, 5, 7, 5, 7, 7, 5, 5, 7, 7, 7, 9, 7, 7, 9, 9, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9 }

_lissaLogoChars = {
    {
        v = 's',
        x = 89,
        colIdx = { 0 }
    },
    {
        v = 'p',
        x = 97,
        colIdx = { 0 }
    },
    {
        v = 'e',
        x = 105,
        colIdx = { 0 }
    },
    {
        v = 'c',
        x = 113,
        colIdx = { 0 }
    },
    {
        v = 't',
        x = 120,
        colIdx = { 0 }
    },
    {
        v = 'r',
        x = 128,
        colIdx = { 0 }
    },
    {
        v = 'o',
        x = 136,
        colIdx = { 0 }
    },
    {
        v = 'x',
        x = 144,
        colIdx = { 0 }
    },
}

--- LISSA VARIABLES
-- 0: Black (Transparent), 1: Black (Opaque), 2-9: Colors.
_imgLissaBG = nil

_lissaPoints = {}
_modelMatLissa = core_mat4_identity()

_lissaLinePoints = {}
_modelMatLissaLines = core_mat4_identity()
_numLissaLines = 8
_lissaLineDist = 1
_lissaLinesTotalDist = _numLissaLines * _lissaLineDist

_palLissa = { 0, 0, 0, 20, 52, 100, 255, 255, 255, 36, 159, 222, 188, 74, 155, 37, 58, 94, 90, 65, 113, 144, 73, 132, 198, 81, 151, 210, 133, 178, 222, 185, 205, 235, 237, 233, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255 }

--- TRANSIT2SHADOW VARIABLES
-- None.

--- SHADOW VARIABLES
_imgBricks = nil

_epsilon = 0.01
_segments = {}
_rays = {}
_uniqueRays = {}
_uniqueRaysCount = 0

_shadowClips = {
    -- 3 clips (15fps)
    -- { xs = 0, ys = 0,  xe = 239, ye = 45 },
    -- { xs = 0, ys = 46, xe = 239, ye = 90 },
    -- { xs = 0, ys = 90, xe = 239, ye = 135 },

    -- 2 clips (30 fps)
    { xs = 0, ys = 0,  xe = 239, ye = 68 },
    { xs = 0, ys = 69, xe = 239, ye = 135 },
}
_shadowClipsIdx = 1

_lightMap = {}
_lightMapSize = 256

_shadowCastEnabled = {
    true, -- 1
    true, -- 2
    true, -- 3
    true, -- 4
    true, -- 5
    true, -- 6
    true, -- 7
    true, -- 8
    true, -- 9
}

_shadowCastPosBase = {
    nil,          -- 1 BORDER
    { 0,   0 },   -- 2 CUBE (must match _cubeIdx)
    { 58,  69 },  -- 3 BRICK 1
    { 50,  23 },  -- 4 BRICK 2
    { 158, 35 },  -- 5 BRICK 3
    { 108, 12 },  -- 6 BRICK 4
    { 175, 102 }, -- 7 BRICK 5
    { 131, 91 },  -- 8 BRICK 6 (multiple)
    { 2,   102 }, -- 9 BRICK 7
}
_shadowCastPos = core_util_deep_copy(_shadowCastPosBase)

_shadowCubeIdx = 2               -- Index of cube in _polysTemplate.
_shadowCubeColors = { 9, 14, 2 } -- Colors of the cube lines. First one is the non-glitching one.

_polys = nil
_polysTemplate = {
    {
        -- 1: Border. Lightmap is 256 so give space for additional 128.
        { -128,             -128 },
        { -128,             CORE_HEIGHT + 128 },
        { CORE_WIDTH + 128, CORE_HEIGHT + 128 },
        { CORE_WIDTH + 128, -128 }
    },
    {
        -- 2: CUBE (Dummy)
    },
    {
        -- 3: BRICK 1
        { 0,  0 },
        { 0,  10 },
        { 25, 10 },
        { 25, 0 },
    },
    {
        -- 4: BRICK 2
        { 0,  0 },
        { 0,  11 },
        { 18, 11 },
        { 18, 0 },
    },
    {
        -- 5: BRICK 3
        { 0,  0 },
        { 0,  10 },
        { 17, 10 },
        { 17, 0 },
    },
    {
        -- 6: BRICK 4
        { 0,  0 },
        { 0,  10 },
        { 18, 10 },
        { 18, 0 },
    },
    {
        -- 7: BRICK 5
        { 0,  0 },
        { 0,  10 },
        { 18, 10 },
        { 18, 0 },
    },
    {
        -- 8: BRICK 6
        { 0,  0 },
        { 0,  10 },
        { 7,  10 },
        { 7,  22 },
        { -3, 22 },
        { -3, 34 },
        { 15, 34 },
        { 15, 21 },
        { 25, 21 },
        { 25, 11 },
        { 18, 11 },
        { 18, 0 },
    },
    {
        -- 9: BRICK 7
        { 0,  0 },
        { 0,  10 },
        { 18, 10 },
        { 18, 0 },
    },
}

_modelMatShadowCube = core_mat4_identity()
_shadowCubePos = { 0, 0 }
_shadowCubeVerts = {
    { -1, -1, -1 }, { -1, 1, -1 }, { 1, -1, -1 }, { 1, 1, -1 }, --
    { -1, -1, 1 }, { -1, 1, 1 }, { 1, -1, 1 }, { 1, 1, 1 }      --
}

-- 0-9: Lightmap dither.
-- 15: Lightmap mask.
-- 2, 9, 14: Shadow cube.
_palShadow = {
    0, 0, 0, 0, 47, 86, 13, 47, 101, 31, 50, 116, 52, 57, 131, 109, 82, 142, 166, 107, 153, 203, 170, 178, 241, 234, 203, 230, 230, 230, 255, 0, 0, 255, 0, 0, 255, 0, 0, 13, 47, 101, 188, 74, 155, 0, 255, 0,
}

--- HAVE2RUN VARIABLES
_runTexts = {
    "some days you", "love", "to run",
    "some days you", "hate", "to run",
    "every day you", "have", "to run",
}

_runTextFadeColors = { 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 5, 1, 1, 5, 5, 1, 5, 5, 5, 4, 5, 5, 4, 4, 5, 4, 4, 4, 6, 4, 4, 6, 6, 4, 6, 6, 6, 7, 6, 6, 7, 7, 6, 7, 7, 7, 8, 7, 7, 8, 8, 7, 8, 8, 8, 9, 8, 8, 9, 9, 8, 9, 9, 9, 2, 9, 9, 2, 2, 9, 2 }

--- RUNNER VARIABLES
_runnerSyncSnare = 0
_runnerGreetsBGPosX = 280
_runnerGreetsFGPosX = 280
_runnerBGOffX = -100
_runnerSunOffX = 0

_imgSkylineFront = nil
_imgSkylineBack = nil
_imgSkylineBackShort = nil
_imgSkylineTrees = nil

_imgRunnerSheet = nil
_runnerSprites = {}

_imgDoggySheet = nil
_imgDoggySprites = {}

_imgHeli = nil

_runnerBulk = {}

_txtGreets1 =
"ABYSS ALCATRAZ CALODOX FARBRAUSCH MELON OFTENHIDE SKE SPREADPOINT TEK TELETYPE TPOLM VANTAGE"
_txtGreets2 =
"AGIMA ANDROMEDA ARTSTATE DESIRE ECHTZEIT FROZAK ISTARI NGC SMFX SUBURBAN"

-- 0: Black. 1-4: Runner sprites. 5-9: Gradient for font fading. 10: Clear color. 11: Sun. 12: Skyline background layer color. 13-14: Letter front and top. 15: Skyline windows.
_palRunner = { 0, 0, 0, 20, 52, 100, 255, 255, 255, 36, 159, 222, 188, 74, 155, 121, 58, 128, 232, 106, 115, 245, 160, 151, 250, 214, 184, 254, 243, 192, 0, 255, 0, 190, 83, 149, 64, 94, 153, 0, 255, 0, 0, 255, 0, 255, 0, 255 }

-- Pink/blue BG.
_gradBGPink =
{ 8, 8, 17, 0, 17, 33, 8, 25, 33, 0, 17, 33, 8, 25, 50, 8, 25, 41, 17, 33, 58, 8, 25, 50, 17, 33, 58, 17, 33, 66, 17, 33, 58, 17, 41, 66, 25, 41, 74, 17, 41, 66, 25, 41, 74, 25, 50, 74, 25, 41, 74, 25, 50, 91, 33, 50, 91, 25, 50, 91, 33, 58, 91, 41, 58, 99, 33, 58, 91, 41, 66, 99, 41, 66, 107, 41, 66, 99, 41, 66, 116, 50, 74, 116, 41, 66, 116, 50, 74, 124, 50, 74, 124, 58, 83, 132, 50, 74, 124, 50, 91, 132, 58, 83, 132, 58, 91, 140, 50, 91, 140, 74, 91, 140, 66, 91, 140, 83, 91, 140, 74, 91, 140, 99, 91, 140, 91, 91, 149, 107, 91, 140, 116, 91, 149, 107, 91, 140, 124, 91, 149, 116, 91, 149, 140, 91, 149, 124, 91, 140, 140, 91, 149, 149, 91, 149, 140, 91, 149, 165, 91, 149, 157, 91, 140, 173, 91, 149, 165, 83, 149, 182, 91, 157, 173, 83, 149, 190, 91, 149, 190, 83, 149, 198, 83, 149, 215, 107, 157, 198, 83, 149, 223, 149, 190, 223, 132, 173, 231, 198, 215, 231, 173, 198, 239, 239, 239, 248, 223, 231, 8, 25, 50, 17, 33, 50, 8, 25, 50, 8, 25, 50, 8, 25, 50, 8, 25, 50, 8, 25, 50, 8, 25, 50, 8, 25, 41, 8, 25, 50, 8, 25, 41, 0, 17, 41, 8, 25, 41, 8, 25, 33, 8, 25, 33, 0, 17, 33, 8, 25, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 25, 0, 17, 33, 0, 17, 25, 8, 17, 25, 0, 17, 25, 8, 8, 17, 8, 8, 17, 8, 8, 17, 8, 8, 17, 8, 8, 17, 8, 8, 17, 0, 8, 17, 8, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 8, 0, 8, 17, 0, 8, 8, 0, 8, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

_gradRunnerBGNight =
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 17, 0, 0, 17, 0, 0, 17, 0, 8, 25, 0, 0, 17, 8, 8, 25, 0, 8, 25, 8, 8, 33, 8, 8, 33, 8, 8, 33, 8, 8, 41, 8, 17, 33, 8, 17, 41, 8, 17, 41, 8, 17, 50, 0, 17, 58, 8, 17, 50, 0, 25, 58, 0, 17, 58, 0, 25, 66, 0, 25, 58, 0, 25, 66, 8, 33, 74, 0, 25, 66, 8, 33, 83, 0, 25, 74, 41, 41, 91, 17, 33, 83, 91, 58, 116, 66, 50, 107, 149, 66, 124, 116, 66, 124, 198, 83, 149, 173, 74, 140, 231, 165, 190, 215, 124, 173, 239, 239, 239, 231, 206, 223, 8, 25, 50, 17, 33, 50, 8, 25, 50, 8, 25, 50, 8, 25, 50, 8, 25, 50, 8, 25, 50, 8, 25, 50, 8, 25, 41, 8, 25, 50, 8, 25, 41, 0, 17, 41, 8, 25, 41, 8, 25, 33, 8, 25, 33, 0, 17, 33, 8, 25, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 25, 0, 17, 33, 0, 17, 25, 8, 17, 25, 0, 17, 25, 8, 8, 17, 8, 8, 17, 8, 8, 17, 8, 8, 17, 8, 8, 17, 8, 8, 17, 0, 8, 17, 8, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 8, 0, 8, 17, 0, 8, 8, 0, 8, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

_gradRunnerBGMix = core_util_deep_copy(_gradBGPink)

-- Letters top.
_gradLettersTopTemplate =
{}
_gradLettersTop = {}

-- Letters front.
_gradLettersFront =
{ 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 2, 17, 29, 2, 17, 29, 4, 26, 42, 2, 17, 29, 0, 8, 17, 2, 17, 29, 0, 8, 17, 0, 8, 17, 2, 17, 29, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 8, 17, 0, 0, 0, 0, 8, 17, 0, 0, 0, 0, 8, 17, 0, 2, 5, 0, 5, 11, 0, 2, 5, 0, 5, 11, 0, 2, 5, 0, 2, 5, 0, 2, 5, 0, 5, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

-- Sun gradient.
_gradSun = { 255, 255, 205, 255, 255, 205, 255, 255, 205, 255, 255, 188, 255, 239, 188, 255, 255, 188, 255, 239, 171, 255, 239, 171, 255, 239, 171, 255, 239, 154, 255, 222, 154, 255, 222, 154, 255, 222, 137, 255, 222, 137, 255, 222, 137, 255, 205, 137, 255, 222, 119, 255, 205, 119, 255, 205, 119, 255, 205, 102, 255, 205, 102, 255, 188, 85, 255, 188, 85, 255, 188, 68, 255, 188, 68, 255, 188, 68, 255, 171, 68, 255, 188, 34, 255, 171, 17, 255, 171, 51, 255, 171, 51, 255, 154, 68, 255, 154, 85, 255, 154, 85, 239, 154, 85, 239, 154, 85, 239, 154, 102, 239, 137, 102, 239, 137, 102, 222, 137, 102, 239, 137, 119, 222, 119, 119, 222, 137, 119, 222, 119, 137, 222, 119, 119, 222, 119, 137, 222, 102, 137, 205, 102, 137, 222, 102, 137, 205, 102, 137, 205, 85, 137, 205, 85, 154, 205, 85, 137, 188, 85, 154, 205, 68, 154, 188, 68, 154, 188, 68, 154, 188, 68, 154, 188, 68, 154, 188, 68, 154, 188, 68, 154, 171, 68, 154, 171, 68, 154, 171, 51, 154, 171, 68, 154, 171, 51, 154, 154, 68, 137, 171, 68, 154, 154, 51, 137, 154, 68, 154, 154, 51, 154, 154, 68, 137, 137, 51, 154, 137, 51, 137, 154, 51, 154, 137, 51, 137, 137, 51, 137, 137, 51, 154, 119, 51, 154, 119, 51, 137, 137, 51, 137, 119, 51, 137, 119, 51, 137, 119, 51, 137, 102, 51, 137, 119, 51, 137, 102, 51, 119, 102, 51, 119, 85, 51, 137, 85, 51, 119, 85, 51, 119, 68, 51, 119, 85, 51, 119, 68, 51, 119, 68, 51, 119, 51, 51, 102, 68, 51, 119, 51, 51, 102, 51, 51, 102, 34, 51, 102, 34, 51, 102, 34, 51, 102, 17, 51, 102, 0, 51, 102, 17, 51, 102, 17, 34, 85, 17, 51, 102, 17, 34, 85, 17, 51, 85, 17, 51, 85, 17, 34, 85, 17, 34, 85, 17, 34, 68, 17, 34, 85, 0, 34, 68, 17, 34, 68, 17, 34, 68, 0, 34, 68, 17, 34, 68, 0, 17, 68, 0, 34, 68, 0, 34, 68, 17, 34, 51, 0, 17, 51, 0, 34, 51, 0, 34, 51, 0, 17, 51, 0, 17, 51, 0, 17, 34, 0, 17, 51, 0, 17, 34, 0, 17, 34, 0, 17, 34, 0, 17, 34, 0, 17, 34, 0, 17, 34 }

-- Windows gradient.
_gradWindows = { 20, 82, 133, 20, 82, 133, 20, 82, 133, 20, 82, 133, 20, 84, 134, 21, 85, 135, 21, 86, 137, 21, 87, 138, 21, 88, 140, 22, 90, 141, 22, 91, 143, 22, 92, 144, 22, 93, 146, 22, 94, 147, 23, 96, 148, 23, 97, 150, 23, 98, 151, 23, 99, 153, 24, 100, 154, 24, 102, 156, 24, 103, 157, 24, 104, 159, 25, 105, 160, 25, 107, 162, 25, 108, 163, 25, 109, 164, 26, 110, 166, 26, 111, 167, 26, 113, 169, 26, 114, 170, 27, 115, 172, 27, 116, 173, 27, 117, 175, 27, 119, 176, 27, 120, 177, 28, 121, 179, 28, 122, 180, 28, 123, 182, 28, 125, 183, 29, 126, 185, 29, 127, 186, 29, 129, 188, 29, 131, 189, 30, 132, 191, 30, 133, 192, 30, 134, 193, 30, 135, 195, 31, 137, 196, 31, 138, 198, 31, 139, 199, 31, 140, 201, 32, 141, 202, 32, 143, 204, 32, 144, 205, 32, 145, 206, 33, 146, 208, 33, 148, 209, 33, 149, 211, 33, 150, 212, 33, 151, 214, 34, 152, 215, 34, 154, 217, 34, 155, 218, 34, 156, 220, 35, 157, 221, 35, 158, 222, 35, 160, 224, 35, 160, 224, 35, 160, 224, 34, 160, 224, 34, 160, 224, 34, 158, 222, 34, 157, 221, 33, 156, 219, 33, 155, 218, 33, 153, 217, 33, 152, 215, 33, 151, 214, 32, 150, 212, 32, 149, 211, 32, 147, 209, 32, 146, 208, 31, 145, 206, 31, 144, 205, 31, 142, 203, 31, 141, 202, 31, 140, 200, 30, 139, 199, 30, 137, 197, 30, 136, 196, 30, 135, 194, 29, 134, 193, 29, 133, 191, 29, 131, 190, 29, 130, 189, 28, 129, 187, 28, 127, 186, 28, 125, 184, 28, 124, 183, 28, 123, 181, 27, 122, 180, 27, 120, 178, 27, 119, 177, 27, 118, 175, 26, 117, 174, 26, 116, 172, 26, 114, 171, 26, 113, 169, 26, 112, 168, 25, 111, 166, 25, 109, 165, 25, 108, 163, 25, 107, 162, 24, 106, 161, 24, 104, 159, 24, 103, 158, 24, 102, 156, 23, 101, 155, 23, 100, 153, 23, 98, 152, 23, 97, 150, 23, 96, 149, 22, 95, 147, 22, 93, 146, 22, 92, 144, 22, 91, 143, 21, 90, 141, 21, 88, 140, 21, 87, 138, 21, 86, 137, 21, 85, 135, 20, 84, 134, 20, 82, 133, 20, 82, 133, 20, 82, 133, 20, 82, 133 }

_gradSkylineAndFloor = {}
_gradSkylineAndFloorFlash = { 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 63, 93, 155, 62, 93, 155, 62, 93, 155, 62, 93, 155, 62, 93, 155, 62, 93, 155, 62, 93, 155, 62, 93, 155, 62, 93, 155, 62, 93, 155, 62, 92, 155, 62, 92, 155, 62, 92, 155, 62, 92, 155, 62, 92, 155, 62, 92, 155, 62, 92, 155, 62, 92, 155, 62, 92, 155, 62, 93, 155, 48, 79, 137, 33, 66, 118, 19, 52, 101, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 20, 55, 106, 21, 58, 112, 22, 61, 117, 24, 64, 123, 25, 66, 130, 26, 69, 135, 27, 72, 141, 28, 75, 147, 29, 78, 152, 30, 81, 158, 31, 84, 164, 32, 86, 169, 33, 89, 175, 35, 92, 181, 36, 95, 186, 37, 98, 192, 38, 101, 198, 39, 104, 203, 40, 106, 209, 39, 104, 204, 38, 101, 199, 37, 99, 194, 36, 97, 189, 35, 94, 184, 34, 92, 180, 33, 89, 175, 32, 87, 170, 32, 84, 165, 31, 82, 160, 30, 79, 155, 29, 77, 150, 28, 74, 145, 27, 72, 140, 26, 69, 136, 25, 67, 131, 24, 65, 125, 23, 62, 120, 22, 60, 115, 21, 57, 110, 20, 55, 105, 19, 52, 101, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100, 19, 52, 100 }
_gradSkylineAndFloorMix = core_grad_new(136)

--- TRANSIT2VOX VARIABLES
_voxKickSnare4 = 0
-- Gradient that will contain animated stripes.
_voxStripesModeBlackEnables = false
_voxGradStripes = core_grad_new(136)
_voxGradVbank0 = core_grad_new(136)

--Image palette: 0: Black, 1: unused (bdr / clear color), 2: white matching runner scene, 3-15: logo colors.
_imgSpectrox = nil
_voxLinesSpectrox = {}

-- Matches palette from Spectrox logo.
_voxTextFadeColors = { 0, 5, 0, 0, 5, 5, 0, 5, 5, 5, 9, 5, 5, 9, 9, 5, 9, 9, 9, 10, 9, 9, 10, 10, 9, 10, 10, 10, 11, 10, 10, 11, 11, 10, 11, 11, 11, 12, 11, 11, 12, 12, 11, 12, 12, 12, 13, 12, 12, 13, 13, 12, 13, 13, 13, 14, 13, 13, 14, 14, 13, 14, 14, 14, 2, 14, 14, 2, 2, 14, 2 }

--- VOX VARIABLES
_voxLogoSyncSnare8 = 0
_voxLogoFlashFactor = .3
_imgTime = nil
_voxLinesTime = {}

_voxCam = {
    pos = { x = 40, y = 40 }, -- Nice start pos for twister illusion.
    height = 1475,
    scale = 240,
    dist = 2400,
    angle = 0,
    horizon = -105,
}

_voxClipIdx = 0
_voxClips = {
    { 0,                   CORE_WIDTH_HALF },
    { CORE_WIDTH_HALF + 1, CORE_WIDTH_1 },
}

_voxMapW, _voxMapH, _voxMap = nil, nil, nil
_voxPal =
{ 6, 6, 8, 10, 21, 38, 15, 36, 69, 22, 29, 89, 43, 30, 109, 79, 39, 129, 122, 50, 148, 168, 61, 167, 188, 74, 155, 198, 95, 157, 207, 117, 163, 217, 142, 172, 226, 167, 185, 236, 195, 203, 245, 224, 226, 255, 255, 255, }
-- Used by Vox and Waterfield.
_voxGradLakes1 =
{ 0, 17, 34, 0, 17, 34, 0, 17, 34, 0, 17, 34, 0, 17, 51, 0, 17, 34, 0, 17, 51, 0, 17, 51, 17, 17, 68, 0, 17, 51, 17, 17, 68, 17, 0, 68, 17, 17, 68, 17, 17, 85, 17, 0, 68, 17, 17, 85, 17, 17, 85, 34, 17, 102, 17, 17, 85, 34, 17, 102, 51, 17, 102, 34, 17, 102, 51, 34, 119, 51, 34, 102, 68, 34, 119, 51, 34, 119, 85, 34, 119, 68, 34, 119, 85, 34, 137, 85, 34, 137, 102, 34, 137, 102, 34, 137, 119, 51, 154, 102, 51, 154, 119, 51, 154, 137, 51, 154, 119, 51, 154, 137, 51, 154, 154, 51, 154, 137, 51, 154, 154, 68, 154, 154, 68, 154, 154, 68, 154, 171, 68, 154, 154, 68, 154, 171, 68, 154, 188, 85, 154, 171, 68, 154, 188, 68, 154, 188, 85, 154, 188, 68, 154, 205, 85, 154, 205, 85, 154, 205, 85, 154, 222, 102, 154, 205, 85, 154, 222, 119, 171, 222, 102, 154, 222, 137, 171, 222, 119, 171, 222, 137, 171, 239, 154, 188, 222, 137, 171, 239, 171, 188, 239, 154, 188, 239, 171, 188, 239, 188, 205, 239, 171, 188, 239, 205, 205, 239, 188, 205, 255, 205, 205, 239, 205, 222, 239, 205, 205, 222, 205, 205, 205, 188, 222, 222, 205, 205, 188, 188, 205, 205, 188, 222, 171, 171, 222, 188, 171, 205, 154, 154, 222, 154, 171, 222, 137, 154, 222, 154, 154, 222, 119, 154, 222, 102, 137, 205, 119, 137, 222, 85, 119, 222, 102, 119, 222, 68, 119, 222, 68, 119, 222, 51, 102, 222, 68, 102, 205, 34, 85, 205, 17, 85, 205, 34, 85, 205, 17, 85, 188, 17, 85, 188, 17, 68, 171, 17, 85, 188, 17, 68, 171, 0, 68, 154, 17, 68, 171, 0, 68, 154, 17, 68, 154, 0, 51, 137, 0, 68, 137, 0, 51, 119, 0, 51, 119, 0, 51, 119, 0, 51, 102, 0, 51, 119, 0, 51, 102, 17, 51, 102, 17, 34, 102, 17, 34, 102, 17, 34, 85, 17, 34, 85, 17, 34, 85, 17, 34, 85, 17, 34, 68, 17, 34, 85, 0, 34, 68, 0, 17, 68, 0, 34, 68, 0, 17, 51, 0, 17, 68, 0, 17, 51, 0, 17, 51, 0, 17, 51, 0, 17, 34, 0, 17, 51, 0, 17, 34, 0, 17, 34, 0, 17, 34, 0, 17, 34 }
_voxGradLakes2 =
{ 10, 22, 40, 10, 21, 38, 10, 22, 40, 12, 21, 39, 10, 22, 40, 12, 21, 39, 10, 22, 40, 12, 24, 42, 10, 22, 40, 12, 24, 42, 10, 24, 43, 12, 24, 42, 10, 24, 43, 10, 24, 43, 10, 24, 43, 10, 24, 43, 10, 26, 47, 10, 24, 43, 10, 26, 47, 10, 24, 43, 10, 26, 47, 10, 24, 43, 13, 25, 47, 13, 25, 47, 13, 25, 47, 13, 25, 47, 13, 27, 50, 13, 25, 47, 13, 27, 50, 11, 25, 48, 13, 27, 50, 11, 25, 48, 13, 27, 50, 11, 28, 52, 13, 27, 50, 11, 28, 52, 14, 30, 54, 11, 28, 52, 14, 30, 54, 11, 28, 52, 14, 30, 54, 11, 28, 52, 11, 30, 55, 14, 29, 55, 11, 30, 55, 14, 29, 55, 11, 30, 55, 14, 29, 55, 11, 30, 55, 14, 31, 59, 17, 31, 58, 14, 31, 59, 14, 31, 59, 14, 31, 59, 14, 31, 59, 14, 31, 59, 14, 31, 59, 15, 33, 63, 14, 31, 59, 15, 33, 63, 12, 31, 60, 15, 33, 63, 12, 31, 60, 15, 33, 63, 12, 34, 64, 15, 33, 63, 12, 34, 64, 18, 35, 66, 12, 34, 64, 18, 35, 66, 12, 34, 64, 18, 35, 66, 12, 34, 64, 15, 35, 68, 15, 35, 68, 15, 35, 68, 15, 35, 68, 15, 35, 68, 15, 36, 69, 15, 35, 68, 15, 35, 68, 15, 35, 68, 15, 35, 68, 12, 34, 64, 15, 35, 68, 12, 34, 64, 18, 35, 66, 12, 34, 64, 18, 35, 66, 15, 33, 63, 15, 33, 63, 15, 33, 63, 15, 33, 63, 12, 31, 60, 15, 33, 63, 14, 31, 59, 14, 31, 59, 14, 31, 59, 14, 31, 59, 17, 31, 58, 14, 31, 59, 14, 29, 55, 11, 30, 55, 14, 29, 55, 11, 30, 55, 11, 28, 52, 11, 30, 55, 11, 28, 52, 14, 30, 54, 11, 28, 52, 14, 30, 54, 13, 27, 50, 13, 27, 50, 13, 27, 50, 13, 25, 47, 13, 27, 50, 13, 25, 47, 11, 25, 48, 13, 25, 47, 11, 25, 48, 10, 24, 43, 10, 26, 47, 10, 24, 43, 10, 26, 47, 10, 24, 43, 10, 26, 47, 10, 24, 43, 10, 22, 40, 10, 24, 43, 10, 22, 40, 12, 24, 42, 10, 22, 40, 12, 24, 42, 12, 21, 39, 10, 22, 40, 10, 21, 38 }

_voxGradBlack = core_grad_new(136)

-- Gradient that is mixed and rendered in vbank1.
_voxGradVbank1 = {}

--- WATERFIELD VARIABLES
_waterCubeBubblesEmitter = nil
_waterBGPosY = 0
_waterParticles = {}
_waterParticlesTransformed = {}
_waterParticlesDim = 10
_waterParticlesDim2 = _waterParticlesDim * 2
_matModelWaterParticles = core_mat4_identity()

_greets = {
    "a. winston",
    "aghnar",
    "bus error",
    "crossbone",
    "depeche",
    "dipswitch",
    "ferris",
    "gaspode",
    "gigabates",
    "grip",
    "hammerfist",
    "hoffman",
    "jade",
    "maze",
    "mickaleus",
    "motion",
    "mudlord",
    "mystra",
    "ozan",
    "ps",
    "ramon b5",
    "rez",
    "rog",
    "rp",
    "seffren",
    "shana",
    "slaze",
    "soundy",
    "spkr",
    "steffest",
    "suule",
    "unlock",
    "v3nom",
    "virgill",
    "zak",
}

function getGreets(column)
    local txt = ''
    for i = column, #_greets, 2 do
        txt = txt .. _greets[i] .. '\n'
    end
    return txt
end

_txtSections = {
    thanks = 0,
    prelude = 25,
    by = 74,
    ramble = 302,
    love = 532,
    greets = 572,
}

_txtCredits = {
    { txt = "thanks for watching",        x = 120 - 72, y = _txtSections.thanks,                           s = 1 },
    { txt = "prelude to",                 x = 120 - 76, y = _txtSections.prelude + 16 * 0,                 s = 2 },
    { txt = "n e o b y t e",              x = 120 - 80, y = _txtSections.prelude + 16 * 1,                 s = 2 },
    { txt = "by",                         x = 120 - 8,  y = _txtSections.by + 12 * 0,                      s = 1 },
    { txt = "s p e c t r o x",            x = 120 - 46, y = _txtSections.by + 12 * 1,                      s = 1 },
    { txt = "at",                         x = 120 - 8,  y = _txtSections.by + 12 * 3,                      s = 1 },
    { txt = "deadline",                   x = 120 - 32, y = _txtSections.by + 12 * 4,                      s = 1 },
    { txt = "2025",                       x = 120 - 16, y = _txtSections.by + 12 * 5,                      s = 1 },
    { txt = "@",                          x = 120 - 1,  y = _txtSections.by + 12 * 7,                      s = 1 },
    { txt = "code and gfx by",            x = 120 - 54, y = _txtSections.by + 12 * 9,                      s = 1 },
    { txt = "olympian",                   x = 120 - 32, y = _txtSections.by + 12 * 10,                     s = 1 },
    { txt = "music by",                   x = 120 - 30, y = _txtSections.by + 12 * 12,                     s = 1 },
    { txt = "virgill",                    x = 120 - 28, y = _txtSections.by + 12 * 13,                     s = 1 },
    { txt = "@ @ @",                      x = 120 - 8,  y = _txtSections.by + 12 * 16,                     s = 1 },
    { txt = "olympian at the keys . . .", x = 40,       y = _txtSections.ramble + 12 * 0,                  s = 1 },
    { txt = "this prelude turned out",    x = 40,       y = _txtSections.ramble + 12 * 2,                  s = 1 },
    { txt = "longer than i thought :)",   x = 40,       y = _txtSections.ramble + 12 * 3,                  s = 1 },
    { txt = "i had lots of fun with",     x = 40,       y = _txtSections.ramble + 12 * 5,                  s = 1 },
    { txt = "the tic-80 . . .  i wonder", x = 40,       y = _txtSections.ramble + 12 * 6,                  s = 1 },
    { txt = "what that start screen",     x = 40,       y = _txtSections.ramble + 12 * 7,                  s = 1 },
    { txt = "was all about. . . ?",       x = 40,       y = _txtSections.ramble + 12 * 8,                  s = 1 },
    { txt = "many thanks to virgill",     x = 40,       y = _txtSections.ramble + 12 * 10,                 s = 1 },
    { txt = "for composing the great",    x = 40,       y = _txtSections.ramble + 12 * 11,                 s = 1 },
    { txt = "soundtrack!",                x = 40,       y = _txtSections.ramble + 12 * 12,                 s = 1 },
    { txt = "thanks to zak/fzk and",      x = 40,       y = _txtSections.ramble + 12 * 14,                 s = 1 },
    { txt = "hammerfist/dsr for the",     x = 40,       y = _txtSections.ramble + 12 * 15,                 s = 1 },
    { txt = "support!",                   x = 40,       y = _txtSections.ramble + 12 * 16,                 s = 1 },
    { txt = "love and",                   x = 120 - 60, y = _txtSections.love + 16 * 0,                    s = 2 },
    { txt = "respect to",                 x = 120 - 76, y = _txtSections.love + 16 * 1,                    s = 2 },
    { txt = getGreets(1),                 x = 25,       y = _txtSections.greets,                           s = 1 },
    { txt = getGreets(2),                 x = 140,      y = _txtSections.greets,                           s = 1 },
    { txt = "and everyone i forgot!",     x = 120 - 79, y = _txtSections.greets + 12 * #_greets // 2 + 16, s = 1 },
}

-- 0: Black, 1: BG gradient, 2: Font gradient, 3-4: Bubbles, 5-7: Glitch cube, 8-12: Water particles, 13: Font BG. 14-15: used in Unterwater scene's BDR.
_waterPal =
{ 0, 0, 0, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 22, 29, 89, 188, 74, 155, 245, 224, 226, 20, 52, 100, 40, 92, 196, 36, 159, 222, 32, 214, 199, 255, 255, 255, 28, 0, 48, 255, 0, 255, 255, 0, 255 }

-- Same as _waterPal with 8-12 made purple.
_waterPurplePal =
{ 0, 0, 0, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 22, 29, 89, 188, 74, 155, 245, 224, 226, 36, 34, 52, 64, 51, 83, 121, 58, 128, 188, 74, 155, 255, 255, 255, 28, 0, 48, 255, 0, 255, 255, 0, 255 }

_waterGradBG =
{ 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 8, 50, 99, 0, 50, 99, 25, 41, 99, 25, 50, 99, 25, 50, 99, 25, 50, 99, 25, 41, 99, 17, 41, 91, 17, 41, 91, 25, 41, 99, 17, 41, 91, 17, 41, 99, 25, 41, 99, 17, 50, 91, 25, 41, 99, 17, 41, 91, 17, 41, 99, 25, 41, 99, 17, 50, 91, 25, 41, 99, 17, 41, 91, 17, 50, 91, 25, 41, 99, 17, 41, 91, 17, 41, 91, 17, 41, 91, 17, 41, 83, 25, 41, 91, 17, 41, 83, 17, 41, 91, 25, 41, 83, 17, 41, 83, 25, 41, 91, 17, 41, 83, 17, 41, 83, 25, 41, 91, 17, 41, 83, 17, 41, 91, 25, 41, 83, 17, 41, 83, 17, 41, 83, 17, 41, 83, 17, 41, 83, 17, 41, 83, 17, 33, 83, 17, 41, 83, 17, 41, 83, 17, 41, 83, 17, 41, 83, 17, 33, 83, 17, 41, 83, 17, 41, 83, 17, 41, 83, 17, 41, 83, 17, 41, 83, 17, 41, 83, 17, 33, 83, 17, 33, 74, 8, 33, 83, 17, 33, 83, 17, 41, 74, 17, 33, 83, 17, 33, 83, 8, 41, 74, 17, 33, 83, 17, 33, 74, 8, 33, 83, 17, 33, 83, 8, 41, 74, 17, 33, 83, 17, 33, 74, 8, 33, 83, 8, 33, 74, 17, 33, 66, 17, 33, 74, 17, 33, 66, 8, 33, 66, 17, 33, 74, 17, 33, 66, 8, 33, 74, 17, 33, 74, 17, 33, 66, 17, 33, 74, 17, 33, 66, 8, 33, 74, 17, 33, 74, 17, 33, 66, 17, 33, 74, 17, 33, 66, 8, 33, 66, 8, 33, 66, 8, 33, 66, 8, 33, 66, 8, 33, 66, 8, 33, 66, 17, 33, 66, 8, 33, 66, 8, 33, 66, 8, 33, 66, 8, 25, 66, 8, 33, 66, 8, 33, 66, 8, 33, 66, 17, 33, 66, 8, 33, 66, 8, 33, 66, 8, 25, 66, 8, 33, 66, 8, 25, 66, 8, 25, 66, 8, 33, 58, 8, 25, 66, 8, 25, 66, 8, 33, 66, 8, 25, 66, 8, 33, 58, 8, 25, 66, 8, 25, 66, 8, 33, 66, 8, 25, 66, 8, 33, 58, 17, 33, 58, 8, 25, 58, 8, 33, 50, 8, 25, 58, 8, 25, 58, 8, 25, 58, 8, 25, 58, 8, 33, 50, 8, 25, 58, 8, 25, 58, 8, 25, 50, 8, 25, 58, 8, 25, 58, 8, 25, 58, 8, 25, 58, 8, 33, 50, 8, 25, 58, 0, 25, 50, 0, 25, 58, 8, 25, 50, 0, 25, 50, 8, 25, 58, 0, 25, 50, 0, 25, 50, 8, 25, 50, 0, 25, 50, 0, 25, 58, 8, 25, 50, 0, 25, 50, 8, 25, 50, 0, 25, 50, 0, 25, 50, 8, 25, 50, 0, 17, 50, 0, 25, 50, 0, 17, 50, 0, 25, 50, 0, 25, 50, 0, 17, 50, 0, 25, 50, 0, 17, 50, 0, 25, 50, 0, 25, 50, 0, 17, 50, 0, 25, 50, 0, 25, 50, 0, 17, 50, 0, 25, 50, 0, 17, 50, 0, 25, 50, 0, 25, 50, 0, 17, 50, 0, 25, 50, 0, 17, 50, 0, 25, 50, 0, 25, 50, 0, 17, 50, 0, 25, 41, 0, 17, 41, 0, 17, 41, 0, 25, 41, 0, 17, 41, 0, 25, 41, 0, 17, 41, 0, 17, 41, 0, 25, 41, 0, 17, 41, 0, 17, 41, 0, 25, 41, 0, 17, 41, 0, 25, 41, 0, 17, 41, 0, 17, 41, 0, 25, 41, 0, 17, 41, 0, 25, 41, 0, 17, 41, 0, 17, 41, 0, 25, 41, 0, 17, 41, 0, 17, 41, 0, 25, 41, 0, 17, 41, 0, 25, 41, 0, 17, 41, 0, 17, 41, 0, 17, 33, 0, 17, 41, 0, 17, 33, 0, 17, 41, 0, 17, 41, 0, 17, 33, 0, 17, 41, 0, 17, 33, 0, 17, 41, 0, 17, 41, 0, 17, 33, 0, 17, 41, 0, 17, 41, 0, 17, 33, 0, 17, 41, 0, 17, 33, 0, 17, 41, 0, 17, 41, 0, 17, 33, 0, 17, 41, 0, 17, 41, 0, 17, 41, 0, 17, 41, 0, 17, 33, 0, 17, 41, 0, 17, 41, 0, 17, 33, 0, 17, 33, 0, 8, 33, 0, 17, 41, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 8, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 8, 33, 0, 17, 41, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 8, 33, 0, 17, 41, 0, 17, 33, 0, 17, 33, 0, 17, 33, 0, 8, 33, 0, 17, 33, 0, 8, 33, 0, 17, 33, 0, 8, 33, 0, 8, 33, 0, 17, 33, 0, 8, 33, 0, 8, 33, 0, 17, 33, 0, 8, 33, 0, 17, 33, 0, 8, 33, 0, 8, 33, 0, 17, 33, 0, 8, 33, 0, 8, 33, 0, 8, 33, 0, 8, 33, 0, 17, 33, 0, 8, 33, 0, 8, 33, 0, 17, 33, 0, 8, 33, 0, 17, 33, 0, 8, 33, 0, 8, 33, 0, 8, 25, 0, 8, 33, 0, 8, 25, 0, 8, 33, 0, 8, 33, 0, 8, 25, 0, 8, 33, 0, 8, 25, 0, 8, 25, 0, 8, 33, 0, 8, 25, 0, 8, 33, 0, 8, 33, 0, 8, 25, 8, 8, 33, 8, 8, 25, 0, 8, 33, 8, 8, 33, 8, 8, 25, 8, 8, 33, 8, 8, 25, 0, 8, 25, 8, 8, 33, 8, 8, 25, 0, 8, 33, 8, 8, 33, 0, 8, 25, 8, 8, 33, 0, 0, 25, 0, 8, 25, 8, 0, 25, 0, 8, 25, 8, 0, 25, 8, 8, 25, 0, 8, 17, 8, 8, 25, 0, 0, 25, 0, 8, 25, 8, 8, 25, 0, 8, 17, 8, 8, 25, 8, 8, 25, 0, 8, 17, 8, 8, 25, 0, 0, 17, 0, 8, 25, 8, 8, 25, 0, 8, 17, 8, 8, 25, 0, 8, 25, 0, 8, 25, 8, 8, 25, 0, 8, 17, 8, 8, 25, 8, 8, 25, 0, 8, 17, 0, 0, 17, 0, 0, 17, 0, 8, 25, 0, 0, 17, 0, 8, 17, 8, 0, 17, 0, 0, 17, 0, 0, 17, 0, 0, 17, 0, 0, 17, 8, 0, 17, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 17, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

_waterBubblesGrad =
{ 17, 51, 102, 0, 51, 102, 0, 51, 102, 17, 68, 102, 17, 51, 119, 17, 68, 102, 17, 51, 119, 17, 68, 102, 0, 68, 119, 0, 68, 119, 0, 68, 102, 0, 85, 119, 0, 68, 119, 0, 85, 119, 17, 68, 119, 17, 85, 119, 0, 85, 137, 0, 85, 119, 0, 85, 137, 0, 102, 119, 0, 85, 137, 0, 102, 119, 17, 85, 137, 34, 102, 137, 0, 102, 137, 0, 102, 137, 0, 102, 137, 0, 119, 137, 0, 119, 137, 0, 102, 154, 0, 119, 137, 17, 119, 137, 0, 119, 154, 0, 119, 137, 0, 119, 154, 0, 119, 154, 0, 137, 154, 0, 119, 154, 0, 137, 154, 17, 137, 154, 0, 137, 154, 0, 137, 154, 0, 137, 154, 0, 154, 171, 0, 137, 171, 0, 154, 154, 17, 137, 171, 17, 154, 171, 0, 154, 171, 0, 154, 171, 0, 171, 171, 0, 154, 171, 0, 171, 171, 34, 154, 171, 34, 171, 171, 34, 171, 171, 0, 171, 188, 0, 171, 171, 0, 188, 188, 0, 171, 188, 0, 188, 188, 0, 171, 188, 34, 188, 188, 51, 188, 171, 0, 188, 188, 0, 205, 188, 0, 188, 205, 0, 205, 188, 0, 205, 188, 0, 188, 205, 34, 205, 205, 34, 205, 205, 0, 222, 205, 0, 205, 188, 0, 222, 205, 0, 205, 205, 34, 222, 205, 34, 222, 205, 34, 222, 205, 51, 222, 205, 34, 222, 205, 51, 222, 205, 51, 222, 222, 34, 222, 222, 51, 222, 205, 51, 222, 205, 51, 222, 205, 51, 222, 205, 34, 222, 205, 51, 222, 205, 51, 222, 205, 34, 222, 222, 51, 222, 222, 51, 222, 205, 51, 222, 205, 51, 222, 205, 34, 222, 205, 51, 222, 205, 51, 222, 205, 34, 222, 205, 51, 222, 222, 51, 222, 222, 34, 222, 205, 51, 222, 205, 51, 222, 205, 34, 222, 205, 51, 222, 205, 51, 222, 205, 34, 222, 205, 51, 222, 222, 51, 222, 222, 17, 222, 205, 34, 222, 205, 34, 222, 205, 34, 222, 205, 17, 205, 188, 0, 222, 222, 34, 205, 205, 51, 205, 205, 34, 205, 205, 34, 205, 205, 34, 205, 188, 17, 205, 205, 0, 188, 188, 0, 205, 205, 17, 188, 188, 34, 188, 205, 34, 188, 188, 34, 188, 188, 17, 188, 188, 0, 171, 205, 0, 188, 188, 0, 171, 188, 0, 171, 188, 17, 171, 188, 0, 171, 188 }

_waterGradVbank0 = nil -- Holds resulting gradient.
_waterGradSplash = nil -- Downsplash color.

--- UNDERWATER VARIABLES
_underwaterEmitter = nil
_underwaterCubeEmitter = nil

_imgSand = nil           --0,54
_imgSandFG = nil         --0,72
_imgKelpBG = nil         -- 0,45
_imgKelp1 = nil          -- 42,36
_imgKelp2 = nil          -- 59,40
_imgKelp3 = nil          -- 166,45

_imgKelpFGLeft1 = nil    -- 0,6
_imgKelpFGLeft2 = nil    -- 9,20
_imgKelpFGLeft3 = nil    -- 13,40
_imgKelpFGLeft4 = nil    -- 19,68

_imgKelpFGRight1 = nil   -- 209,81
_imgKelpFGRight2 = nil   -- 209,55
_imgKelpFGRight3 = nil   -- 213,37
_imgKelpFGRight4 = nil   -- 220,13
_imgKelpFGRight5 = nil   -- 228,25
_imgKelpFGRight6 = nil   -- 232,69

_imgSideRocksLeft = nil  -- 0,69
_imgSideRocksRight = nil -- 186,72

_imgThe = nil
_imgEnd = nil

_gradUnderwater = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 4, 0, 5, 4, 0, 5, 4, 0, 5, 4, 0, 5, 4, 0, 5, 8, 4, 13, 8, 0, 13, 12, 4, 22, 8, 4, 13, 24, 4, 32, 12, 4, 22, 24, 4, 32, 20, 4, 22, 37, 9, 43, 20, 4, 22, 37, 9, 43, 24, 9, 32, 37, 9, 43, 24, 9, 32, 50, 17, 56, 42, 13, 57, 42, 17, 66, 51, 24, 75, 42, 17, 66, 35, 33, 67, 51, 24, 75, 43, 41, 84, 43, 41, 75, 41, 48, 81, 54, 42, 87, 49, 56, 89, 41, 48, 81, 38, 62, 92, 49, 56, 89, 46, 70, 100, 46, 69, 92, 29, 74, 95, 55, 71, 103, 44, 83, 113, 36, 75, 105, 30, 91, 119, 52, 91, 113, 45, 99, 128, 37, 98, 120, 45, 113, 128, 61, 107, 121, 53, 122, 137, 52, 114, 129, 30, 129, 144, 61, 123, 138, 61, 138, 154, 45, 130, 145, 68, 146, 163, 61, 146, 162, 53, 155, 170, 46, 154, 169, 66, 175, 186, 61, 165, 175, 38, 180, 189, 59, 174, 185, 15, 170, 179, 38, 180, 189, 15, 170, 179, 38, 180, 189, 15, 170, 179, 38, 180, 189, 15, 170, 179, 15, 170, 179, 15, 170, 179, 15, 170, 179, 15, 170, 179, 15, 170, 179, 15, 170, 179, 15, 170, 179, 15, 160, 175, 15, 170, 179, 15, 160, 175, 15, 170, 179, 15, 160, 175, 15, 170, 179, 15, 160, 175, 53, 155, 170, 15, 160, 175, 53, 155, 170, 61, 165, 175, 53, 155, 170, 61, 165, 175, 53, 155, 170, 46, 154, 169, 53, 155, 170, 46, 154, 169, 53, 155, 170, 46, 154, 169, 53, 155, 170, 46, 154, 169, 46, 154, 169, 46, 154, 169, 22, 144, 159, 46, 154, 169, 15, 144, 167, 15, 144, 167, 15, 144, 167, 15, 144, 167, 15, 144, 167, 15, 144, 167, 15, 144, 167, 15, 144, 167, 15, 144, 167, 15, 144, 167, 53, 146, 170, 15, 144, 167, 46, 138, 160, 46, 138, 160, 46, 138, 160, 46, 138, 160, 38, 138, 160, 46, 138, 160, 38, 138, 160, 46, 138, 160, 38, 138, 160, 46, 138, 160 }
_gradUnderwaterBrightBase = { 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 10, 0, 17, 15, 7, 28, 15, 0, 28, 18, 6, 38, 15, 7, 28, 34, 6, 51, 18, 6, 38, 34, 6, 51, 31, 6, 39, 49, 11, 62, 31, 6, 39, 49, 11, 62, 34, 12, 51, 49, 11, 62, 34, 12, 51, 59, 24, 72, 48, 16, 73, 45, 23, 79, 54, 33, 86, 45, 23, 79, 36, 42, 78, 54, 33, 86, 46, 49, 95, 46, 50, 86, 44, 57, 92, 58, 50, 98, 53, 65, 101, 44, 57, 92, 40, 71, 102, 53, 65, 101, 49, 79, 111, 48, 80, 103, 31, 86, 108, 59, 81, 114, 47, 93, 126, 40, 86, 117, 32, 101, 132, 56, 103, 126, 48, 110, 141, 39, 110, 133, 48, 126, 141, 66, 119, 134, 57, 135, 150, 56, 126, 142, 31, 142, 157, 65, 135, 151, 64, 151, 168, 48, 142, 158, 69, 160, 179, 62, 160, 178, 52, 169, 187, 45, 168, 185, 70, 188, 199, 61, 180, 191, 37, 196, 205, 60, 189, 199, 16, 184, 191, 37, 196, 205, 16, 184, 191, 37, 196, 205, 16, 184, 191, 37, 196, 205, 16, 184, 191, 16, 184, 191, 16, 184, 191, 16, 184, 191, 16, 184, 191, 16, 184, 191, 16, 184, 191, 16, 184, 191, 15, 173, 188, 16, 184, 191, 15, 173, 188, 16, 184, 191, 15, 173, 188, 16, 184, 191, 15, 173, 188, 52, 169, 187, 15, 173, 188, 52, 169, 187, 61, 180, 191, 52, 169, 187, 61, 180, 191, 52, 169, 187, 45, 168, 185, 52, 169, 187, 45, 168, 185, 52, 169, 187, 45, 168, 185, 52, 169, 187, 45, 168, 185, 45, 168, 185, 45, 168, 185, 23, 157, 172, 45, 168, 185, 15, 156, 180, 15, 156, 180, 15, 156, 180, 15, 156, 180, 15, 156, 180, 15, 156, 180, 15, 156, 180, 15, 156, 180, 15, 156, 180, 15, 156, 180, 52, 159, 187, 15, 156, 180, 47, 150, 174, 47, 150, 174, 47, 150, 174, 47, 150, 174, 40, 149, 173, 47, 150, 174, 40, 149, 173, 47, 150, 174, 40, 149, 173, 47, 150, 174 }
_gradUnderwaterBrightMix = {}

--- HIDDEN PART VARIABLES
-- Pssst, nothing to see here!
_gradHidden = { 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 37, 219, 37, 73, 219, 73, 37, 219, 37, 37, 219, 73, 37, 183, 73, 37, 183, 73, 37, 183, 73, 37, 183, 73, 37, 183, 73, 37, 183, 73, 37, 183, 73, 37, 183, 73, 37, 183, 110, 37, 146, 73, 37, 183, 110, 37, 146, 110, 37, 146, 110, 37, 146, 110, 37, 146, 110, 37, 146, 110, 37, 146, 146, 37, 146, 110, 37, 146, 146, 37, 146, 146, 37, 146, 146, 37, 146, 146, 37, 146, 183, 37, 146, 146, 37, 146, 183, 37, 146, 183, 37, 146, 183, 37, 146, 183, 37, 146, 219, 73, 146, 183, 37, 146, 219, 73, 146, 219, 73, 146, 219, 73, 146, 219, 73, 146, 219, 73, 146, 219, 73, 146, 255, 110, 183, 219, 73, 146, 255, 110, 183, 255, 110, 183, 255, 146, 183, 255, 110, 183, 255, 146, 183, 255, 146, 219, 255, 146, 183, 255, 183, 219, 255, 183, 219, 255, 183, 219, 255, 219, 219, 255, 183, 219, 255, 219, 255, 255, 219, 219, 255, 219, 255, 255, 255, 255, 255, 219, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 219, 255, 255, 255, 255, 255, 219, 255, 255, 219, 255, 219, 183, 255, 255, 219, 255, 219, 183, 255, 219, 183, 255, 219, 146, 255, 219, 183, 255, 219, 146, 255, 219, 146, 255, 183, 110, 255, 219, 146, 255, 183, 110, 255, 183, 110, 255, 183, 110, 255, 183, 73, 255, 183, 110, 255, 183, 73, 255, 183, 73, 255, 146, 37, 219, 183, 73, 255, 146, 37, 219, 146, 37, 219, 146, 37, 219, 146, 37, 219, 146, 37, 219, 146, 37, 219, 146, 37, 219, 146, 37, 219, 110, 37, 219, 146, 37, 219, 110, 37, 219, 110, 37, 219, 110, 37, 219, 110, 37, 219, 110, 37, 219, 110, 37, 219, 110, 37, 219, 110, 37, 219, 110, 37, 219, 73, 37, 219, 110, 37, 219, 73, 37, 219, 73, 37, 219, 73, 37, 219, 73, 37, 219, 73, 37, 219, 73, 37, 219, 73, 37, 219, 73, 37, 219, 73, 73, 219, 73, 37, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219, 37, 73, 219 }
_gradScanline = { 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64, 20, 52, 100, 13, 33, 64 }
_hiddenTracklist = core_sound_create_tracklist({
    { bank = 1, track = 1, pattern = -1, row = -1, lastPattern = -1, lastRow = -1 },
})

_hiddenTitle = "SPECTROX"
_hiddenScrollText =
    "CONGRATULATIONS!!! YOU FOUND THIS TINY HIDDEN PART!      YOU ARE A TRUE LEGEND!!!            " ..
    "SOME PERSONAL MESSAGES THAT DIDN'T FIT INTO THE MAIN DEMO ARE COMING UP . . . . . . . .           " ..
    "%   BUS ERROR / TELETYPE * LOOKING FORWARD TO YOUR NEXT PROJECTS!   " ..
    "%   CROSSBONE / SUBURBAN * IT'S REALLY AWESOME THAT WE FOUND OUT WE'RE TEAMMATES AT WORK!   " ..
    "%   DEPECHE / SPREADPOINT * LOOKING FORWARD TO OUR NEXT MEET-UP AT SPECTROX-HQ!   " ..
    "%   DIPSWITCH / DIVINE STYLERS * THANK YOU SO MUCH FOR THE ASCII LOGO!   " ..
    "%   GASPODE * I REALLY LOVED YOUR LATEST DEMO! THANKS FOR THE GREETS!   " ..
    "%   GIGABATES / DESIRE * I USED 'GRADIENT BLASTER' EXTENSIVELY IN THIS DEMO. THANKS FOR SHARING IT!   " ..
    "%   GRIP / ISTARI * ALWAYS APPRECIATE YOUR RELEASES, CAN'T WAIT FOR THE NEXT ONE!   " ..
    "%   HAMMERFIST / DESIRE * THANK YOU SO MUCH FOR YOUR HELP AND FEEDBACK!   " ..
    "%   MOTION / ARTSTATE * IT'S BEEN NICE TO FINALLY HOOK UP BY EMAIL! I WILL USE YOUR FONT IN ONE OF MY NEXT PRODS.   " ..
    "%   MUDLORD / DESIRE * IT WAS REALLY COOL TO SEE YOU TINKERING WITH THE 'OFFSET OVERDRIVE' SOURCE CODE!   " ..
    "%   OZAN / TEK * SEE YOU IN THE YOUTUBE COMMENTS SECTION!   " ..
    "%   PS / TPOLM * THANKS FOR YOUR WORK ON THE DEMOSCENE REPORT! I NEVER MISS AN EPISODE!   " ..
    "%   RAMON BS / DESIRE * X-MAS IS DRAWING NEAR . . . TIME TO PULL OUT THE UGLY SWEATERS!   " ..
    "%   RP / FARBRAUSCH * I REALLY LOVED CHATTING WITH YOU!   " ..
    "%   SHANA / ECHTZEIT * IT WAS AWESOME OF YOU TO DELIVER THE CHOCOLATE TROPHY FROM MOUNTAINBYTES IN PERSON!   " ..
    "%   SLAZE / DESIRE * I LOVED YOUR LATEST DNB ALBUM, KEEP IT UP!!!   " ..
    "%   SPKR / SMFX * CAN'T WAIT FOR YOUR NEXT RELEASES!   " ..
    "%   SUULE / OFTENHIDE * YOUR STUFF ON THE TIC-BO HAS BEEN A GREAT INSPIRATION TO ME!   " ..
    "%   STEFFEST / DESIRE * LOVE YOUR WORK!   " ..
    "%   UNLOCK / VANTAGE * IT WAS SO COOL TO FINALLY MEET YOU AGAIN AFTER MORE THAN TWENTY YEARS! HERE'S TO THE NEXT TWENTY!!!   " ..
    "%   VIRGILL / ALCATRAZ * IT WAS AN HONOR WORKING WITH YOU! IT WAS AN ABSOLUTE JOY!!!   " ..
    "%   ZAK / FROZAK * YOU ARE THE REAL SMOOTH CRIMINAL!!!   " ..
    "               . . . . . . I GUESS THAT IS IT FOR THE MOMENT . . .   OLYMPIAN / SPECTROX SIGNING OFF AND SEE YOU IN THE NEXT ONE % % %"
_hiddenScrollX = 500

_hiddenDelayMap = {
    0, 75, 80, 165, 170, 245, 200, 195, 120, 115, 40, 35,
    5, 70, 85, 160, 175, 240, 205, 190, 125, 110, 45, 30,
    10, 65, 90, 155, 180, 235, 210, 185, 130, 105, 50, 25,
    15, 60, 95, 150, 185, 230, 215, 180, 135, 100, 55, 20,
    20, 55, 100, 145, 190, 225, 220, 175, 140, 95, 60, 15,
    25, 50, 105, 140, 195, 220, 225, 170, 145, 90, 65, 10,
    30, 45, 110, 135, 200, 215, 230, 165, 150, 85, 70, 5,
    35, 40, 125, 130, 205, 210, 235, 160, 155, 80, 75, 0,
}
_hiddenDelayMapMaxVal = 172 -- NOTE: Don't forget to keep updated!
_hiddenDelayFactor = 8

-------------------------------------------------------------------------------
--- ANIM
-------------------------------------------------------------------------------

-- Must be sequential numeric indices starting at 1.
local AnimNames = {
    STARTUP_DELAY = 1,
    SCREEN_FADER = 2,
    PRESENTS = 3,
    TITLE = 4,
    BLOB = 5,
    CREDITS = 6,
    TRANSIT2LISSA = 7,
    LISSA = 8,
    SHADOW = 9,
    TRANSIT2SHADOW = 10,
    HAVE2RUN = 11,
    RUNNER = 12,
    TRANSIT2VOX = 13,
    VOX = 14,
    WATERFIELD = 15,
    UNDERWATER = 16,
    HIDDEN = 17,
}

local _schedule = core_anim_new_schedule()

-------------------------------------------------------------------------------
--- STARTUP_DELAY ANIM

core_anim_add_anim(AnimNames.STARTUP_DELAY, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_nop(1),
    },
    function() end,
    function() core_anim_start(_schedule.anims[AnimNames.SCREEN_FADER], _timer) end
))

-------------------------------------------------------------------------------
--- SCREEN_FADER ANIM

_coverHeight = { 0 }
_faderPalFactor = { 0 }

function screenFaderSceneStarted()
    vbank(1)
    core_pal_apply(_palBlob)
    core_pal_apply_color(14, 255, 255, 255)
    core_pal_apply_color(15, _palTic[1], _palTic[2], _palTic[3])
    _musicStarted = true
end

function screenFaderSceneCompleted()
    -- Reset vbanks and start next anim.
    vbank(1)
    cls(0)
    vbank(0)
    core_anim_start(_schedule.anims[AnimNames.PRESENTS], _timer)
end

core_anim_add_anim(AnimNames.SCREEN_FADER, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(0, 2, { -1 }, { 69 }, core_easing_bounce_once_out, _coverHeight),
        core_anim_new_keyframe_tween(0.5, 1.7, { 0 }, { 1 }, core_easing_lerp, _faderPalFactor),
        core_anim_new_keyframe_nop(3),
    },
    screenFaderSceneStarted,
    screenFaderSceneCompleted
))

-------------------------------------------------------------------------------
--- PRESENTS ANIM

_presentsHighlightLines = {
    { y = { 0 } },
    { y = { 0 } },
    { y = { 0 } },
}

_presents1Enabled = true
_presents2Enabled = false
_presents3Enabled = false

_presentsColorIdx = { #_presentsFadeIndexes }
_presentsClipPosY = { -20 }

function presentsSceneStarted()
    vbank(0)
    core_pal_apply(_palTitleHighlightOnly)
    vbank(1)
    core_pal_apply(_imgNeobyte.palette)
end

function presentsSceneCompleted()
    vbank(1)
    cls(0)
    vbank(0)
    core_anim_start(_schedule.anims[AnimNames.TITLE], _timer)
end

core_anim_add_anim(AnimNames.PRESENTS, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(0, 2, { 33 }, { 103 }, core_easing_lerp, _presentsHighlightLines[1].y),
        core_anim_new_keyframe_tween(0, 2, { -16 }, { 54 }, core_easing_lerp, _presentsClipPosY), -- Clip top down.
        core_anim_new_keyframe_tween(2.3, 3.65, { #_presentsFadeIndexes }, { 1 }, core_easing_lerp, _presentsColorIdx),
        core_anim_new_keyframe_fire_once(4, function()
            _presents1Enabled = false
            _presents2Enabled = true
            _presentsColorIdx[1] = #_presentsFadeIndexes
        end),
        core_anim_new_keyframe_tween(4, 6, { 33 }, { 103 }, core_easing_lerp, _presentsHighlightLines[1].y),
        core_anim_new_keyframe_tween(4, 6, { 103 }, { 33 }, core_easing_lerp, _presentsHighlightLines[2].y),
        core_anim_new_keyframe_tween(4, 6, { 103 }, { 33 }, core_easing_lerp, _presentsClipPosY), -- Clip bottom up.
        core_anim_new_keyframe_tween(6.3, 7.65, { #_presentsFadeIndexes }, { 1 }, core_easing_lerp, _presentsColorIdx),
        core_anim_new_keyframe_fire_once(8, function()
            _presents2Enabled = false
            _presents3Enabled = true
            _presentsColorIdx[1] = #_presentsFadeIndexes
        end),
        core_anim_new_keyframe_tween(8, 10, { 33 }, { 103 }, core_easing_lerp, _presentsHighlightLines[1].y),
        core_anim_new_keyframe_tween(8, 10, { 113 }, { 33 }, core_easing_lerp, _presentsHighlightLines[2].y),
        core_anim_new_keyframe_tween(8, 10, { 23 }, { 103 }, core_easing_lerp, _presentsHighlightLines[3].y),
        core_anim_new_keyframe_tween(8, 10, { -16 }, { 54 }, core_easing_lerp, _presentsClipPosY), -- Clip top down.
        core_anim_new_keyframe_tween(10.3, 11.65, { #_presentsFadeIndexes }, { 1 }, core_easing_lerp, _presentsColorIdx),

    },
    presentsSceneStarted,
    presentsSceneCompleted
))

-------------------------------------------------------------------------------
--- TITLE ANIM

_numTitleHighlightLines = { 0 }
_titlePalMaxFactor = { 1 }
_titlePalMixEnabled = true
_titleGridEnabled = false
_titleFlashFactor = { 0 }
_titleFlashEnabled = false
_titlePosXAmp = 0
_titleGridVerticalOnly = true
_pressStartEnabled = false

_blobBorderTopX = { 245 }
_blobBorderBottomX = { -245 }

function titleSceneStarted()
    vbank(0)
    core_pal_apply(_palBlob)
end

function titleSceneCompleted()
    -- Reset vbanks and start next anim.
    vbank(1)
    cls(0)
    vbank(0)
    core_anim_start(_schedule.anims[AnimNames.BLOB], _timer)
end

core_anim_add_anim(AnimNames.TITLE, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(0, 1, { 0 }, { 3 }, core_easing_lerp, _numTitleHighlightLines),
        core_anim_new_keyframe_tween(2, 5, { 3 }, { 160 }, core_easing_lerp, _numTitleHighlightLines),
        --
        core_anim_new_keyframe_tween(7.4, 10, { 160 }, { 5 }, core_easing_lerp, _numTitleHighlightLines),
        core_anim_new_keyframe_tween(10.5, 10.9, { 5 }, { 3 }, core_easing_lerp, _numTitleHighlightLines),
        core_anim_new_keyframe_tween(9.7, 10.8, { 1 }, { 0 }, core_easing_quadratic_out, _titlePalMaxFactor),
        --
        core_anim_new_keyframe_fire_once(10.95, function()
            _pressStartBlinkerEnabled = false
            _titlePalMixEnabled = false
            _titleGridEnabled = true
            _titleFlashEnabled = true
            _pressStartEnabled = true
        end),
        core_anim_new_keyframe_tween(10.95, 11.95, { 1 }, { 0 }, core_easing_lerp, _titleFlashFactor),
        --
        core_anim_new_keyframe_fire_once(21.08, function()
            _titlePosXAmp = 60
            _titleGridVerticalOnly = false
            _pressStartEnabled = false
            _blobBorderTopX[1] = 0
            _blobBorderBottomX[1] = 0
        end),
        core_anim_new_keyframe_tween(21.08, 22.08, { 1 }, { 0 }, core_easing_lerp, _titleFlashFactor),
        core_anim_new_keyframe_tween(23.22, 24.22, { 1 }, { 0 }, core_easing_lerp, _titleFlashFactor),
        core_anim_new_keyframe_tween(25.35, 26.35, { 1 }, { 0 }, core_easing_lerp, _titleFlashFactor),
        --
        core_anim_new_keyframe_nop(26.95),
    },
    titleSceneStarted,
    titleSceneCompleted
))

-------------------------------------------------------------------------------
--- BLOB ANIM

_blobEnabled              = true
_blobFlashEnabled         = true
_blobFlashFactor          = { 1 }
_blobPos                  = { 280, -180 }
_blobGridColorIdx         = { #_runTextFadeColors }
_blobGridColorFadeEnabled = false

function blobSceneStarted()
    core_pal_apply(_palBlob)
end

core_anim_add_anim(AnimNames.BLOB, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(0, 1, { 1 }, { 0 }, core_easing_lerp, _blobFlashFactor),
        core_anim_new_keyframe_fire_once(1, function() _blobFlashEnabled = false; end),
        core_anim_new_keyframe_tween(0, .8, { 280, 0 }, { -100, 0 }, core_easing_quadratic_out, _blobPos),
        core_anim_new_keyframe_tween(.8, 1.9, { -100, 0 }, { 0, 0 }, core_easing_quadratic_in_out, _blobPos),
        --
        core_anim_new_keyframe_tween(17, 18, { 0, 0 }, { 0, 150 }, core_easing_back_in, _blobPos),
        core_anim_new_keyframe_fire_once(18, function() _blobEnabled = false; end),

        core_anim_new_keyframe_tween(17.2, 18, { 0 }, { 245 }, core_easing_quadratic_out, _blobBorderTopX),
        core_anim_new_keyframe_tween(17.2, 18, { 0 }, { -245 }, core_easing_quadratic_out, _blobBorderBottomX),
        --
        core_anim_new_keyframe_fire_once(17.2, function() _blobGridColorFadeEnabled = true; end),
        core_anim_new_keyframe_tween(17.2, 18, { #_runTextFadeColors }, { 1 }, core_easing_lerp, _blobGridColorIdx),
    },
    blobSceneStarted,
    function() core_anim_start(_schedule.anims[AnimNames.CREDITS], _timer) end
))

-------------------------------------------------------------------------------
--- CREDITS ANIM

_creditsOlympianFadeIndex = { #_presentsFadeIndexes }
_creditsVirgillFadeIndex  = { #_presentsFadeIndexes }
_creditsOlympianPos       = { 0, 0 }
_creditsCodePos           = { 0, 0 }
_creditsVirgillPos        = { 0, 0 }
_creditsMusicPos          = { 0, 0 }

_creditsOlympianEnabled   = false
_creditsVirgillEnabled    = false

function creditsSceneStarted()
    core_pal_apply(_imgNeobyte.palette)
end

core_anim_add_anim(AnimNames.CREDITS, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_fire_once(1.7267, function() _creditsOlympianEnabled = true; end),
        core_anim_new_keyframe_tween(1.96, 2.86, { #_presentsFadeIndexes }, { 1 }, core_easing_cubic_in,
            _creditsOlympianFadeIndex),
        core_anim_new_keyframe_tween(1.7267, 2.86, { 0, 0 }, { 20, 0 }, core_easing_lerp, _creditsOlympianPos),
        core_anim_new_keyframe_tween(1.7267, 2.86, { 0, 0 }, { -20, 0 }, core_easing_lerp, _creditsCodePos),
        --
        core_anim_new_keyframe_fire_once(3.8667, function() _creditsVirgillEnabled = true; end),
        core_anim_new_keyframe_tween(4.1, 5, { #_presentsFadeIndexes }, { 1 }, core_easing_cubic_in,
            _creditsVirgillFadeIndex),
        core_anim_new_keyframe_tween(3.8667, 5, { 0, 0 }, { -20, 0 }, core_easing_lerp, _creditsVirgillPos),
        core_anim_new_keyframe_tween(3.8667, 5, { 0, 0 }, { 20, 0 }, core_easing_lerp, _creditsMusicPos),
        --
        core_anim_new_keyframe_nop(5),
    },
    creditsSceneStarted,
    function() core_anim_start(_schedule.anims[AnimNames.TRANSIT2LISSA], _timer) end
))

-------------------------------------------------------------------------------
--- TANSIT2LISSA ANIM

_lissaCoverTilesProgress = { 2 }
_coverLinesFactor = { 1 }
_lissaBGFlickerStrength = { 10 }

function transit2LissaSceneStarted()
    vbank(0)
    core_pal_apply(_imgLissaBG.palette)
    core_pal_apply_color(13, 26, 29, 33) -- Perspective lines color at index 13.
    vbank(1)
    core_pal_apply(_palTransit2LissaFont)
end

function transit2LissaSceneCompleted()
    -- Reset vbanks and start next anim.
    vbank(1)
    cls(0)
    vbank(0)
    core_anim_start(_schedule.anims[AnimNames.LISSA], _timer)
end

core_anim_add_anim(AnimNames.TRANSIT2LISSA, _schedule, core_anim_new(false,
    {
        -- Wait for text fully scrolled in.
        core_anim_new_keyframe_nop(3),
        core_anim_new_keyframe_tween(1, 2.5, { 1 }, { 0 }, core_easing_lerp, _coverLinesFactor),
    },
    transit2LissaSceneStarted,
    transit2LissaSceneCompleted
))

-------------------------------------------------------------------------------
--- LISSA ANIM

_lissaCount = { 0 }
_lissaSpeed = { 0 }
_lissaTranslateZ = { 0 }

_lissaLogoLeftPosY = { 111 }
_lissaLogoRightPosY = { 111 }

function lissaSceneStarted()
    vbank(0)
    core_pal_apply(_imgLissaBG.palette)
    core_pal_apply_color(13, 26, 29, 33) -- Perspective lines color at index 13.
    vbank(1)
    core_pal_apply(_palLissa)
end

function lissaSceneCompleted()
    -- Reset vbanks and start next anim.
    vbank(1)
    cls(0)
    vbank(0)
    core_anim_start(_schedule.anims[AnimNames.TRANSIT2SHADOW], _timer)
end

core_anim_add_anim(AnimNames.LISSA, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(0, 10, { 0 }, { 5000 }, core_easing_quadratic_in, _lissaCount),
        core_anim_new_keyframe_tween(0, 10, { 0 }, { 200 }, core_easing_quadratic_in_out, _lissaSpeed),
        core_anim_new_keyframe_tween(18.5, 24.5, { 5000 }, { 0 }, core_easing_quadratic_in_out, _lissaCount),
        --
        core_anim_new_keyframe_tween(7.5, 10.5, { 0 }, { 20 }, core_easing_quadratic_in_out, _lissaTranslateZ),
        core_anim_new_keyframe_tween(18, 20.5, { 20 }, { -10 }, core_easing_quadratic_in_out, _lissaTranslateZ),
        core_anim_new_keyframe_tween(20.5, 24.5, { -10 }, { 0 }, core_easing_quadratic_in_out, _lissaTranslateZ),
        --
        core_anim_new_keyframe_tween(1, 3, { 10 }, { 3 }, core_easing_lerp, _lissaBGFlickerStrength),
    },
    lissaSceneStarted,
    lissaSceneCompleted
))

-------------------------------------------------------------------------------
--- TRANSIT2SHADOW ANIM

_shadowCubeScale = { 0 }
_cubeRandRange1 = { 0 }
_cubeRandRange2 = { 0 }
_shadowCubeAmpX = { 0 }
_shadowCubeAmpY = { 0 }
_cubeRenderOffY = { 0 }
_shadowCubeSineOffset = 0

function transit2ShadowSceneStarted()
    _lissaCoverTilesProgress[1] = 0 -- Only needed if scene is started directly.
    vbank(0)
    core_pal_apply(_imgLissaBG.palette)
    core_pal_apply_color(13, 26, 29, 33) -- Perspective lines color at index 13.
    vbank(1)
    core_pal_apply(_palShadow)
    core_pal_apply_color(10, 255, 255, 255) -- White index 10 for text color.
end

function lissaSceneCompleted()
    core_anim_start(_schedule.anims[AnimNames.SHADOW], _timer)
end

core_anim_add_anim(AnimNames.TRANSIT2SHADOW, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(0, 2, { 0 }, { 1.4 }, core_easing_back_out, _shadowCubeScale),
        core_anim_new_keyframe_tween(2, 5, { 1.4 }, { 1 }, core_easing_quadratic_out, _shadowCubeScale),
        --
        core_anim_new_keyframe_tween(4, 6, { 0 }, { 4 }, core_easing_quadratic_in, _shadowCubeAmpY), -- Must match with SHADOW anim.
        core_anim_new_keyframe_tween(4, 6, { 0 }, { 2 }, core_easing_quadratic_in, _shadowCubeAmpX), -- Must match with SHADOW anim.
        --
        core_anim_new_keyframe_tween(.1, .5, { 2 }, { 5 }, core_easing_lerp, _cubeRandRange1),
        core_anim_new_keyframe_tween(.1, .5, { 2 }, { 6 }, core_easing_lerp, _cubeRandRange2),
        --
        core_anim_new_keyframe_tween(1.25, 4.25, { 0 }, { 2 }, core_easing_lerp, _lissaCoverTilesProgress),
        --
        core_anim_new_keyframe_tween(3.2, 3.7, { 111 }, { 140 }, core_easing_cubic_in, _lissaLogoLeftPosY),
        core_anim_new_keyframe_tween(3.4, 3.9, { 111 }, { 180 }, core_easing_cubic_in, _lissaLogoRightPosY),
    },
    transit2ShadowSceneStarted,
    lissaSceneCompleted
))

-------------------------------------------------------------------------------
--- SHADOW ANIM

_shadowCubeOffX = { 0 }
_shadowCubeOffY = { 0 }
_shadowCubeOffZ = { 0 }
_shadowLightIntensity = { 0 }
_shadowFadeLight = { 0 }
_shadowFadeTexture = { 0 }

function shadowSceneStarted()
    vbank(1)
    core_pal_apply(_palShadow)
    vbank(0)
    core_pal_apply(_palShadow)
    cls(0)
end

function shadowSceneCompleted()
    -- Reset vbanks and start next anim.
    vbank(1)
    cls(0)
    vbank(0)
    core_anim_start(_schedule.anims[AnimNames.HAVE2RUN], _timer)
end

core_anim_add_anim(AnimNames.SHADOW, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(0, 1, { 0 }, { 1 }, core_easing_lerp, _shadowFadeTexture),
        core_anim_new_keyframe_tween(1, 2, { 0 }, { 1 }, core_easing_quadratic_in, _shadowFadeLight),
        --
        core_anim_new_keyframe_tween(0, 1.75, { 4 }, { 3 }, core_easing_lerp, _shadowCubeAmpY),
        core_anim_new_keyframe_tween(0, 1.75, { 2 }, { 4 }, core_easing_lerp, _shadowCubeAmpX),
        --
        core_anim_new_keyframe_tween(1, 5, { 0 }, { 1 }, core_easing_quadratic_out, _shadowLightIntensity),
        core_anim_new_keyframe_tween(5, 8, { 1 }, { 3 }, core_easing_quadratic_in_out, _shadowCubeScale),
        core_anim_new_keyframe_tween(9, 12, { 3 }, { .8 }, core_easing_quadratic_in_out, _shadowCubeScale),
        core_anim_new_keyframe_tween(12, 16, { .8 }, { 4 }, core_easing_quadratic_in_out, _shadowCubeScale),
        --
        core_anim_new_keyframe_tween(16, 20, { 4 }, { 2 }, core_easing_quadratic_in_out, _shadowCubeScale),
        core_anim_new_keyframe_tween(23, 25, { 2 }, { 1 }, core_easing_quadratic_in_out, _shadowCubeScale),
        core_anim_new_keyframe_tween(25, 27, { 0 }, { -10 }, core_easing_quadratic_in, _shadowCubeOffY),
        core_anim_new_keyframe_tween(25, 27, { 1 }, { 0 }, core_easing_quadratic_in, _shadowLightIntensity),
        core_anim_new_keyframe_tween(24, 27, { 4 }, { 6 }, core_easing_quadratic_in_out, _shadowCubeAmpX),
        --
        core_anim_new_keyframe_nop(29.4),
    },
    shadowSceneStarted,
    shadowSceneCompleted
))

-------------------------------------------------------------------------------
--- HAVE2RUN ANIM

_runnersOffX = { -200 }

_runLine1Pos = { 0, 0 }
_runText1ColorIdx = { 1 }
_runText2ColorIdx = { 1 }
_runText3ColorIdx = { 1 }

_runLine2Pos = { 0, 0 }
_runText4ColorIdx = { 1 }
_runText5ColorIdx = { 1 }
_runText6ColorIdx = { 1 }

_runLine3Pos = { 0, 0 }
_runText7ColorIdx = { 1 }
_runText8ColorIdx = { 1 }
_runText9ColorIdx = { 1 }

_runnerFloorLines = {
    { x = { -244 }, y = 88,  ts = 1,   te = 3 },
    { x = { -244 }, y = 92,  ts = 1.9, te = 3.2 },
    { x = { -244 }, y = 97,  ts = 1.8, te = 4.2 },
    { x = { -244 }, y = 100, ts = 1.7, te = 2.7 },
    { x = { -244 }, y = 102, ts = 2.2, te = 4.2 },
    --
    { x = { -244 }, y = 104, ts = .5,  te = 3 },
    { x = { -244 }, y = 105, ts = .5,  te = 3 },
    { x = { -244 }, y = 106, ts = .5,  te = 3 },
    { x = { -244 }, y = 107, ts = .5,  te = 3 },
    --
    { x = { -244 }, y = 109, ts = 2,   te = 4.3 },
    { x = { -244 }, y = 111, ts = 1.3, te = 3.4 },
    { x = { -244 }, y = 114, ts = .8,  te = 4.5 },
    { x = { -244 }, y = 117, ts = 1.5, te = 3.1 },
    { x = { -244 }, y = 122, ts = 1.6, te = 3.6 },
}

function have2runSceneStarted()
    core_pal_apply(_palRunner)
end

core_anim_add_anim(AnimNames.HAVE2RUN, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(2, 5, { 0, 0 }, { 0, 80 }, core_easing_quadratic_in, _runLine1Pos),
        core_anim_new_keyframe_tween(5.7, 8.7, { 0, 0 }, { 0, 80 }, core_easing_quadratic_in, _runLine2Pos),
        core_anim_new_keyframe_tween(10, 13, { 0, 0 }, { 0, 80 }, core_easing_quadratic_in, _runLine3Pos),
        --
        core_anim_new_keyframe_tween(.5, 2, { 1 }, { #_runTextFadeColors }, core_easing_lerp, _runText1ColorIdx),
        core_anim_new_keyframe_tween(0, 1.5, { 1 }, { #_runTextFadeColors }, core_easing_lerp, _runText2ColorIdx),
        core_anim_new_keyframe_tween(.7, 2.2, { 1 }, { #_runTextFadeColors }, core_easing_lerp, _runText3ColorIdx),
        --
        core_anim_new_keyframe_tween(4.2, 5.7, { 1 }, { #_runTextFadeColors }, core_easing_lerp, _runText4ColorIdx),
        core_anim_new_keyframe_tween(4.7, 6.2, { 1 }, { #_runTextFadeColors }, core_easing_lerp, _runText5ColorIdx),
        core_anim_new_keyframe_tween(4.4, 5.2, { 1 }, { #_runTextFadeColors }, core_easing_lerp, _runText6ColorIdx),
        --
        core_anim_new_keyframe_tween(2.2, 3.7, { #_runTextFadeColors }, { 1 }, core_easing_lerp, _runText1ColorIdx),
        core_anim_new_keyframe_tween(2.5, 4, { #_runTextFadeColors }, { 1 }, core_easing_lerp, _runText2ColorIdx),
        core_anim_new_keyframe_tween(2, 3.5, { #_runTextFadeColors }, { 1 }, core_easing_lerp, _runText3ColorIdx),
        --
        core_anim_new_keyframe_tween(6.1, 7.6, { #_runTextFadeColors }, { 1 }, core_easing_lerp, _runText4ColorIdx),
        core_anim_new_keyframe_tween(6.4, 7.9, { #_runTextFadeColors }, { 1 }, core_easing_lerp, _runText5ColorIdx),
        core_anim_new_keyframe_tween(5.9, 7.4, { #_runTextFadeColors }, { 1 }, core_easing_lerp, _runText6ColorIdx),
        --
        core_anim_new_keyframe_tween(8.5, 10, { 1 }, { #_runTextFadeColors }, core_easing_lerp, _runText7ColorIdx),
        core_anim_new_keyframe_tween(9, 10.5, { 1 }, { #_runTextFadeColors }, core_easing_lerp, _runText8ColorIdx),
        core_anim_new_keyframe_tween(8.7, 10.2, { 1 }, { #_runTextFadeColors }, core_easing_lerp, _runText9ColorIdx),
        --
        core_anim_new_keyframe_tween(10.2, 11.7, { #_runTextFadeColors }, { 1 }, core_easing_lerp, _runText7ColorIdx),
        core_anim_new_keyframe_tween(10.95, 12.45, { #_runTextFadeColors }, { 1 }, core_easing_lerp, _runText8ColorIdx),
        core_anim_new_keyframe_tween(10.7, 12.2, { #_runTextFadeColors }, { 1 }, core_easing_lerp, _runText9ColorIdx),

        -- Floor lines are added in init function later.

        core_anim_new_keyframe_tween(17, 20, { -200 }, { 0 }, core_easing_lerp, _runnersOffX),
    },
    have2runSceneStarted,
    function() core_anim_start(_schedule.anims[AnimNames.RUNNER], _timer) end
))

-------------------------------------------------------------------------------
--- RUNNER ANIM

_runnerGreetsFactor = 0
_runnerSwipesX = {}
_runnerSwipesEnabled = true
_runnerBlackBayerX = { 0 }

_runnerTransitionOutTopY = { -70 }
_runnerTransitionOutBottomY = { 136 }

_runnerBulkEnabled = false

_doggyPosX = { -60 }
_gradSunPosY = { -10 }

_runnerTreesClipPosX = { 0 }
_runnerSkylineFrontClipPosX = { 0 }
_runnerSkylineBackClipPosX = { 0 }

_floorFlashFactor = { 1 }
_runnerGradBGMixFactor = { 0 } -- 0: Bright, 1: Nighttime.
_runnerSunSpeed = { 9 }
_sunPosY = { 0 }

function runnerSceneStarted()
    core_pal_apply(_palRunner)
end

core_anim_add_anim(AnimNames.RUNNER, _schedule, core_anim_new(false,
    {
        -- Swipe anim is added in init function later.
        --
        core_anim_new_keyframe_fire_once(5, function()
            _runnerGreetsFactor = 1
        end),
        core_anim_new_keyframe_tween(2, 3, { 0 }, { -20 }, core_easing_lerp, _runnerBlackBayerX),
        core_anim_new_keyframe_fire_once(7, function() _runnerSwipesEnabled = false end),

        core_anim_new_keyframe_tween(0, 6, { 1 }, { .3 }, core_easing_lerp, _floorFlashFactor),
        --
        core_anim_new_keyframe_tween(33, 38, { 0 }, { 1 }, core_easing_lerp, _runnerGradBGMixFactor),
        core_anim_new_keyframe_tween(32, 37, { 9 }, { 20 }, core_easing_lerp, _runnerSunSpeed),
        core_anim_new_keyframe_tween(32, 39, { 0 }, { 40 }, core_easing_quadratic_in, _sunPosY),
        core_anim_new_keyframe_tween(32, 38, { -10 }, { -80 + 50 }, core_easing_quadratic_in, _gradSunPosY),
        --
        core_anim_new_keyframe_tween(38, 43, { 0 }, { 300 }, core_easing_quadratic_in, _runnersOffX),
        --
        core_anim_new_keyframe_tween(43.75, 46.5, { 0 }, { 280 }, core_easing_quadratic_out, _runnerTreesClipPosX),
        core_anim_new_keyframe_tween(44.25, 46.5, { 0 }, { 280 }, core_easing_quadratic_out, _runnerSkylineBackClipPosX),
        core_anim_new_keyframe_tween(44.75, 46.5, { 0 }, { 280 }, core_easing_quadratic_out, _runnerSkylineFrontClipPosX),
        --

        core_anim_new_keyframe_fire_once(38, function()
            _runnerBulkEnabled = true
        end),

        core_anim_new_keyframe_tween(40.7, 44.7, { -60 }, { 260 }, core_easing_quadratic_in, _doggyPosX),

        -- Stripes anims are added in init function. See `delaySwipeOut`.

        --
        core_anim_new_keyframe_tween(45, 46.323333, { -70 }, { 0 }, core_easing_quadratic_out, _runnerTransitionOutTopY),
        core_anim_new_keyframe_tween(45, 46.323333, { 136 }, { 69 }, core_easing_quadratic_out,
            _runnerTransitionOutBottomY),
    },
    runnerSceneStarted,
    function() core_anim_start(_schedule.anims[AnimNames.TRANSIT2VOX], _timer) end
))

-------------------------------------------------------------------------------
--- TRANSIT2VOX ANIM

_voxCoverTopY = { 0 }
_voxCoverBottomY = { 0 }
_voxLinesSpectroxFactor = { 1 }
_voxStripesPulseFactor = { 0 }

_stripes = {
    -- 1
    {
        yoff = { -50 },
        { y = -17, h = 2 * 17, c = { 62, 32, 89 }, cf = { 155, 40, 166 } },
        { y = 17,  h = 1,      c = { 52, 28, 79 }, cf = { 131, 34, 148 } },
    },
    -- 2
    {
        yoff = { -50 },
        { y = 19, h = 1, c = { 34, 22, 61 }, cf = { 87, 27, 114 } },
        { y = 20, h = 3, c = { 43, 25, 70 }, cf = { 109, 31, 131 } },
        { y = 23, h = 1, c = { 34, 22, 61 }, cf = { 87, 27, 114 } },
    },
    -- 3
    {
        yoff = { -50 },
        { y = 25, h = 1, c = { 16, 16, 43 }, cf = { 43, 20, 80 } },
        { y = 26, h = 2, c = { 25, 19, 52 }, cf = { 65, 24, 97 } },
        { y = 28, h = 1, c = { 16, 16, 43 }, cf = { 43, 20, 80 } },
    },
    -- 4
    {
        yoff = { -50 },
        { y = 31, h = 1, c = { 7, 13, 34 },  cf = { 13, 3, 64 } },
        { y = 32, h = 1, c = { 16, 16, 43 }, cf = { 43, 20, 80 } },
        { y = 33, h = 1, c = { 7, 13, 34 },  cf = { 13, 3, 64 } },
    },
    ---
    -- 8
    {
        yoff = { 50 },
        { y = 118, h = 1,      c = { 52, 28, 79 }, cf = { 155, 40, 166 } },
        { y = 119, h = 2 * 17, c = { 62, 32, 89 }, cf = { 131, 34, 148 } },
    },
    -- 7
    {
        yoff = { 50 },
        { y = 112, h = 1, c = { 34, 22, 61 }, cf = { 87, 27, 114 } },
        { y = 113, h = 3, c = { 43, 25, 70 }, cf = { 109, 31, 131 } },
        { y = 116, h = 1, c = { 34, 22, 61 }, cf = { 87, 27, 114 } },
    },
    -- 6
    {
        yoff = { 50 },
        { y = 107, h = 1, c = { 16, 16, 43 }, cf = { 43, 20, 80 } },
        { y = 108, h = 2, c = { 25, 19, 52 }, cf = { 65, 24, 97 } },
        { y = 110, h = 1, c = { 16, 16, 43 }, cf = { 43, 20, 80 } },
    },
    -- 5
    {
        yoff = { 50 },
        { y = 102, h = 1, c = { 7, 13, 34 },  cf = { 13, 3, 64 } },
        { y = 103, h = 1, c = { 16, 16, 43 }, cf = { 43, 20, 80 } },
        { y = 104, h = 1, c = { 7, 13, 34 },  cf = { 13, 3, 64 } },
    },
}

_voxTxts = {
    {
        txt = "days",
        x = { 54 },
        col = { 1 },
        amp = { 0 },
    },
    {
        txt = "the",
        x = { 154 },
        col = { 1 },
        amp = { 0 },
    },
    {
        txt = "you",
        x = { 90 },
        col = { 1 },
        amp = { 0 },
    },
    {
        txt = "some",
        x = { 18 },
        col = { 1 },
        amp = { 0 },
    },
    {
        txt = "feel",
        x = { 118 },
        col = { 1 },
        amp = { 0 },
    },
    {
        txt = "twist...",
        x = { 182 },
        col = { 1 },
        amp = { 0 },
    },
}

function transit2VoxSceneStarted()
    core_pal_apply(_imgSpectrox.palette)
end

core_anim_add_anim(AnimNames.TRANSIT2VOX, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(0, 2, { 0 }, { -65 }, core_easing_bounce_once_out, _voxCoverTopY),
        core_anim_new_keyframe_tween(0, 2, { 0 }, { 65 }, core_easing_bounce_once_out, _voxCoverBottomY),
        --
        core_anim_new_keyframe_tween(3, 4, { 1 }, { 0 }, core_easing_lerp, _voxLinesSpectroxFactor),
        --
        core_anim_new_keyframe_tween(1.3, 2.3, { -50 }, { 0 }, core_easing_back_out, _stripes[1].yoff),
        core_anim_new_keyframe_tween(1.4, 2.5, { -50 }, { 0 }, core_easing_back_out, _stripes[2].yoff),
        core_anim_new_keyframe_tween(1.5, 2.7, { -50 }, { 0 }, core_easing_back_out, _stripes[3].yoff),
        core_anim_new_keyframe_tween(1.6, 2.9, { -50 }, { 0 }, core_easing_back_out, _stripes[4].yoff),
        --
        core_anim_new_keyframe_tween(1.3, 2.3, { 50 }, { 0 }, core_easing_back_out, _stripes[5].yoff),
        core_anim_new_keyframe_tween(1.4, 2.5, { 50 }, { 0 }, core_easing_back_out, _stripes[6].yoff),
        core_anim_new_keyframe_tween(1.5, 2.7, { 50 }, { 0 }, core_easing_back_out, _stripes[7].yoff),
        core_anim_new_keyframe_tween(1.6, 2.9, { 50 }, { 0 }, core_easing_back_out, _stripes[8].yoff),

        -- Generated color fade keys come here (see `initTransit2VoxTextsAnims`). Last generated end time at 5.7s.
    },
    transit2VoxSceneStarted,
    function() core_anim_start(_schedule.anims[AnimNames.VOX], _timer) end
))


-------------------------------------------------------------------------------
--- VOX ANIM

function voxSceneStarted()
    vbank(1)
    core_pal_apply(_voxPal)
    vbank(0)
    core_pal_apply(_imgSpectrox.palette)

    _shadowCubeColors = { 14, 8, 3 }
    _voxLogoFlashFactor = .5
end

function voxSceneCompleted()
    -- Reset vbanks and start next anim.
    vbank(1)
    cls(0)
    vbank(0)
    core_anim_start(_schedule.anims[AnimNames.WATERFIELD], _timer)
end

_voxAng = { M_PI_4 }
_voxSpdX = { 20 }
_voxSpdY = { 20 }
_voxHoriz = { _voxCam.horizon }
_voxHeight = { _voxCam.height }
_voxScale = { _voxCam.scale }
_voxDitherDist = { 50 }
_voxDitherHoriz = { _voxCam.dist, _voxCam.dist } -- far, near
_voxYOff = { 8 }
_voxRectX = { 0 }
_voxRectAmp = { 0 }
_voxIsTwister = true
_voxGradStripedEnabled = true
_voxShadePulseEnabled = false
_voxLightAmp = { 15 }
_voxFlashFactor = { 0 }
_waterfieldBGSpeed = { 0 }
_cubeEnabled = false

_voxOrbitModeEnabled = false
_voxOrbitCamRadius = 20
_voxOrbitCamTargetPos = { 0, 0 }

_voxGradVbank0Mix = { 0 }
_voxGradVbank0Src = _voxGradStripes
_voxGradVbank0Dst = _voxGradLakes1

_voxGradVbank1Mix = { 1 }
_voxGradVbank1Src = _voxGradLakes1 -- Colorful.
_voxGradVbank1Dst = _voxGradLakes2 -- Blue.

_voxTimeSpeedX = { 0 }

function bdrVoxOffZero()
    return 0
end

function bdrVox0Waterfield()
    return (_waterBGPosY) // 1
end

function bdrVox1OffScroll()
    return (_voxCam.horizon + 100 * _localTimer.elapsed) // 1
end

function bdrVox1OffCube()
    return 30
end

_bdrVox0OffFunc = bdrVoxOffZero
_bdrVox1OffFunc = bdrVox1OffScroll

core_anim_add_anim(AnimNames.VOX, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(8.55, 8.6, { -6 }, { -6 }, core_easing_lerp, _voxTimeSpeedX),
        core_anim_new_keyframe_tween(8.7, 9.2, { -6 }, { -.5 }, core_easing_lerp, _voxTimeSpeedX),
        core_anim_new_keyframe_tween(11.2, 11.8, { -.5 }, { -6 }, core_easing_lerp, _voxTimeSpeedX),
        --
        core_anim_new_keyframe_tween(0, 1, { 0 }, { 40 }, core_easing_lerp, _voxRectAmp),
        core_anim_new_keyframe_tween(0, 3, { 0 }, { 240 }, core_easing_lerp, _voxRectX),
        --
        core_anim_new_keyframe_tween(12.71, 13.71, { 0 }, { 1 }, core_easing_lerp, _voxLinesSpectroxFactor),
        --
        core_anim_new_keyframe_tween(13.79, 14.85, { -65 }, { -75 }, core_easing_back_in, _voxCoverTopY),
        core_anim_new_keyframe_tween(13.79, 14.85, { 65 }, { 75 }, core_easing_back_in, _voxCoverBottomY),
        --
        core_anim_new_keyframe_tween(14.77, 17.77, { .2 }, { 1 }, core_easing_lerp, _voxStripesPulseFactor),
        --
        core_anim_new_keyframe_fire_once(21.3, function()
            _voxGradStripedEnabled = false
            _voxLogoFlashFactor = 0
        end),
        --
        core_anim_new_keyframe_tween(0.1, 1.1, { 18 }, { -50 }, core_easing_exponential_in, _voxTxts[4].x),
        core_anim_new_keyframe_tween(0.3, 1.3, { 54 }, { -50 }, core_easing_exponential_in, _voxTxts[1].x),
        core_anim_new_keyframe_tween(0.5, 1.5, { 90 }, { -50 }, core_easing_exponential_in, _voxTxts[3].x),
        core_anim_new_keyframe_tween(0.7, 1.7, { 118 }, { -50 }, core_easing_exponential_in, _voxTxts[5].x),
        core_anim_new_keyframe_tween(0.9, 1.9, { 154 }, { -50 }, core_easing_exponential_in, _voxTxts[2].x),
        core_anim_new_keyframe_tween(1.1, 2.1, { 182 }, { -50 }, core_easing_exponential_in, _voxTxts[6].x),
        --
        core_anim_new_keyframe_tween(0.1, 1.1, { 0 }, { 25 }, core_easing_lerp, _voxTxts[4].amp),
        core_anim_new_keyframe_tween(0.3, 1.3, { 0 }, { 18 }, core_easing_lerp, _voxTxts[1].amp),
        core_anim_new_keyframe_tween(0.5, 1.5, { 0 }, { 13 }, core_easing_lerp, _voxTxts[3].amp),
        core_anim_new_keyframe_tween(0.7, 1.7, { 0 }, { 18 }, core_easing_lerp, _voxTxts[5].amp),
        core_anim_new_keyframe_tween(0.9, 1.9, { 0 }, { 16 }, core_easing_lerp, _voxTxts[2].amp),
        core_anim_new_keyframe_tween(1.1, 2.1, { 0 }, { 16 }, core_easing_lerp, _voxTxts[6].amp),
        --
        core_anim_new_keyframe_tween(0.1, 1.1, { #_voxTextFadeColors }, { 1 }, core_easing_lerp, _voxTxts[4].col),
        core_anim_new_keyframe_tween(0.3, 1.3, { #_voxTextFadeColors }, { 1 }, core_easing_lerp, _voxTxts[1].col),
        core_anim_new_keyframe_tween(0.5, 1.5, { #_voxTextFadeColors }, { 1 }, core_easing_lerp, _voxTxts[3].col),
        core_anim_new_keyframe_tween(0.7, 1.7, { #_voxTextFadeColors }, { 1 }, core_easing_lerp, _voxTxts[5].col),
        core_anim_new_keyframe_tween(0.9, 1.9, { #_voxTextFadeColors }, { 1 }, core_easing_lerp, _voxTxts[2].col),
        core_anim_new_keyframe_tween(1.1, 2.1, { #_voxTextFadeColors }, { 1 }, core_easing_lerp, _voxTxts[6].col),
        ---
        -- Twister transformation.
        core_anim_new_keyframe_tween(14, 15, { 50 }, { 40 }, core_easing_quadratic_in_out, _voxDitherDist),
        core_anim_new_keyframe_tween(15, 16, { 40 }, { 50 }, core_easing_quadratic_in_out, _voxDitherDist),
        core_anim_new_keyframe_tween(19.1, 21.11, { 50 }, { 136 }, core_easing_quadratic_in, _voxDitherDist),
        core_anim_new_keyframe_fire_once(22, function() _voxIsTwister = false; end),
        core_anim_new_keyframe_tween(19.1, 21.11, { _voxCam.dist, _voxCam.dist }, { 2350, 2250 }, core_easing_lerp,
            _voxDitherHoriz),
        --
        core_anim_new_keyframe_tween(19.1, 21.11, { 8 }, { 0 }, core_easing_lerp, _voxYOff),
        --
        core_anim_new_keyframe_tween(18.5, 21.11, { -105 }, { 0 }, core_easing_quadratic_in_out, _voxHoriz),
        core_anim_new_keyframe_tween(18.5, 21.11, { 1475 }, { 600 }, core_easing_quadratic_in_out, _voxHeight),
        core_anim_new_keyframe_tween(18.5, 21.11, { 240 }, { 180 }, core_easing_quadratic_in_out, _voxScale),
        --
        core_anim_new_keyframe_tween(20.5, 23.11, { M_PI_4 }, { M_PI_2 }, core_easing_quadratic_in_out, _voxAng),
        core_anim_new_keyframe_tween(21.1, 23.11, { 20 }, { 0 }, core_easing_quadratic_in_out, _voxSpdX),
        core_anim_new_keyframe_tween(21.1, 23.11, { 20 }, { 40 }, core_easing_quadratic_in_out, _voxSpdY),
        --
        ---
        -- Tall mountains.
        core_anim_new_keyframe_fire_once(25.38, function()
            _voxAng[1] = M_PI_4
            _voxCam.pos.x = 0
            _voxCam.pos.y = 0
            _voxHeight[1] = 300
            _voxHoriz[1] = 0
            _voxScale[1] = 480
            _voxSpdX[1] = -30
            _voxSpdY[1] = 20
        end),
        core_anim_new_keyframe_tween(25.38, 28.2, { M_PI_4 }, { -M_PI_4 }, core_easing_quadratic_in_out, _voxAng),
        ---
        -- Cube enters.
        core_anim_new_keyframe_fire_once(29.65, function()
            _cubeEnabled = true
            _cubeRandRange1[1] = 5
            _cubeRandRange2[1] = 6
            _shadowCubeAmpX[1] = 0
            _shadowCubeAmpY[1] = 0
            _shadowCubeOffX[1] = 0
            _shadowCubeOffY[1] = 10
            _shadowCubeOffZ[1] = -2
            _shadowCubeScale[1] = 1.1
            _voxAng[1] = M_PI_4
            _voxHeight[1] = 500
            _voxHoriz[1] = 0
            _voxLightAmp[1] = 3
            _voxOrbitModeEnabled = true
            _voxScale[1] = 400
            _voxSpdX[1] = 30
            _voxSpdY[1] = 10
            _voxOrbitCamTargetPos = { 150, 123 }
        end),

        core_anim_new_keyframe_tween(30.8, 32.5, { 3 }, { 20 }, core_easing_cubic_in_out, _voxLightAmp),
        core_anim_new_keyframe_tween(32.5, 34, { 20 }, { 15 }, core_easing_cubic_in_out, _voxLightAmp),
        --
        core_anim_new_keyframe_tween(32, 35, { 500 }, { 300 }, core_easing_quadratic_in_out, _voxHeight),
        core_anim_new_keyframe_tween(30, 35, { 10 }, { 1 }, core_easing_quadratic_out, _shadowCubeOffY),
        core_anim_new_keyframe_tween(35, 37, { 1 }, { 2 }, core_easing_quadratic_in_out, _shadowCubeOffY),
        core_anim_new_keyframe_tween(32, 35, { 1.1 }, { 1.4 }, core_easing_quadratic_in_out, _shadowCubeScale),
        ---
        -- Cube enters 2.
        core_anim_new_keyframe_fire_once(33.92, function()
            _voxHeight[1] = 200
            _voxHoriz[1] = 50
            _voxOrbitCamTargetPos = { 30, 123 }
            _voxScale[1] = 250
            _voxShadePulseEnabled = true
        end),
        ---
        -- Cube in distance over lake.
        core_anim_new_keyframe_fire_once(38.18, function()
            _bdrVox1OffFunc = bdrVox1OffCube
            _cubeRandRange1[1] = 2
            _cubeRandRange2[1] = 2
            _shadowCubeAmpX[1] = 0
            _shadowCubeAmpY[1] = .5
            _shadowCubeOffX[1] = 2
            _shadowCubeOffY[1] = 9.5
            _shadowCubeOffZ[1] = -20
            _shadowCubeScale[1] = 1.1
            _voxAng[1] = M_PI_4
            _voxCam.pos.x = 489.6
            _voxCam.pos.y = 189.8
            _voxHeight[1] = 250
            _voxHoriz[1] = 30
            _voxLightAmp[1] = 3
            _voxOrbitModeEnabled = false
            _voxScale[1] = 200
            _voxShadePulseEnabled = false
            _voxSpdX[1] = 12
            _voxSpdY[1] = -12
        end),
        core_anim_new_keyframe_tween(39.31, 43.31, { 3 }, { 20 }, core_easing_cubic_in_out, _voxLightAmp),
        core_anim_new_keyframe_tween(45.81, 46.71, { 20 }, { 3 }, core_easing_cubic_in_out, _voxLightAmp),
        core_anim_new_keyframe_tween(38.18, 46.71, { 30 }, { -30 }, core_easing_lerp, _shadowCubeOffX),
        core_anim_new_keyframe_fire_once(41.31, function() _voxGradVbank1Src = _voxGradLakes1; end), -- Must not overlap with flash fade!
        core_anim_new_keyframe_tween(42.81, 44.31, { 1 }, { 0.2 }, core_easing_cubic_in_out, _voxGradVbank1Mix),
        core_anim_new_keyframe_tween(44.31, 45.81, { 0.2 }, { 1 }, core_easing_cubic_in_out, _voxGradVbank1Mix),
        ---
        -- Dive into lake.
        core_anim_new_keyframe_fire_once(46.71, function()
            _bdrVox1OffFunc = bdrVox0Waterfield
            _cubeRandRange1[1] = 5
            _cubeRandRange2[1] = 6
            _shadowCubeAmpX[1] = 2
            _shadowCubeAmpY[1] = 4
            _shadowCubeOffX[1] = 5
            _shadowCubeOffY[1] = -3
            _shadowCubeOffZ[1] = 0
            _shadowCubeScale[1] = 1.1
            _voxAng[1] = M_PI_4
            _voxCam.pos.x = -88.34
            _voxCam.pos.y = -141.34
            _voxHeight[1] = 300
            _voxHoriz[1] = 0
            _voxLightAmp[1] = 15
            _voxScale[1] = 300
            _voxShadePulseEnabled = false
            _voxSpdX[1] = 13.5
            _voxSpdY[1] = 13.5
            _shadowCubeSineOffset = -2.81
        end),

        core_anim_new_keyframe_tween(47.71, 49.71, { 5 }, { -1 }, core_easing_quadratic_in_out, _shadowCubeOffX),
        core_anim_new_keyframe_tween(53.52, 54.52, { -1 }, { 0 }, core_easing_quadratic_in_out, _shadowCubeOffX),
        core_anim_new_keyframe_tween(49.21, 51.41, { -3 }, { 2 }, core_easing_quadratic_in_out, _shadowCubeOffY),
        core_anim_new_keyframe_tween(54.22, 55.22, { 2 }, { 0 }, core_easing_quadratic_in_out, _shadowCubeOffY),
        core_anim_new_keyframe_tween(53.52, 55.22, { 2 }, { 0 }, core_easing_quadratic_in_out, _shadowCubeAmpX),
        core_anim_new_keyframe_tween(53.52, 55.22, { 4 }, { 0 }, core_easing_quadratic_in_out, _shadowCubeAmpY),
        core_anim_new_keyframe_tween(52.52, 55.22, { 1.1 }, { .6 }, core_easing_quadratic_in_out, _shadowCubeScale),
        --
        core_anim_new_keyframe_tween(53.52, 55.22, { 5 }, { 2 }, core_easing_lerp, _cubeRandRange1),
        core_anim_new_keyframe_tween(53.52, 55.22, { 6 }, { 2 }, core_easing_lerp, _cubeRandRange2),
        core_anim_new_keyframe_fire_once(52.52, function() _voxGradVbank1Src = _waterGradBG; end),
        core_anim_new_keyframe_tween(53.52, 54.02, { 0 }, { -60 }, core_easing_quadratic_in, _waterfieldBGSpeed),
        core_anim_new_keyframe_tween(52.52, 54.52, { 1 }, { 0 }, core_easing_lerp, _voxGradVbank1Mix),
        --
        core_anim_new_keyframe_tween(46.71, 53.52, { 0 }, { M_PI_4 }, core_easing_back_out, _voxAng),
        core_anim_new_keyframe_tween(54.72, 55.22, { 300 }, { 60 }, core_easing_quadratic_in, _voxHeight),
        core_anim_new_keyframe_tween(52.52, 55.22, { 0 }, { -150 }, core_easing_back_in, _voxHoriz),
    },
    voxSceneStarted,
    voxSceneCompleted
))

_voxFlashes = {
    { startTime = 21.11, endTime = 22.11 },
    { startTime = 25.38, endTime = 26.38 },
    { startTime = 29.65, endTime = 30.65 },
    { startTime = 33.92, endTime = 34.92 },
    { startTime = 38.18, endTime = 39.18 },
    { startTime = 46.71, endTime = 47.71 }, -- Must not overlap with palette change in anim.
}

-------------------------------------------------------------------------------
--- WATERFIELD ANIM

function startedWaterfieldScene()
    core_pal_apply(_waterPal)

    _cubeEnabled = true
    _shadowCubeColors = { 7, 6, 5 }
    _shadowCubeOffX[1] = 0
    _shadowCubeOffY[1] = 0
    _shadowCubeOffZ[1] = 0
    _shadowCubeScale[1] = .5
    _cubeRandRange1[1] = 5
    _cubeRandRange2[1] = 6
    _shadowCubeAmpX[1] = 0
    _shadowCubeAmpY[1] = 0
end

_waterBGParticlesSpawnEnabled = true
_waterGradVbank0Mix = { 1 }
_waterGradMixEnabled = true
_waterParticlesSpd = { 12 }
_waterTextPosSpd = 0
_waterCubeBubblesPosVarX = { 10 }
_waterCubeColors = {
    { 0, 0, 0 },
    { 0, 0, 0 },
    { 0, 0, 0 },
}
_underwaterPurpleMix = { 0 }

core_anim_add_anim(AnimNames.WATERFIELD, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(0, 1.5, { 8 }, { 20 }, core_easing_lerp, _waterCubeBubblesPosVarX),
        core_anim_new_keyframe_tween(0, 2.2, { 21.6, 113.4, 172.8 }, { 16.5, 29, 89 }, core_easing_lerp,
            _waterCubeColors[1]),
        core_anim_new_keyframe_tween(0, 2.2, { 21.6, 113.4, 172.8 }, { 141, 74, 155 }, core_easing_lerp,
            _waterCubeColors[2]),
        core_anim_new_keyframe_tween(0, 2.2, { 21.6, 113.4, 172.8 }, { 196, 224, 226 }, core_easing_lerp,
            _waterCubeColors[3]),

        core_anim_new_keyframe_tween(2.5, 4.2, { 16.5, 29, 89 }, { 196, 224, 226 }, core_easing_lerp, _waterCubeColors
            [1]),
        core_anim_new_keyframe_tween(2.5, 4.2, { 141, 74, 155 }, { 196, 224, 226 }, core_easing_lerp, _waterCubeColors
            [2]),

        core_anim_new_keyframe_tween(0, 2, { 2 }, { 5 }, core_easing_lerp, _cubeRandRange1),
        core_anim_new_keyframe_tween(0, 2, { 2 }, { 6 }, core_easing_lerp, _cubeRandRange2),

        core_anim_new_keyframe_tween(0, 2, { 0 }, { -2 }, core_easing_quadratic_out, _shadowCubeOffY),
        core_anim_new_keyframe_tween(2, 4, { -2 }, { 2.2 }, core_easing_quadratic_in_out, _shadowCubeOffY),
        core_anim_new_keyframe_tween(4, 8, { 2.2 }, { -8 }, core_easing_quadratic_in, _shadowCubeOffY),
        core_anim_new_keyframe_tween(2, 5, { 0 }, { 2 }, core_easing_lerp, _shadowCubeAmpX),
        core_anim_new_keyframe_tween(0, 2, { .5 }, { 1.1 }, core_easing_lerp, _shadowCubeScale),
        core_anim_new_keyframe_tween(2.5, 4.5, { 5 }, { 0 }, core_easing_lerp, _cubeRandRange1),
        core_anim_new_keyframe_tween(2.5, 4.5, { 6 }, { 0 }, core_easing_lerp, _cubeRandRange2),
        core_anim_new_keyframe_fire_once(3, function()
            _waterCubeBubblesEmitter.isParticleSpawnEnabled = false
            _waterCubeBubblesEmitter.isParticleRenderEnabled = false
        end),

        core_anim_new_keyframe_fire_once(8, function() _cubeEnabled = false end),

        core_anim_new_keyframe_fire_once(0, function() _waterBGPosY = 0 end),
        core_anim_new_keyframe_tween(0, 2.5, { -60 }, { -7.5 }, core_easing_quadratic_out, _waterfieldBGSpeed),
        core_anim_new_keyframe_tween(1, 2.7, { 12 }, { 2 }, core_easing_quadratic_out, _waterParticlesSpd),
        core_anim_new_keyframe_tween(6, 12, { 2 }, { 5 }, core_easing_quadratic_in, _waterParticlesSpd),
        core_anim_new_keyframe_fire_once(10, function()
            _waterTextPosSpd = -15 / 60 -- Move scroller by 15px/s.
        end),

        core_anim_new_keyframe_tween(0, 1.25, { .5 }, { 1 }, core_easing_cubic_in_out, _waterGradVbank0Mix),
        core_anim_new_keyframe_fire_once(1.25, function() _waterGradMixEnabled = false end),

        core_anim_new_keyframe_nop(63.73),

        core_anim_new_keyframe_tween(50, 60, { 0 }, { 1 }, core_easing_lerp, _underwaterPurpleMix),
    },
    startedWaterfieldScene,
    function() core_anim_start(_schedule.anims[AnimNames.UNDERWATER], _timer) end
))

-------------------------------------------------------------------------------
--- UNDERWATER ANIM

function underwaterSceneStarted()
    vbank(0)
    core_pal_apply(_waterPal)
    vbank(1)
    core_pal_apply(_imgSideRocksLeft.palette)

    _shadowCubeColors = { 13, 0, 0 }
    _shadowCubeOffX[1] = 0
    _shadowCubeOffY[1] = 1.3
    _shadowCubeOffZ[1] = 0
    _shadowCubeScale[1] = 1.1
    _cubeRandRange1[1] = 0
    _cubeRandRange2[1] = 0
    _shadowCubeAmpX[1] = 0
    _shadowCubeAmpY[1] = 0

    _waterParticlesSpd[1] = 5
    _coverLinesFactor[1] = 0
end

function underwaterSceneCompleted()
    -- Reset vbanks and start next anim.
    vbank(1)
    cls(0)
    vbank(0)
    cls(0)
    exit()
end

_underwaterBGPosY = { 136 }
_underwaterFGPosY = { 136 }
_underwaterSandPosY = { 136 }
_underwaterWaveyKelpPosY = { 136 }
_underwaterGradPosY = { 136 }
_underwaterLightMix = { 0 }
_underwaterEndMask = { 60 }
_underwaterLogoMaskPosY = { 0 } -- Note: Values "0" and "-120 are also used to enable/disable parts of the effect.
_underwaterEndLogoPosY = { 0 }
_underwaterEndLogoAmp = { 3 }
_underwaterLogoTopmost = false

_underwaterBGParticlesEnabled = true -- Enables/disables: BG water particles, end scroller, scroller BDR and cube flicker.

core_anim_add_anim(AnimNames.UNDERWATER, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_tween(0, 15, { 136 }, { 0 }, core_easing_quadratic_out, _underwaterGradPosY),
        core_anim_new_keyframe_tween(5, 15, { 136 }, { 0 }, core_easing_quadratic_out, _underwaterFGPosY),
        core_anim_new_keyframe_tween(8, 15, { 136 }, { 0 }, core_easing_quadratic_out, _underwaterSandPosY),
        core_anim_new_keyframe_tween(9.2, 15, { 136 }, { 0 }, core_easing_quadratic_out, _underwaterWaveyKelpPosY),
        core_anim_new_keyframe_tween(7.4, 15, { 136 }, { 0 }, core_easing_quadratic_out, _underwaterBGPosY),
        core_anim_new_keyframe_fire_once(2.5, function() _waterBGParticlesSpawnEnabled = false; end),
        core_anim_new_keyframe_fire_once(8.9, function()
            vbank(0)
            core_pal_apply(_imgSand.palette)
            _underwaterBGParticlesEnabled = false
        end),

        core_anim_new_keyframe_tween(7, 15, { 0 }, { 1 }, core_easing_lerp, _underwaterLightMix),
        core_anim_new_keyframe_fire_once(18, function()
            resetEmitter(_underwaterCubeEmitter)
            _underwaterCubeEmitter.isParticleSpawnEnabled = true
            _underwaterCubeEmitter.isParticleRenderEnabled = true
        end),

        core_anim_new_keyframe_fire_once(7, function()
            resetEmitter(_underwaterEmitter)
            _underwaterEmitter.isParticleSpawnEnabled = true
            _underwaterEmitter.isParticleRenderEnabled = true
        end),

        core_anim_new_keyframe_tween(18.75, 21, { 0 }, { -120 }, core_easing_lerp, _underwaterLogoMaskPosY),
        core_anim_new_keyframe_tween(18.75, 21, { 0 }, { 3 }, core_easing_lerp, _underwaterEndLogoAmp),
        --
        core_anim_new_keyframe_fire_once(33, function() _underwaterLogoTopmost = true; end),
        core_anim_new_keyframe_tween(34, 36, { 3 }, { 0 }, core_easing_lerp, _underwaterEndLogoAmp),
        core_anim_new_keyframe_tween(35, 38, { 0 }, { 1 }, core_easing_lerp, _coverLinesFactor),
        core_anim_new_keyframe_tween(36, 39, { 0 }, { 30 }, core_easing_quadratic_in_out, _underwaterEndLogoPosY),
        core_anim_new_keyframe_nop(43),
    },
    underwaterSceneStarted,
    underwaterSceneCompleted
))

-------------------------------------------------------------------------------
--- HIDDEN ANIM

_hiddenCoverProgress = { 0 }

function hiddenSceneStarted()
    core_pal_apply_color(0, 0, 0, 0)        -- 0: BG.

    core_pal_apply_color(12, 28, 27, 31)    -- 12: Scroll font BG color.
    core_pal_apply_color(13, 179, 185, 209) -- 13: Scroll font highlight.
    core_pal_apply_color(14, 0, 0, 0)       -- 14: Scroll font cut pixels.
    core_pal_apply_color(15, 139, 147, 175) -- 15: Scroll font color.


    -- Set font highlights in sprite sheet.
    for i = 65, 90 do
        if i ~= 74 and i ~= 84 and i ~= 90 and i ~= 72 and i ~= 82 and i ~= 68 then -- J, T, Z, H, R, D
            core_sprite_pix(256 + i, 0, 0, 14)

            if i ~= 73 and i ~= 70 then -- I, F
                core_sprite_pix(256 + i, 6, 0, 14)
            end

            core_sprite_pix(256 + i, 0, 1, 13)
            core_sprite_pix(256 + i, 1, 0, 13)
        end
    end

    core_sprite_pix(256 + 66, 5, 0, 14) -- B
    core_sprite_pix(256 + 33, 0, 0, 14) -- !
    core_sprite_pix(256 + 74, 0, 2, 14) -- J
    core_sprite_pix(256 + 68, 6, 4, 14) -- D

    core_sprite_pix(256 + 37, 1, 1, 13) -- %
    core_sprite_pix(256 + 37, 2, 0, 13) -- %
    core_sprite_pix(256 + 39, 0, 0, 13) -- '
    core_sprite_pix(256 + 44, 0, 4, 13) -- ,
    core_sprite_pix(256 + 46, 0, 4, 13) -- .
    core_sprite_pix(256 + 68, 0, 0, 13) -- D

    -- Modify R.
    core_sprite_pix(256 + 82, 6, 1, 15)
    core_sprite_pix(256 + 82, 6, 3, 0)
    core_sprite_pix(256 + 82, 4, 3, 15)
    core_sprite_pix(256 + 82, 4, 1, 0)
    core_sprite_pix(256 + 82, 0, 0, 13) -- Highlight.
end

core_anim_add_anim(AnimNames.HIDDEN, _schedule, core_anim_new(false,
    {
        core_anim_new_keyframe_nop(604800),
        core_anim_new_keyframe_tween(1, 4, { 0 }, { 1 }, core_easing_lerp, _hiddenCoverProgress),
    },
    hiddenSceneStarted,
    function() exit() end
))

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
--- INIT
-------------------------------------------------------------------------------

function initFont()
    _imgFont = core_pcx_decode(RES_PCX_FONT)
    core_sprite_transfer_sheet(_imgFont, 1)
end

--- SCREEN_FADER INIT

function initScreenFaderScene()
    _palTic = core_pal_grab()
    _screenTic = core_image_from_canvas(0, 0, 240, 136)
end

--- PRESENTS INIT

function initPresentsScene()
end

--- TITLE INIT

function initTitleScene()
    _imgPrelude = core_pcx_decode(RES_PCX_PRELUDE)
    _imgNeobyte = core_pcx_decode(RES_PCX_NEOBYTE)

    _palTitleHighlightOnly = core_util_deep_copy(_imgNeobyte.palette)
    -- Set all palette colors to black but index 12 (1-based).
    -- Index 12 is used to highlight portions of the logo in the `highlightLine` function.
    for i = 1, 16 do
        if i ~= 12 then
            core_pal_set_color(_palTitleHighlightOnly, i, 0, 0, 0)
        end
    end
end

--- BLOB INIT

function createCirclePoints(cnt, r, hasCenter)
    local points = {}
    for i = 1, cnt do
        local angle = (M_TAU / cnt) * (i - 1)
        points[i] = { 0, r * sin(angle), r * cos(angle) }
    end

    if hasCenter then
        table_insert(points, { 0, 0, 0 })
    end

    return points
end

function createIcosahedron(s, hasCenter)
    local points = {}
    -- See: https://math.stackexchange.com/a/2174667
    local phi = (1 + math.sqrt(5)) / 2
    table_insert(points, { -s, phi * s, 0 })
    table_insert(points, { s, phi * s, 0 })
    table_insert(points, { -s, -phi * s, 0 })
    table_insert(points, { s, -phi * s, 0 })

    table_insert(points, { 0, -s, phi * s })
    table_insert(points, { 0, s, phi * s })
    table_insert(points, { 0, -s, -phi * s })
    table_insert(points, { 0, s, -phi * s })

    table_insert(points, { phi * s, 0, -s })
    table_insert(points, { phi * s, 0, s })
    table_insert(points, { -phi * s, 0, -s })
    table_insert(points, { -phi * s, 0, s })

    if hasCenter then
        table_insert(points, { 0, 0, 0 })
    end

    return points
end

function createCubePoints(s, hasCenter)
    points = {
        { -s, s,  -s },
        { -s, -s, -s },
        { s,  -s, -s },
        { s,  s,  -s },
        { -s, s,  s },
        { -s, -s, s },
        { s,  -s, s },
        { s,  s,  s },
    }

    if hasCenter then
        table_insert(points, { 0, 0, 0 })
    end

    return points
end

function initBlobsScene()
    table_insert(_blobShapes, createIcosahedron(1.6, false))   --1
    table_insert(_blobShapes, createIcosahedron(2, true))      --2
    table_insert(_blobShapes, createCubePoints(2, false))      --3
    table_insert(_blobShapes, createCirclePoints(12, 3))       --4
    table_insert(_blobShapes, createCubePoints(2, true))       --5
    table_insert(_blobShapes, createCirclePoints(16, 3, true)) --6
    table_insert(_blobShapes, createCirclePoints(5, 3))        --7
    table_insert(_blobShapes, createCirclePoints(3, 3, true))  --8
    table_insert(_blobShapes, createCirclePoints(3, 3))        --9
    table_insert(_blobShapes, createCirclePoints(4, 3))        --10

    _blobList = { 9, 10, 3, 1, 2, 4, 5, 3, 2, 6, 7, 8, 6, 1, 8, 4, 7, 4 }

    -- Create sprites on canvas and grab the pixels.
    for i = 1, 10 do
        local r = 8 + i * 2
        cls(0)
        circ(r, r, r, 4)
        circ(r, r, r - 2, 3)
        circ(r, r, r - 4, 2)
        circ(r, r, r - 6, 1)
        _imgBlobSprites[i] = core_image_from_canvas(0, 0, r * 2 + 1, r * 2 + 1)
    end
end

--- CREDITS INIT

function initCreditsScene()
end

--- TRANSIT2LISSA INIT

function initTransit2LissaScene()
    insertShuffled(_coverLines, 0, 135, 1338)

    local globalDelay = 2
    local elementDelay = .1
    local dur = 1.2
    for i = 1, 4 do
        table_insert(_schedule.anims[AnimNames.TRANSIT2LISSA].keyframes,
            core_anim_new_keyframe_tween(
                globalDelay + (i) * elementDelay,
                globalDelay + (i) * elementDelay + dur,
                { 1 }, { #_lissaLogoFadeIndexes1 },
                core_easing_lerp,
                _lissaLogoChars[i].colIdx)
        )
    end

    globalDelay = globalDelay + 4 * elementDelay
    for i = #_lissaLogoChars, 5, -1 do
        table_insert(_schedule.anims[AnimNames.TRANSIT2LISSA].keyframes,
            core_anim_new_keyframe_tween(
                globalDelay + (5 - i) * elementDelay,
                globalDelay + (5 - i) * elementDelay + dur,
                { 1 }, { #_lissaLogoFadeIndexes2 },
                core_easing_lerp,
                _lissaLogoChars[i].colIdx)
        )
    end
end

--- LISSA INIT

--- @param cnt: Number of points.
--- @param ax, ay, az: Amplitudes.
--- @param fx, fy, fz: Frequencies.
--- @param px, py, pz: Phase shifts (optional).
--- Example 2D: createLissajousPoints(100, 5, 5, 0, 3, 2, 0, 0, math.pi/2)
--- Example 3D: createLissajousPoints(100, 5, 5, 5, 3, 2, 4, 0, math.pi/2, math.pi/4)
function createLissajousPoints(cnt, ax, ay, az, fx, fy, fz, px, py, pz)
    local points = {}
    for i = 1, cnt do
        local mx = 1 + 1 * sin((i + 0) * .05)
        local my = 1 + 1 * sin(1 + (i + 0) * .05)
        local mz = 1 + 1 * sin(2 + (i + 0) * .05)
        local t = (i - 1) / (cnt - 1) * 30
        local x = mx * ax * sin(fx * t + (px or 0))
        local y = my * ay * sin(fy * t + (py or 0))
        local z = mz * az * sin(fz * t + (pz or 0))
        points[i] = { x, y, z }
    end
    return points
end

function initLinePoints()
    for i = 1, _numLissaLines do
        _lissaLinePoints[i] = { 0, 0, -(i - 1) * _lissaLineDist }
    end
end

function initLissajousScene()
    _imgLissaBG = core_pcx_decode(RES_PCX_LISSA_BG)
    _lissaPoints = createLissajousPoints(10000, 5, 5, 5, sqrt(2), sqrt(5), sqrt(2), M_PI_2 * .5, M_PI_2 * 2, M_PI_2 * 1.5)
    initLinePoints()
end

--- TRANSIT2SHADOW INIT

function initTransit2ShadowScene()
    -- Nothing.
end

--- SHADOW INIT

function precalcLightmap(lightMap, lightMapSize)
    for y = 0, lightMapSize - 1 do
        for x = 0, lightMapSize - 1 do
            local d = math.sqrt(
                (lightMapSize / 2 - x) * (lightMapSize / 2 - x) +
                (lightMapSize / 2 - y) * (lightMapSize / 2 - y)) / (lightMapSize / 2)

            local color = 255 - 255 * d
            color = color < 0 and 0 or color
            lightMap[x + y * lightMapSize] = color // 1
        end
    end
end

function initRays(rays, segments)
    for i = 1, #segments * 3 do
        rays[i] = {
            a = {},
            b = {}
        }
    end
end

function initUniqueRays(uniqueRays, rays)
    for i = 1, #rays do
        uniqueRays[i] = {}
    end
end

function polysToSegments(polys, segments)
    local i = 1
    for p = 1, #polys do
        if _shadowCastEnabled[p] then
            local poly = polys[p]
            for q = 1, #poly do
                local j1 = q % #poly + 1
                segments[i] = {
                    a = { x = poly[q][X], y = poly[q][Y] },
                    b = { x = poly[j1][X], y = poly[j1][Y] }
                }
                i = i + 1
            end
        end
    end
end

function initShadowScene()
    _imgBricks = core_pcx_decode(RES_PCX_BRICKS)
    _polys = core_util_deep_copy(_polysTemplate)
    polysToSegments(_polys, _segments)
    initRays(_rays, _segments)
    initUniqueRays(_uniqueRays, _rays)
    precalcLightmap(_lightMap, _lightMapSize)
end

--- HAVE2RUN INIT

function initHave2RunScene()
    local delaySwipeIn = 12.3
    for i = 1, #_runnerFloorLines do
        table_insert(_schedule.anims[AnimNames.HAVE2RUN].keyframes,
            core_anim_new_keyframe_tween(
                _runnerFloorLines[i].ts + delaySwipeIn, _runnerFloorLines[i].te + delaySwipeIn + .2,
                { -244 }, { 0 },
                core_easing_quadratic_out,
                _runnerFloorLines[i].x)
        )
    end
end

--- RUNNER INIT

function initRunnerBulk()
    math.randomseed(1)

    for i = 1, 4 do
        _runnerBulk[i] = {
            sprIdx = core_math_randf(1, 9) // 1,
            speed = core_math_randf(70, 90) // 1,
            x = i * -30 + core_math_randf(-200, -60) // 1,
            y = (60 - 5 + i * 1.5) // 1,
        }
    end
end

function initRunnerScene()
    _imgSkylineFront = core_pcx_decode(RES_PCX_SKYLINE_FRONT)
    _imgSkylineBack = core_pcx_decode(RES_PCX_SKYLINE_BACK)
    _imgSkylineTrees = core_pcx_decode(RES_PCX_SKYLINE_TREES)
    _imgRunnerSheet = core_pcx_decode(RES_PCX_RUNNER_SHEET)
    _imgDoggySheet = core_pcx_decode(RES_PCX_DOGGY)
    _imgHeli = core_pcx_decode(RES_PCX_HELI)

    _imgSkylineBackShort = core_image_crop(_imgSkylineBack, 0, 15, _imgSkylineBack.width, 29)

    for i = 0, 3 do
        _imgDoggySprites[i + 1] = core_image_crop(_imgDoggySheet, i * 38, 0, 38, 29)
    end

    core_sprite_transfer_sheet(_imgRunnerSheet, 0)
    _runnerSprites[1] = core_sprite_def(0, 0, 0, 5, 6, 0, 38, 44)
    _runnerSprites[1].offX = 0
    _runnerSprites[2] = core_sprite_def(0, 5, 0, 6, 6, 0, 41, 44)
    _runnerSprites[2].offX = 0
    _runnerSprites[3] = core_sprite_def(0, 11, 0, 5, 6, 0, 37, 46)
    _runnerSprites[3].offX = 3
    _runnerSprites[4] = core_sprite_def(0, 0, 6, 4, 6, 0, 31, 47)
    _runnerSprites[4].offX = 5
    _runnerSprites[5] = core_sprite_def(0, 9, 13, 7, 3, 0, 24, 49) -- rot
    _runnerSprites[5].offX = 8
    _runnerSprites[5].rot = 3                                      -- Rotate 270 degrees CW.
    _runnerSprites[6] = core_sprite_def(0, 9, 6, 3, 7, 0, 24, 50)
    _runnerSprites[6].offX = 12
    _runnerSprites[7] = core_sprite_def(0, 12, 6, 4, 7, 0, 31, 50)
    _runnerSprites[7].offX = 7
    _runnerSprites[8] = core_sprite_def(0, 0, 12, 7, 4, 0, 32, 49) -- rot
    _runnerSprites[8].offX = 4
    _runnerSprites[8].rot = 3                                      -- Rotate 270 degrees CW.

    initRunnerBulk()

    -- Actually only 17 are used...
    for i = 1, 136 do
        table_insert(_runnerSwipesX, { CORE_WIDTH })
    end

    math.randomseed(13)
    for i = 1, #_runnerSwipesX do
        local st = 1 + core_math_randf(0, 2)
        local dur = st + core_math_randf(3, 4)
        table_insert(_schedule.anims[AnimNames.RUNNER].keyframes,
            core_anim_new_keyframe_tween(st, dur, { CORE_WIDTH }, { -20 },
                core_easing_cubic_out,
                _runnerSwipesX[i])
        )
    end

    local delaySwipeOut = 47 + 2.5 - 7
    for i = 1, #_runnerFloorLines do
        table_insert(_schedule.anims[AnimNames.RUNNER].keyframes,
            core_anim_new_keyframe_tween(
                _runnerFloorLines[i].ts + delaySwipeOut, _runnerFloorLines[i].te + delaySwipeOut,
                { 0 }, { 244 },
                core_easing_quadratic_out,
                _runnerFloorLines[i].x)
        )
    end
end

--- TRANSIT2VOX INIT

function initTransit2VoxTextsAnims()
    local globalDelay = 3.4
    for i = 1, #_voxTxts do
        local elementDelay = i * .1
        table_insert(_schedule.anims[AnimNames.TRANSIT2VOX].keyframes,
            core_anim_new_keyframe_tween(globalDelay + elementDelay, globalDelay + elementDelay + 1.7,
                { 1 }, { #_voxTextFadeColors },
                core_easing_lerp,
                _voxTxts[i].col)
        )
    end
end

function insertShuffled(table, min, max, seed)
    for i = min, max do
        table_insert(table, i)
    end
    math.randomseed(seed)
    core_util_shuffle(table)
end

function initTransit2VoxScene()
    _imgSpectrox = core_pcx_decode(RES_PCX_SPECTROX)
    initTransit2VoxTextsAnims()
    insertShuffled(_voxLinesSpectrox, 1, _imgSpectrox.height, 12345)
end

--- VOX INIT

function addFlashKeyframes()
    local keys = _schedule.anims[AnimNames.VOX].keyframes
    for i = 1, #_voxFlashes do
        local s = _voxFlashes[i].startTime
        local e = _voxFlashes[i].endTime
        table_insert(keys, core_anim_new_keyframe_fire_once(s, function() _voxGradVbank0Src = _voxGradBlack; end))
        table_insert(keys, core_anim_new_keyframe_tween(s, e, { 0 }, { 1 }, core_easing_lerp, _voxGradVbank0Mix))

        table_insert(keys, core_anim_new_keyframe_fire_once(s, function() _voxGradVbank1Src = _voxGradBlack; end))
        table_insert(keys, core_anim_new_keyframe_tween(s, e, { 0 }, { 1 }, core_easing_lerp, _voxGradVbank1Mix))
        table_insert(keys, core_anim_new_keyframe_tween(s, e, { 1 }, { 0 }, core_easing_lerp, _voxFlashFactor))
    end
end

--- Resize heightmap's grayscale values.
--- See: https://rosettacode.org/wiki/Bilinear_interpolation
---@return table Contains resized heightmap. Not integers, but can contain decimals.
function bilinearResize(src, srcW, srcH, dstW, dstH)
    local dst = {}
    local xr = (srcW - 1) / (dstW - 1)
    local yr = (srcH - 1) / (dstH - 1)

    local val = function(xx, yy)
        return src[min(yy, srcH - 1) * srcW + min(xx, srcW - 1) + 1]
    end

    for j = 0, dstH - 1 do
        local y = yr * j
        local yi = y // 1
        local yf = y - yi

        for i = 0, dstW - 1 do
            local x = xr * i
            local xi = x // 1
            local xf = x - xi

            local v00 = val(xi, yi)
            local v10 = val(xi + 1, yi)
            local v01 = val(xi, yi + 1)
            local v11 = val(xi + 1, yi + 1)

            local top = core_math_lerp(v00, v10, xf)
            local bottom = core_math_lerp(v01, v11, xf)
            local result = core_math_lerp(top, bottom, yf)

            dst[j * dstW + i + 1] = result
        end
    end

    return dst
end

function initVoxScene()
    _imgTime = core_pcx_decode(RES_PCX_TIME)

    insertShuffled(_voxLinesTime, 1, _imgTime.height + 10, 12345)

    _voxMapW = 256
    _voxMapH = 256
    _voxMap = bilinearResize(RES_HMAP, RES_HMAP_WIDTH, RES_HMAP_HEIGHT, _voxMapW, _voxMapH)
    core_grad_mix(_voxGradLakes1, _voxGradLakes2, _voxGradVbank1, 1)
    addFlashKeyframes()
end

--- WATERFIELD INIT

function initWaterfieldScene()
    math.randomseed(12345)

    for i = 1, 200 do
        _waterParticles[i] = {
            core_math_randf(-_waterParticlesDim, _waterParticlesDim) * 1.25,
            core_math_randf(-_waterParticlesDim, _waterParticlesDim) - 19,
            core_math_randf(-_waterParticlesDim, _waterParticlesDim) }
    end

    -- Extend water BG gradient.
    local extendLinesCnt = 1000
    for i = 1, extendLinesCnt * 3 do
        table_insert(_waterGradBG, 0)
    end

    _waterGradVbank0 = core_grad_new(#_waterGradBG)
    _waterGradSplash = core_grad_new(#_waterGradBG)
    core_grad_clear(_waterGradSplash, 40, 92, 196)

    for i = 1, #_waterGradSplash, 6 do
        _waterGradSplash[i] = 36
        _waterGradSplash[i + 1] = 159
        _waterGradSplash[i + 2] = 222
    end

    _waterCubeBubblesEmitter = newEmitter(800,
        { x = 120, y = 0 },
        3, .001,
        { x = 8, y = 10 },
        { min = 80, max = 100 },
        { min = 5, max = 10 },
        { min = 4, max = 8 }
    )
end

--- UNDERWATER INIT

function initUnderwaterScene()
    _underwaterEmitter = newEmitter(30,
        { x = 215, y = 70 },
        3, .08,
        { x = 4, y = 10 },
        { min = 20, max = 30 },
        { min = 3, max = 3 },
        { min = 2, max = 4 }
    )
    _underwaterEmitter.isParticleSpawnEnabled = false
    _underwaterEmitter.isParticleRenderEnabled = false

    _underwaterCubeEmitter = newEmitter(100,
        { x = 100, y = 80 },
        8, .005,
        { x = 20, y = 10 },
        { min = 30, max = 50 },
        { min = 2, max = 5 },
        { min = 4, max = 8 }
    )
    _underwaterCubeEmitter.isParticleSpawnEnabled = false
    _underwaterCubeEmitter.isParticleRenderEnabled = false


    -- Extend underwater BG gradient.
    local extendLinesCnt = 1000
    for i = 1, extendLinesCnt * 3 do
        table_insert(_gradUnderwater, 0)
        table_insert(_gradUnderwaterBrightBase, 0)
    end

    _imgSand = core_pcx_decode(RES_PCX_SAND)
    _imgSandFG = core_pcx_decode(RES_PCX_SAND_FG)
    _imgKelpBG = core_pcx_decode(RES_PCX_KELP_BG)
    _imgKelp1 = core_pcx_decode(RES_PCX_KELP1)
    _imgKelp2 = core_pcx_decode(RES_PCX_KELP2)
    _imgKelp3 = core_pcx_decode(RES_PCX_KELP3)
    _imgKelpFGLeft1 = core_pcx_decode(RES_PCX_KELP_FG_LEFT_1)
    _imgKelpFGLeft2 = core_pcx_decode(RES_PCX_KELP_FG_LEFT_2)
    _imgKelpFGLeft3 = core_pcx_decode(RES_PCX_KELP_FG_LEFT_3)
    _imgKelpFGLeft4 = core_pcx_decode(RES_PCX_KELP_FG_LEFT_4)
    _imgKelpFGRight1 = core_pcx_decode(RES_PCX_KELP_FG_RIGHT_1)
    _imgKelpFGRight2 = core_pcx_decode(RES_PCX_KELP_FG_RIGHT_2)
    _imgKelpFGRight3 = core_pcx_decode(RES_PCX_KELP_FG_RIGHT_3)
    _imgKelpFGRight4 = core_pcx_decode(RES_PCX_KELP_FG_RIGHT_4)
    _imgKelpFGRight5 = core_pcx_decode(RES_PCX_KELP_FG_RIGHT_5)
    _imgKelpFGRight6 = core_pcx_decode(RES_PCX_KELP_FG_RIGHT_6)
    _imgSideRocksLeft = core_pcx_decode(RES_PCX_SIDE_ROCKS_LEFT)
    _imgSideRocksRight = core_pcx_decode(RES_PCX_SIDE_ROCKS_RIGHT)
    _imgThe = core_pcx_decode(RES_PCX_THE)
    _imgEnd = core_pcx_decode(RES_PCX_END)
end

--- HIDDEN INIT

function initHiddenScene()
end

-------------------------------------------------------------------------------
--- EXECUTE
-------------------------------------------------------------------------------

--- STARTUP_DELAY

function renderStartupDelayScene(t)
    cls(0)
    core_blit_render(_screenTic, 0, 0, 0)
end

--- SCREEN_FADER EXECUTE

function renderScreenFaderCovers(height, color)
    local h = height // 1
    rect(0, 0, 240, h, color)
    rect(0, 136 - h, 240, h + 1, color)
    if h <= 68 then
        line(0, h, 240, h, 14)
        line(0, 136 - h, 240, 136 - h, 14)
    end
end

function renderScreenFaderScene(t)
    vbank(0)
    cls(0)

    local palFactor = _faderPalFactor[1]

    core_pal_apply_color(0,
        core_math_lerp(_palTic[1], 0, palFactor),
        core_math_lerp(_palTic[2], 0, palFactor),
        core_math_lerp(_palTic[3], 0, palFactor)
    )

    core_blit_render(_screenTic, 0, 0, 0)

    vbank(1)
    cls(0)

    core_pal_apply_color(15,
        core_math_lerp(_palTic[1], 0, palFactor),
        core_math_lerp(_palTic[2], 0, palFactor),
        core_math_lerp(_palTic[3], 0, palFactor)
    )

    renderScreenFaderCovers(_coverHeight[1], 15)
end

--- PRESENTS EXECUTE

function renderPresentsHighlightLines()
    for i = 1, #_presentsHighlightLines do
        highlightLine(_presentsHighlightLines[i].y[1] // 1)
    end
end

function renderPresentsScene(t)
    vbank(0)
    cls(0)

    core_blit_render(_imgPrelude, 22, 41, 0)
    core_blit_render(_imgNeobyte, 10, 62, 0)
    renderPresentsHighlightLines()

    ---
    vbank(1)
    cls(0)
    clip(0, _presentsClipPosY[1] // 1, 240, 50)
    core_pal_swap(15, _presentsFadeIndexes[_presentsColorIdx[1] // 1])
    if _presents1Enabled then
        font("a t   d e a d l i n e   2 0 2 5", 120 - 180 // 2, 66, 0, 4, 8, false, 1)
    end

    if _presents2Enabled then
        font("s  *  p  *  e  *  c  *  t  *  r  *  o  *  x", 120 - 190 // 2, 66, 0, 4, 8, false, 1)
    end

    if _presents3Enabled then
        font("p r e s e n t s", 120 - 92 // 2, 66, 0, 4, 8, false, 1)
    end
    core_pal_swap(15, 15)
    clip()
end

--- TITLE EXECUTE

function renderTitleBorder()
    line(_blobBorderTopX[1], 0, _blobBorderTopX[1] + CORE_WIDTH_1, 0, 2)
    line(_blobBorderTopX[1], 1, _blobBorderTopX[1] + CORE_WIDTH_1, 1, 4)

    line(_blobBorderBottomX[1], 134, _blobBorderBottomX[1] + CORE_WIDTH_1, 134, 2)
    line(_blobBorderBottomX[1], 135, _blobBorderBottomX[1] + CORE_WIDTH_1, 135, 4)
end

function hightlightPix(x, y, minC1, maxC1, minC2, maxC2, add)
    local c = pix(x, y)
    local r1 = (c > minC1 and c <= maxC1)
    local r2 = (c > minC2 and c <= maxC2)

    if not (r1 or r2) then
        return
    end

    c = c + add
    local max = r1 and maxC1 or maxC2

    pix(x, y, c > max and max or c)
end

function highlightLine(y)
    if y < 40 or y > 93 then
        return
    end

    for x = 10, 229 do
        hightlightPix(x, y, 4, 11, 0, 4, 16)
        hightlightPix(x, y + 1, 4, 10, 0, 3, 2)
    end
end

function renderHighlightLines(t)
    for i = 1, _numTitleHighlightLines[1] do
        local y = (65 + 38 * sin(i * 41.35 + t.elapsed)) // 1
        highlightLine(y)
    end
end

function checkHidenPart()
    return key(19) -- "S", you cheater! XD
end

function startHiddenPart()
    vbank(1)
    cls(0)
    vbank(0)
    cls(0)
    core_sound_stop()
    _musicStarted = false
    _schedule.anims[AnimNames.TITLE].state = 2 -- COMPLETED.
    core_anim_start(_schedule.anims[AnimNames.HIDDEN], _timer)
end

function renderTitleScene(t)
    vbank(0)
    cls(0)
    if _titleGridEnabled then
        local xm, ym
        if _titleGridVerticalOnly then
            _titleGridY = _titleGridY + t.delta * 60
            xm = -10
            ym = _titleGridY
        else
            xm = cos(t.elapsed * 1) * 100
            ym = sin(t.elapsed * .6) * 130
        end

        renderChecker(xm, ym)
    end

    renderTitleBorder()

    if _titleFlashEnabled then
        core_pal_apply_white_fade(_palBlob, _titleFlashFactor[1])
    end

    vbank(1)
    cls(0)

    if _titlePalMixEnabled then
        core_pal_apply_mix(_imgNeobyte.palette, _palTitleHighlightOnly, _titlePalMaxFactor[1])
    end
    if _titleFlashEnabled then
        core_pal_apply_white_fade(_imgNeobyte.palette, _titleFlashFactor[1])
    end

    core_blit_render(_imgPrelude, (22 + _titlePosXAmp * sin(M_PI * t.elapsed)) // 1, 41, 0)
    core_blit_render(_imgNeobyte, (10 + _titlePosXAmp * sin(.375 + M_PI * t.elapsed)) // 1, 62, 0)

    renderHighlightLines(t)

    if _pressStartEnabled then
        if checkHidenPart() then
            startHiddenPart()
            return
        end
        if _syncKickSnare4 == 1 then
            _pressStartBlinkerEnabled = not _pressStartBlinkerEnabled
        end
        if _pressStartBlinkerEnabled then
            core_pal_swap(15, 8)
            font("press start", 120 - 84 * .5, 105, 0, 4, 8, false, 1)
            core_pal_swap(15, 15)
        end
    end
end

--- BLOB EXECUTE

function blitBlob(image, x, y, colorTransparent)
    for iy = 0, image.height_1 do
        local stride = iy * image.width + 1
        local ty = (iy + y) // 1
        for ix = 0, image.width_1 do
            local c = image.pixels[ix + stride]
            local tx = (ix + x) // 1
            if c ~= colorTransparent and (ty) & 1 == 0 then
                local tc = pix(tx, ty)

                -- Overwrite colors from inside to outside of the circle.
                if tc == 0 or tc == 5 or tc == 6 or tc == 7 or c == 1 then
                    -- If dest is BG color then overwrite with any src color.
                    -- Also if src color is 1 then overwrite any other color.
                    pix(tx, ty, c)
                elseif c == 2 and (tc == 3 or tc == 4) then
                    -- Src color 2 overwrites dest colors 3 and 4.
                    pix(tx, ty, 2)
                elseif c == 3 and tc == 4 then
                    -- Src color 3 overwrites dest color 4.
                    pix(tx, ty, 3)
                end
            end
        end
    end
end

function updateBlobs(t)
    local sc = core_mat4_scale(.65 + _blobSyncSnare * 1.25, .65 + _blobSyncSnare * 1.25, .65 + _blobSyncSnare * 1.25)

    local t2 = t.elapsed * .5

    local xoff = sin(t.elapsed) * .2
    local yoff = sin(1 + t.elapsed * 3) * .2
    local zoff = sin(2 + t.elapsed * 5) * .2

    local tr0 = core_mat4_translate(xoff, yoff, zoff)
    local rx = core_mat4_rot_x(2 + sin(t.elapsed * .05 + 1) * 6 + t2)
    local ry = core_mat4_rot_y(sin(5 + t.elapsed * .08) * 50 + sin(2 + t.elapsed * .04) * 20 + t2)
    local rz = core_mat4_rot_z(sin(3 + t.elapsed * .05) * 60 + t2)
    local tr = core_mat4_translate(-xoff, -yoff, -zoff - 10)

    core_mat4_set_identity(_modelMatBlobs)
    core_mat4_mul(_modelMatBlobs, tr0, _modelMatBlobs)
    core_mat4_mul(_modelMatBlobs, sc, _modelMatBlobs)
    core_mat4_mul(_modelMatBlobs, rx, _modelMatBlobs)
    core_mat4_mul(_modelMatBlobs, ry, _modelMatBlobs)
    core_mat4_mul(_modelMatBlobs, rz, _modelMatBlobs)
    core_mat4_mul(_modelMatBlobs, tr, _modelMatBlobs)
end

function renderBlobs()
    local points = _blobShapes[_blobList[_blobListIdx]]
    for i = 1, #points do
        local out = { 0, 0, 0 }
        core_mat4_mul_vec3(out, _modelMatBlobs, points[i])
        core_mat4_mul_vec3_perspective(out, _matProj, out)

        if out[Z] < 0 then
            local sprIdx = ((10 + out[Z] + 1) / 3 * #_imgBlobSprites) // 1
            if sprIdx < 1 then
                sprIdx = 1
            elseif sprIdx > #_imgBlobSprites then
                sprIdx = #_imgBlobSprites
            end

            local spr = _imgBlobSprites[sprIdx]
            blitBlob(spr, _blobPos[1] + out[X] - spr.width_half, _blobPos[2] + out[Y] - spr.width_half, 0)
        end
        ::continue::
    end
end

function renderChecker(xm, ym)
    for x = -24, 24 do
        local xx = xm + x * 20
        if xx >= 0 and xx < CORE_WIDTH then
            for y = 0, CORE_HEIGHT_1 do
                pix(xx, y, 5)
            end
        end
    end

    for y = -20, 13 do
        local yy = ym + y * 20
        if yy >= 0 and yy < CORE_HEIGHT then
            for x = 0, CORE_WIDTH_1 do
                if pix(x, yy) ~= 0 then
                    pix(x, yy, 6)
                else
                    pix(x, yy, 5)
                end
            end
        end
    end

    xm = xm * 1.5
    ym = ym * 1.5

    for x = -24, 24 do
        local xx = xm + x * 30
        if xx >= 0 and xx < CORE_WIDTH then
            for y = 0, CORE_HEIGHT_1 do
                if pix(xx, y) ~= 0 then
                    pix(xx, y, 7)
                else
                    pix(xx, y, 6)
                end
            end
        end
    end

    for y = -20, 13 do
        local yy = ym + y * 30
        if yy >= 0 and yy < CORE_HEIGHT then
            for x = 0, CORE_WIDTH_1 do
                if pix(x, yy) ~= 0 then
                    pix(x, yy, 7)
                else
                    pix(x, yy, 6)
                end
            end
        end
    end
end

function renderBlobBGCircles(t)
    local cr = 50 + 10 * sin(t.elapsed * 4)
    local xoff, yoff = 0, 0
    circ(xoff + _blobPos[1] + 120, yoff + _blobPos[2] + 68, cr, 0)
end

function renderBlobScene(t)
    cls(0)

    if _blobFlashEnabled then
        core_pal_apply_white_fade(_palBlob, _blobFlashFactor[1])
    else
        core_pal_apply_mix(_palBlob, _palBlobBright, _blobSyncSnare)
    end

    local xm = cos(t.elapsed * 1) * 100
    local ym = sin(t.elapsed * .6) * 130
    renderChecker(xm, ym)

    renderBlobBGCircles(t)

    if _blobEnabled then
        updateBlobs(t)
        renderBlobs()
    end

    renderTitleBorder()

    if _blobGridColorFadeEnabled then
        local cidx = _runTextFadeColors[_blobGridColorIdx[1] // 1] + 1
        local r = _palRunner[(cidx - 1) * 3 + 1]
        local g = _palRunner[(cidx - 1) * 3 + 2]
        local b = _palRunner[(cidx - 1) * 3 + 3]

        core_pal_apply_color(5, r, g, b)
        core_pal_apply_color(6, r, g, b)
        core_pal_apply_color(7, r, g, b)
    end
end

--- CREDITS EXECUTE

function renderCreditsScene(t)
    cls(0)

    if _creditsOlympianEnabled then
        core_pal_swap(15, _presentsFadeIndexes[_creditsOlympianFadeIndex[1] // 1])
        font("code gfx", 90 + _creditsCodePos[1], 56 + _creditsCodePos[2], 0, 4, 8, false, 1)
        font("olympian", 57 + _creditsOlympianPos[1], 43 + _creditsOlympianPos[2], 0, 4, 8, false, 2)
    end

    if _creditsVirgillEnabled then
        core_pal_swap(15, _presentsFadeIndexes[_creditsVirgillFadeIndex[1] // 1])
        font("music", 100 + _creditsMusicPos[1], 94 + _creditsMusicPos[2], 0, 4, 8, false, 1)
        font("virgill", 65 + _creditsVirgillPos[1], 81 + _creditsVirgillPos[2], 0, 4, 8, false, 2)
    end

    core_pal_swap(15, 15)
end

--- TRANSIT2LISSA EXECUTE

_lissaBGCol2 = { 12, 19, 31 }
_lissaBGCol7 = { 64, 51, 83 }

function updateLissaBGColors(t)
    if core_timer_current_frame() % 3 == 0 then
        local r = random(-_lissaBGFlickerStrength[1] // 1, 0)
        _lissaBGCol2 = { 12 + r, 19 + r, 31 + r }
        _lissaBGCol7 = { 64 + r, 51 + r, 83 + r }
    end

    core_pal_apply_color(2, _lissaBGCol2[1], _lissaBGCol2[2], _lissaBGCol2[3])
    core_pal_apply_color(7, _lissaBGCol7[1], _lissaBGCol7[2], _lissaBGCol7[3])
end

function renderCoverLines(col)
    local max = 136 * _coverLinesFactor[1]
    for i = 1, max do
        line(0, _coverLines[i], 240, _coverLines[i], col)
    end
end

function renderTransit2LissaFont(t)
    vbank(1)
    cls(0)

    local char
    local idxTable
    for i = 1, #_lissaLogoChars do
        idxTable = i <= 4 and _lissaLogoFadeIndexes1 or _lissaLogoFadeIndexes2
        char = _lissaLogoChars[i]
        core_pal_swap(15, idxTable[char.colIdx[1] // 1])
        font(char.v, char.x, 111)
    end
    core_pal_swap(15, 15)
end

function renderTransit2LissaScene(t)
    vbank(0)
    cls(0)

    updateLissaLines(t)
    renderLissaLines(t)
    core_blit_render(_imgLissaBG, 0, 0, 0)
    updateLissaBGColors(t)
    renderCoverLines(0)
    renderTransit2LissaFont(t)
end

--- LISSA EXECUTE

function updateLissaLines(t)
    for i = 1, #_lissaLinePoints do
        _lissaLinePoints[i][Z] = _lissaLinePoints[i][Z] + t.delta * 3
        if _lissaLinePoints[i][Z] > 0 then
            _lissaLinePoints[i][Z] = _lissaLinePoints[i][Z] - _lissaLinesTotalDist
        end
    end

    local tr = core_mat4_translate(0, -1, -1)
    core_mat4_set_identity(_modelMatLissaLines)
    core_mat4_mul(_modelMatLissaLines, tr, _modelMatLissaLines)
end

function renderLissaLines(t)
    line(0, 84, CORE_WIDTH_1, 84, 13) -- Top line.
    for i = 1, #_lissaLinePoints do
        local out = { 0, 0, 0 }
        core_mat4_mul_vec3(out, _modelMatLissaLines, _lissaLinePoints[i])
        core_mat4_mul_vec3_perspective(out, _matProj, out)

        if out[Z] < 0 then
            line(0, out[Y], CORE_WIDTH_1, out[Y], 13)
        end
    end
end

_lissaRotVelocity = 0
_lissaRotAng = 0
_lissaRotDamp = 1
_lissaRotImpulse = -4

_lissaSyncColor = 0

function updateLissa(t)
    _lissaRotVelocity = core_math_lerp(_lissaRotVelocity, 0, _timer.delta * _lissaRotDamp)
    _lissaRotAng = _lissaRotAng + t.delta * _lissaRotVelocity

    local rx = core_mat4_rot_x(2 + sin((t.elapsed - 2.) * .25 + 1) * 6)
    local ry = core_mat4_rot_y(-(t.elapsed - 1.) + _lissaRotAng)
    local tr = core_mat4_translate(0, 0, -40 + _lissaTranslateZ[1])

    core_mat4_set_identity(_modelMatLissa)
    core_mat4_mul(_modelMatLissa, rx, _modelMatLissa)
    core_mat4_mul(_modelMatLissa, ry, _modelMatLissa)
    core_mat4_mul(_modelMatLissa, tr, _modelMatLissa)
end

function renderLissa(t)
    local count = _lissaCount[1]
    if count <= 0 then
        return
    end

    local startIdx = (1 + (t.elapsed - 5.5) * _lissaSpeed[1]) // 1
    if startIdx < 0 then
        startIdx = 0
    end
    for i = startIdx, startIdx + count do
        local out = { 0, 0, 0 }
        core_mat4_mul_vec3(out, _modelMatLissa, _lissaPoints[i % (#_lissaPoints) + 1])
        core_mat4_mul_vec3_perspective(out, _matProj, out)

        if out[Z] < 0 then
            local c = pix(out[X], out[Y])
            if c == 0 then
                c = 5
            elseif c >= 5 and c < 11 then
                c = c + 1
            else
                c = 11
            end

            c = c + _lissaSyncColor * 4
            if c > 11 then
                c = 11
            end

            local ch = c + 1
            if ch > 11 then
                ch = 11
            end

            if i > startIdx + count - 100 then
                pix(out[X], out[Y], ch)
                pix(out[X] + 1, out[Y], ch)
            else
                pix(out[X], out[Y], c)
            end
        end
    end
end

function renderLissaSceneLogoText(col1, col2)
    core_pal_swap(15, col1)
    font("spec", 89, _lissaLogoLeftPosY[1], 0)
    core_pal_swap(15, col2)
    font("trox", 120, _lissaLogoRightPosY[1], 0)
    core_pal_swap(15, 15)
end

function renderLissaScene(t)
    vbank(0)
    cls(0)
    updateLissaLines(t)
    renderLissaLines(t)
    core_blit_render(_imgLissaBG, 0, 0, 0)
    updateLissaBGColors(t)

    ---
    vbank(1)
    cls(0)
    renderLissaSceneLogoText(4, 2)
    updateLissa(t)
    renderLissa(t)
end

--- TRANSIT2SHADOW EXECUTE

function renderLissaCoverRects()
    -- 12x8 tiles fit perfectly.
    -- Alternative: 15x9 tiles of 16x15px. Results in just 1 pixel row missing at bottom.
    local numW = 12
    local numH = 8
    local w = 20
    local h = 17
    local cnt = 1
    for j = 1, numH do
        for i = 1, numW, 2 do
            core_dither_rect((i - 1) * w, (j - 1) * h, w, h, 0, 2 * sin(-i * .05 + -j * .1 + _lissaCoverTilesProgress[1]),
                CoreDitherMatrixWildBayer8x8)
        end

        for i = 2, numW, 2 do
            core_dither_rect((i - 1) * w, (j - 1) * h, w, h, 0, 2 * sin(-i * .1 + -j * .05 + _lissaCoverTilesProgress[1]),
                CoreDitherMatrixWildBayer8x8)
        end
    end
end

function renderTransit2ShadowScene(t)
    vbank(0)
    cls(0)
    updateLissaLines(t)
    renderLissaLines(t)
    core_blit_render(_imgLissaBG, 0, 0, 0)
    renderLissaCoverRects()

    ---
    vbank(1)
    cls(0)
    renderLissaSceneLogoText(14, 9)
    updateCube(t)
    renderCube()
end

--- SHADOW EXECUTE
--- See: https://ncase.me/sight-and-light/
--- See: https://www.redblobgames.com/articles/visibility/

-- Function to find the intersection of an infinite ray and a finite segment.
function raySegmentIntersection(ray, seg)
    -- Compute direction vectors.
    local dSegX, dSegY = seg.b.x - seg.a.x, seg.b.y - seg.a.y     -- Segment direction.
    local dRayX, dRayY = ray.b[X] - ray.a[X], ray.b[Y] - ray.a[Y] -- Ray direction.

    -- Compute determinant (denominator).
    local denom = (dSegX * -dRayY) - (-dRayX * dSegY)

    if denom == 0 then
        return nil -- Parallel or collinear, no unique intersection.
    end
    local invDenom = 1 / denom

    -- Solve for t and u
    local a = (ray.a[X] - seg.a.x)
    local b = (ray.a[Y] - seg.a.y)
    local t = (a * -dRayY - -dRayX * b) * invDenom
    local u = (dSegX * b - a * dSegY) * invDenom

    -- Check if the intersection lies within the segment (0 <= t <= 1) and on the ray (u >= 0).
    if t < 0 or t > 1 or u < 0 then
        -- No valid intersection.
        return nil
    end

    -- Compute intersection point.
    local ix = seg.a.x + t * dSegX
    local iy = seg.a.y + t * dSegY
    return {
        point = { ix, iy },
        distance = u
    }
end

function getAngle(ray)
    local dRayX, dRayY = ray.b[X] - ray.a[X], ray.b[Y] - ray.a[Y] -- Ray direction.
    local angle = atan(dRayY, dRayX)
    return angle >= 0 and angle or angle + M_TAU
end

function compareAngles(a, b)
    return a.angle < b.angle
end

function updateRays(rays, segments)
    local segIdx = 1
    local epsilon = .00001
    local lightX = 120 + 20 * _shadowCubePos[1] // 1
    local lightY = 68 - 20 * _shadowCubePos[2] // 1
    -- For each segment start point, cast 3 rays.
    for i = 1, #rays, 3 do
        rays[i].a[X], rays[i].a[Y] = lightX, lightY
        rays[i].b[X], rays[i].b[Y] = segments[segIdx].a.x, segments[segIdx].a.y
        rays[i].angle = getAngle(rays[i])

        local i1 = i + 1
        rays[i1].a[X], rays[i1].a[Y] = rays[i].a[X], rays[i].a[Y]
        rays[i1].angle = rays[i].angle - epsilon
        rays[i1].b[X], rays[i1].b[Y] = rays[i].a[X] + cos(rays[i1].angle), rays[i].a[Y] + sin(rays[i1].angle)

        local i2 = i + 2
        rays[i2].a[X], rays[i2].a[Y] = rays[i].a[X], rays[i].a[Y]
        rays[i2].angle = rays[i].angle + epsilon
        rays[i2].b[X], rays[i2].b[Y] = rays[i].a[X] + cos(rays[i2].angle), rays[i].a[Y] + sin(rays[i2].angle)

        segIdx = segIdx + 1
    end

    table_sort(rays, compareAngles)
end

function closestIntersect(ray, segments)
    local found = nil
    for i = 1, #segments do
        local ip = raySegmentIntersection(ray, segments[i])
        if not ip then
            goto continue
        end
        if not found or ip.distance < found.distance then
            found = ip
        end
        ::continue::
    end
    return found
end

function updatIntersects(rays, segments)
    for i = 1, #rays do
        rays[i].intersect = closestIntersect(rays[i], segments)
    end
end

function approxEq(p1, p2)
    if p1 == nil or p2 == nil then
        return false
    end
    return abs(p1[X] - p2[X]) < _epsilon and abs(p1[Y] - p2[Y]) < _epsilon
end

function eqIntersect(i1, i2)
    if i1 == nil or i2 == nil then
        return false
    end
    return approxEq(i1.point, i2.point)
end

function updateUniqueRays(uniqueRays, rays)
    uniqueRays[1] = rays[1]
    local count = 1

    for i = 2, #rays do
        if not eqIntersect(rays[i].intersect, rays[i - 1].intersect) then
            count = count + 1
            uniqueRays[count] = rays[i]
        end
    end
    return count
end

function renderTris(rays, count)
    clip(_shadowClips[_shadowClipsIdx].xs,
        _shadowClips[_shadowClipsIdx].ys,
        _shadowClips[_shadowClipsIdx].xe - _shadowClips[_shadowClipsIdx].xs + 1,
        _shadowClips[_shadowClipsIdx].ye - _shadowClips[_shadowClipsIdx].ys + 1
    )
    local color = 15
    for i = 1, count do
        local i1 = 1 + i % count
        if rays[i].intersect and rays[i1].intersect then
            tri(rays[i].a[X], rays[i].a[Y],
                rays[i].intersect.point[X], rays[i].intersect.point[Y],
                rays[i1].intersect.point[X] + .5, rays[i1].intersect.point[Y],
                color)
            tri(rays[i].a[X], rays[i].a[Y],
                rays[i1].intersect.point[X], rays[i1].intersect.point[Y],
                rays[i].intersect.point[X] + .5, rays[i].intersect.point[Y],
                color)
        end
    end
    clip()
end

function renderLightMap(lightMap, lightMapSize, centerX, centerY, t)
    local mx, my = lightMapSize / 2 - centerX, lightMapSize / 2 - centerY
    local di = 8 + 6 * sin(t.elapsed * 40) + 4 * sin(1 + t.elapsed * 30)
    local db = 2.5 + 10 * _syncSnare8

    local im = (1 / 255) * (_shadowFadeLight[1] * (5 + db))

    -- Determine how dark/transparent the shadow is.
    local ss = (3 + sin(t.elapsed)) // 1

    local oldColor, intensity, color, frac

    for y = _shadowClips[_shadowClipsIdx].ys, _shadowClips[_shadowClipsIdx].ye do
        for x = _shadowClips[_shadowClipsIdx].xs, _shadowClips[_shadowClipsIdx].xe do
            if not (x + mx < 0 or x + mx > lightMapSize - 1 or y + my < 0 or y + my > lightMapSize - 1) then
                oldColor = pix(x, y)
                intensity = lightMap[x + mx + (y + my) * lightMapSize]
                color = (intensity - di) * im

                color = color * 1.5 - _shadowFadeTexture[1] * (12 - 1.5 * core_image_get(_imgBricks, x, y))

                -- Hack: Special treatment for some of the white bricks when shadowed.
                if not (oldColor == 15 or
                        (x >= 58 and y >= 69 and x <= 82 and y <= 78) or
                        (x >= 50 and y >= 23 and x <= 66 and y <= 33) or
                        (x >= 108 and y >= 12 and x <= 125 and y <= 21) or
                        (x >= 158 and y >= 35 and x <= 174 and y <= 44) or
                        (x >= 175 and y >= 102 and x <= 192 and y <= 111) or
                        (x >= 131 and y >= 91 and x <= 148 and y <= 100) or
                        (x >= 138 and y >= 102 and x <= 154 and y <= 111) or
                        (x >= 128 and y >= 113 and x <= 144 and y <= 123) or
                        (x >= 2 and y >= 102 and x <= 19 and y <= 111)
                    )
                then
                    -- Shadow intensity. Affects everything but highlighted bricks.
                    color = color - ss
                end

                -- Global shadow modifier from 0..1.
                color = color * _shadowLightIntensity[1]

                frac = color - (color // 1)

                if core_dither(frac, x, y, CoreDitherMatrixVertBayer8x8) then
                    color = color + 1
                end

                if color > 9 then
                    color = 9
                end
                if color < 0 then
                    color = 0
                end

                pix(x, y, color)
            else
                pix(x, y, 0)
            end
        end
    end
end

function updateShadowEntityPositions(t)
    for j = 2, #_polys do
        for i = 1, #_polys[j] do
            _polys[j][i][X] = _polysTemplate[j][i][X] + _shadowCastPos[j][X]
            _polys[j][i][Y] = _polysTemplate[j][i][Y] + _shadowCastPos[j][Y]
        end
    end
end

function updateCube(t)
    _shadowCubePos[1] = _shadowCubeOffX[1] + _shadowCubeAmpX[1] * sin(2 * t.elapsed + _shadowCubeSineOffset)
    _shadowCubePos[2] = _shadowCubeOffY[1] + _shadowCubeAmpY[1] * sin(t.elapsed + _shadowCubeSineOffset)

    local s = _shadowCubeScale[1]
    local sc = core_mat4_scale(s, s, s)
    local ry = core_mat4_rot_y(sin(t.elapsed * 1.5))
    local rx = core_mat4_rot_x(t.elapsed)
    local tr = core_mat4_translate(_shadowCubePos[1], _shadowCubePos[2], -10 + _shadowCubeOffZ[1])

    core_mat4_set_identity(_modelMatShadowCube)
    core_mat4_mul(_modelMatShadowCube, sc, _modelMatShadowCube)
    core_mat4_mul(_modelMatShadowCube, ry, _modelMatShadowCube)
    core_mat4_mul(_modelMatShadowCube, rx, _modelMatShadowCube)
    core_mat4_mul(_modelMatShadowCube, tr, _modelMatShadowCube)

    -- Projected cube points.
    local points = {}

    for i = 1, #_shadowCubeVerts do
        local out = { 0, 0, 0 }
        core_mat4_mul_vec3(out, _modelMatShadowCube, _shadowCubeVerts[i])
        core_mat4_mul_vec3_perspective(out, _matProj, out)

        if out[Z] < 0 then
            table_insert(points, { out[X], out[Y] })
        end
    end

    _polysTemplate[_shadowCubeIdx] = core_geom2d_convex_hull(points)
    _polys[_shadowCubeIdx] = _polysTemplate[_shadowCubeIdx]
end

_cubeMaxY = 0 -- Stores the lowest-most Y screen coordinate of the cube. Used for the bubbles emitter.

function renderCube()
    _cubeMaxY = 0
    for i = 1, #_polysTemplate[_shadowCubeIdx] do
        local p = _polysTemplate[_shadowCubeIdx][i]
        local n = _polysTemplate[_shadowCubeIdx][i % #_polysTemplate[_shadowCubeIdx] + 1]


        if p[Y] > _cubeMaxY then
            _cubeMaxY = p[Y]
        end

        line(p[X], p[Y] + _cubeRenderOffY[1], n[X], n[Y] + _cubeRenderOffY[1], _shadowCubeColors[1])

        local r1 = _cubeRandRange1[1]
        if r1 ~= 0 then
            line(
                p[X] + core_math_randf(-r1, r1),
                p[Y] + core_math_randf(-r1, r1) + _cubeRenderOffY[1],
                n[X] + core_math_randf(-r1, r1),
                n[Y] + core_math_randf(-r1, r1) + _cubeRenderOffY[1],
                _shadowCubeColors[2])
        end

        local r2 = _cubeRandRange1[1]
        if r2 ~= 0 then
            line(
                p[X] + core_math_randf(-r2, r2),
                p[Y] + core_math_randf(-r2, r2) + _cubeRenderOffY[1],
                n[X] + core_math_randf(-r2, r2),
                n[Y] + core_math_randf(-r2, r2) + _cubeRenderOffY[1],
                _shadowCubeColors[3])
        end
    end
end

function renderShadowScene(t)
    _shadowClipsIdx = (_shadowClipsIdx % #_shadowClips) + 1

    -- Cube position is also the light position.
    updateCube(t)
    updateShadowEntityPositions(t)

    -- Ugly: re-init everything because segments might have been skipped.
    _segments = {}
    _rays = {}
    _uniqueRays = {}

    polysToSegments(_polys, _segments) -- Always needed, regardless of re-init.
    initRays(_rays, _segments)
    initUniqueRays(_uniqueRays, _rays)

    updateRays(_rays, _segments)
    updatIntersects(_rays, _segments)
    _uniqueRaysCount = updateUniqueRays(_uniqueRays, _rays)
    renderTris(_uniqueRays, _uniqueRaysCount)
    renderLightMap(_lightMap, _lightMapSize, _uniqueRays[1].a[X], _uniqueRays[1].a[Y], t)

    ---
    vbank(1)
    cls(0)
    renderCube()

    ---
    vbank(0)
end

--- HAVE2RUN EXECUTE

function renderHave2RunTexts()
    local colIdx = _runText1ColorIdx[1] // 1

    if colIdx > 1 then
        -- 1. SOME DAYS YOU
        core_pal_swap(15, _runTextFadeColors[colIdx])
        font(_runTexts[1], 25 + _runLine1Pos[1], 65 + _runLine1Pos[2], 0, 6, 8, false, 1)
    end

    colIdx = _runText2ColorIdx[1] // 1
    if colIdx > 1 then
        -- LOVE
        core_pal_swap(15, _runTextFadeColors[colIdx])
        font(_runTexts[2], 131 + _runLine1Pos[1], 65 + _runLine1Pos[2], 0, 6, 8, false, 1)
    end

    colIdx = _runText3ColorIdx[1] // 1
    if colIdx > 1 then
        -- TO RUN
        core_pal_swap(15, _runTextFadeColors[colIdx])
        font(_runTexts[3], 169 + _runLine1Pos[1], 65 + _runLine1Pos[2], 0, 6, 8, false, 1)
    end

    colIdx = _runText4ColorIdx[1] // 1
    if colIdx > 1 then
        -- 2. SOME DAYS
        core_pal_swap(15, _runTextFadeColors[colIdx])
        font(_runTexts[4], 25 + _runLine2Pos[1], 65 + _runLine2Pos[2], 0, 6, 8, false, 1)
    end

    colIdx = _runText5ColorIdx[1] // 1
    if colIdx > 1 then
        -- HATE
        core_pal_swap(15, _runTextFadeColors[colIdx])
        font(_runTexts[5], 131 + _runLine2Pos[1], 65 + _runLine2Pos[2], 0, 6, 8, false, 1)
    end

    colIdx = _runText6ColorIdx[1] // 1
    if colIdx > 1 then
        -- TO RUN
        core_pal_swap(15, _runTextFadeColors[colIdx])
        font(_runTexts[6], 169 + _runLine2Pos[1], 65 + _runLine2Pos[2], 0, 6, 8, false, 1)
    end

    colIdx = _runText7ColorIdx[1] // 1
    if colIdx > 1 then
        -- 3. EVERY DAY YOU
        core_pal_swap(15, _runTextFadeColors[colIdx])
        font(_runTexts[7], 25 + _runLine3Pos[1], 65 + _runLine3Pos[2], 0, 6, 8, false, 1)
    end

    colIdx = _runText8ColorIdx[1] // 1
    if colIdx > 1 then
        -- HAVE
        core_pal_swap(15, _runTextFadeColors[colIdx])
        font(_runTexts[8], 131 + _runLine3Pos[1], 65 + _runLine3Pos[2], 0, 6, 8, false, 1)
    end

    colIdx = _runText9ColorIdx[1] // 1
    if colIdx > 1 then
        -- TO RUN
        core_pal_swap(15, _runTextFadeColors[colIdx])
        font(_runTexts[9], 169 + _runLine3Pos[1], 65 + _runLine3Pos[2], 0, 6, 8, false, 1)
    end
    core_pal_swap(15, 15)
end

function renderHave2RunScene(t)
    cls(0)
    renderRunnerFloor()
    core_dither_render_horizontal(0, 91, 20, 45, 0, false, CoreDitherMatrixBayer4x4)
    renderHave2RunTexts()
    renderRunners(t)
    core_grad_mix(_gradSkylineAndFloor, _gradSkylineAndFloorFlash, _gradSkylineAndFloorMix, _runnerSyncSnare)
end

function bdrHave2RunScene(scanline)
    core_grad_bdr(scanline, _gradSkylineAndFloorMix, 12)
end

--- RUNNER EXECUTE

_sunPosX = _runnerSunOffX + 330

function renderSun(t)
    _sunPosX = _sunPosX - _runnerSunSpeed[1] / 60
    local posX = _sunPosX // 1

    circ(posX, 55 + _sunPosY[1], 45, 11)
    pix(posX + 8, 10 + _sunPosY[1], 11) -- A single dither pixel XD
    rect(0, 26 + _sunPosY[1], CORE_WIDTH, 1, 10)
    rect(0, 32 + _sunPosY[1], CORE_WIDTH, 2, 10)
    rect(0, 38 + _sunPosY[1], CORE_WIDTH, 3, 10)
    rect(0, 45 + _sunPosY[1], CORE_WIDTH, 4, 10)
    rect(0, 55 + _sunPosY[1], CORE_WIDTH, 6, 10)
    rect(0, 63 + _sunPosY[1], CORE_WIDTH, 40, 10)
    rect(0, 63, CORE_WIDTH, 68, 10)
end

function renderHeli(xoff, t)
    local x = (480 + xoff) // 1

    if x > 240 or x < -(_imgHeli.width + 10) then
        return
    end

    local y = (15 + 2 * sin(t.elapsed * 2) + 2 * cos(t.elapsed * 3)) // 1
    local freq = .1
    local blinker = (t.elapsed % freq) < freq * .5

    core_blit_render(_imgHeli, x, y, 0, 12)

    if blinker then
        line(x + 2, y + 1, x + 6, y + 1, 12)
        pix(x + 1, y + 5, 12)
    else
        line(x + 8, y + 1, x + 12, y + 1, 12)
        pix(x + 1, y + 3, 12)
    end
end

_treePosX = _runnerBGOffX + 288
_backPosX = _runnerBGOffX + 240
_frontPosX = _runnerBGOffX + 240

function renderSkyline(t)
    local yBack = 2
    local yFront = 10
    local yTrees = 57

    _backPosX = _backPosX - 20 / 60
    local xBack = _backPosX // 1

    _frontPosX = _frontPosX - 24 / 60
    local xFront = _frontPosX // 1

    _treePosX = _treePosX - 30 / 60
    local xTrees = _treePosX // 1

    clip(_runnerSkylineBackClipPosX[1], 0, 240, 80)
    core_blit_render(_imgSkylineBack, xBack, yBack, 0, 12)
    core_blit_render(_imgSkylineBackShort, (xBack + _imgSkylineBack.width) // 1, yBack + 34, 0, 12)
    core_blit_render(_imgSkylineBack, xBack + 2 * _imgSkylineBack.width, yBack, 0, 12)
    core_blit_render(_imgSkylineBack, xBack + 3 * _imgSkylineBack.width, yBack, 0, 12)
    clip()

    clip(_runnerSkylineFrontClipPosX[1], 0, 240, 80)
    core_blit_render(_imgSkylineFront, xFront, yFront, 0)
    core_blit_render(_imgSkylineFront, xFront + 1 + _imgSkylineFront.width, yFront, 0)
    core_blit_render(_imgSkylineFront, xFront + 1 + 2 * _imgSkylineFront.width, yFront, 0)
    core_blit_render(_imgSkylineFront, xFront + 1 + 3 * _imgSkylineFront.width, yFront, 0)
    clip()

    clip(_runnerTreesClipPosX[1], 0, 240, 80)
    core_blit_render(_imgSkylineTrees, xTrees, yTrees, 0, 14)
    core_blit_render(_imgSkylineTrees, xTrees + _imgSkylineTrees.width, yTrees, 0, 14)
    core_blit_render(_imgSkylineTrees, xTrees + 2 * _imgSkylineTrees.width, yTrees, 0, 14)
    core_blit_render(_imgSkylineTrees, xTrees + 3 * _imgSkylineTrees.width, yTrees, 0, 14)
    clip()

    renderHeli(xFront, t)
end

function renderGreetsBG(t)
    _runnerGreetsBGPosX = (_runnerGreetsBGPosX - 93.5 / 60 * _runnerGreetsFactor)

    local xpos = _runnerGreetsBGPosX
    local ypos = 73

    core_pal_swap(15, 13)
    font(_txtGreets1, xpos, ypos, 0, 8, 8, false, 4)
    font(_txtGreets1, xpos - 1, ypos + 1, 0, 8, 8, false, 4)

    core_pal_swap(15, 14)
    font(_txtGreets1, xpos - 2, ypos + 2, 0, 8, 8, false, 4)

    core_pal_swap(15, 15)
end

function renderGreetsFG(t)
    _runnerGreetsFGPosX = (_runnerGreetsFGPosX - 120 / 60 * _runnerGreetsFactor)
    local xpos = _runnerGreetsFGPosX
    local ypos = 93

    core_pal_swap(15, 13)
    font(_txtGreets2, xpos, ypos, 0, 8, 8, false, 7)
    font(_txtGreets2, xpos - 1, ypos + 1, 0, 8, 8, false, 7)
    font(_txtGreets2, xpos - 2, ypos + 2, 0, 8, 8, false, 7)
    font(_txtGreets2, xpos - 3, ypos + 3, 0, 8, 8, false, 7)

    core_pal_swap(15, 14)
    font(_txtGreets2, xpos - 4, ypos + 4, 0, 8, 8, false, 7)

    core_pal_swap(15, 15)
end

function renderRunnerFloor()
    local offY = 2
    for i = 1, #_runnerFloorLines do
        local f = _runnerFloorLines[i]
        line(f.x[1], f.y + offY, f.x[1] + 240, f.y + offY, 12)
        if f.x[1] < 0 then
            pix(f.x[1] + 241, f.y + offY, 12)
            pix(f.x[1] + 242, f.y + offY, 3)
            pix(f.x[1] + 243, f.y + offY, 2)
        elseif f.x[1] < 244 then
            pix(f.x[1] - 1, f.y + offY, 12)
            pix(f.x[1] - 2, f.y + offY, 3)
            pix(f.x[1] - 3, f.y + offY, 2)
        end
    end
end

function renderDoggy(t)
    local idx = (20 * t.elapsed % #_imgDoggySprites) // 1 + 1
    core_blit_render(_imgDoggySprites[idx], (_doggyPosX[1]) // 1, 79, 0)
end

function renderRunnerBulk(t)
    local idx = (20 * t.elapsed % #_runnerSprites) // 1 + 1

    for i = 1, #_runnerBulk do
        local b = _runnerBulk[i]

        b.x = b.x + b.speed * t.delta

        local s = _runnerSprites[(idx + b.sprIdx) % #_runnerSprites + 1]
        spr(s.idx,
            s.offX + b.x,
            b.y,
            s.bgCol, 1, 0, s.rot, s.sprW, s.sprH)
    end
end

function renderRunners(t)
    local idx = (20 * t.elapsed % #_runnerSprites) // 1 + 1
    local offX = _runnersOffX[1]

    local s = _runnerSprites[(idx + 0) % #_runnerSprites + 1]
    spr(s.idx,
        s.offX + (offX + 50 + 40 * sin(.3 + .5 * t.elapsed)) // 1,
        55,
        s.bgCol, 1, 0, s.rot, s.sprW, s.sprH)

    s = _runnerSprites[(idx + 2) % #_runnerSprites + 1]
    spr(s.idx,
        s.offX + (offX + 80 + 70 * sin(.6 + .4 * t.elapsed)) // 1,
        61,
        s.bgCol, 1, 0, s.rot, s.sprW, s.sprH)

    s = _runnerSprites[(idx + 4) % #_runnerSprites + 1]
    spr(s.idx,
        s.offX + (offX + 40 + 30 * sin(.4 + .6 * t.elapsed)) // 1,
        70,
        s.bgCol, 1, 0, s.rot, s.sprW, s.sprH)
end

function renderRunnerSwipe()
    -- In fact only 17 swipes are used. Atm 136 with step size 8. 136/8 = 17
    for i = 1, #_runnerSwipesX, 8 do
        rect(-2, i - 1, _runnerSwipesX[i][1] + 2, 8, 0)
    end
end

function renderRunnerTransitionOut()
    rect(0, _runnerTransitionOutTopY[1], 240, 68, 0)
    rect(0, _runnerTransitionOutBottomY[1], 240, 68, 0)
end

function renderRunnerScene(t)
    -- Use color 10 as BG clear so palette can be modified in BDR function without affecting border color (0).
    cls(10)

    core_grad_mix(_gradSkylineAndFloor, _gradSkylineAndFloorFlash, _gradSkylineAndFloorMix,
        _runnerSyncSnare * _floorFlashFactor[1])

    if _runnerGradBGMixFactor[1] > 0 then
        local step = .05 -- Lerp in steps of 0.05.
        core_grad_mix(_gradBGPink, _gradRunnerBGNight, _gradRunnerBGMix, ((_runnerGradBGMixFactor[1] / step + .5) // 1) *
            step)
    end

    renderSun(t)
    renderSkyline(t)

    if _runnerSwipesEnabled then
        renderRunnerSwipe()
    end

    renderRunnerFloor()
    renderGreetsBG(t)

    if _runnerBulkEnabled then
        renderRunnerBulk(t)
    end

    renderRunners(t)

    if _doggyPosX[1] > -40 then
        renderDoggy(t)
    end

    renderGreetsFG(t)

    core_dither_render_horizontal(0, 91, 20, 45, 10, false, CoreDitherMatrixBayer4x4)

    if _runnerBlackBayerX[1] > -20 then
        core_dither_render_horizontal(_runnerBlackBayerX[1] // 1, 91, 20, 45, 0, false, CoreDitherMatrixBayer4x4)
    end

    if _runnerTransitionOutBottomY[1] < 136 then
        renderRunnerTransitionOut()
    end
end

function bdrGreetsLettersFront(scanline, gradient, colorIdx, off)
    if scanline >= 58 and scanline < 140 then
        scanline = (scanline + off - 1) % #gradient + 1
        local i = 1 + (scanline - 4) * 3
        core_pal_apply_color(colorIdx, gradient[i], gradient[i + 1], gradient[i + 2])
    end
end

function bdrRunnerScene(scanline)
    if scanline > 68 and scanline < 136 then
        -- Letters top.
        local pos = 1 + 3 * scanline - 4
        _gradLettersTop[pos] = _gradLettersTopTemplate[pos] + _runnerSyncSnare * (255 - _gradLettersTopTemplate[pos])
        _gradLettersTop[pos + 1] = _gradLettersTopTemplate[pos + 1] +
            _runnerSyncSnare * (255 - _gradLettersTopTemplate[pos + 1])
        _gradLettersTop[pos + 2] = _gradLettersTopTemplate[pos + 2] +
            _runnerSyncSnare * (255 - _gradLettersTopTemplate[pos + 2])
        core_grad_bdr(scanline, _gradLettersTop, 13)
    end

    -- Letters front.
    bdrGreetsLettersFront(scanline, _gradLettersFront, 14, -5 + (15 * sin(_localTimer.elapsed + scanline * .1)) // 1)

    -- Pink BG.
    core_grad_bdr(scanline, _gradRunnerBGMix, 10)


    if scanline < 68 then
        -- Sun.
        core_grad_bdr_offset(scanline, _gradSun, 11, (_gradSunPosY[1]) // 1)

        -- Windows.
        core_grad_bdr_offset(scanline, _gradWindows, 15,
            (68 * sin(_localTimer.elapsed + 10 * sin(scanline * .05 + .05 * _localTimer.elapsed))) // 1)
    end

    -- Color 12: Shared between BG layer and foreground floor stripes.
    core_grad_bdr(scanline, _gradSkylineAndFloorMix, 12)
end

--- TRANSIT2VOX EXECUTE

function renderVoxTransitionIn()
    -- Top cover.
    rect(0, 0 + _voxCoverTopY[1], 240, 68, 0)
    line(0, 68 + _voxCoverTopY[1], 240, 68 + _voxCoverTopY[1], 2)

    -- Bottom cover.
    rect(0, 68 + _voxCoverBottomY[1], 240, 68, 0)
    line(0, 68 + _voxCoverBottomY[1], 240, 68 + _voxCoverBottomY[1], 2)
end

function renderTransit2VoxTexts(t)
    if _voxTxts[6].x[1] <= -50 then
        return
    end

    for i = 1, #_voxTxts do
        local colIdx = _voxTxts[i].col[1] // 1
        local yOff = sin(2.14 + t.elapsed * 4) * _voxTxts[i].amp[1]
        core_pal_swap(15, _voxTextFadeColors[colIdx])
        font(_voxTxts[i].txt, _voxTxts[i].x[1], 65 + yOff, 0, 4, 8, false, 1)
    end

    core_pal_swap(15, 15)
end

function updateVoxStripes()
    core_grad_clear(_voxGradStripes, 0, 0, 0)

    local pulse = _voxKickSnare4 * _voxStripesPulseFactor[1]

    for i = #_stripes, 1, -1 do
        for j = 1, #_stripes[i] do
            local s = _stripes[i][j]
            for y = s.y, s.y + s.h - 1 do
                if _voxStripesModeBlackEnables then
                    core_grad_pix(_voxGradStripes, (y + _stripes[i].yoff[1]) // 1,
                        0 + (s.cf[1] - 0) * pulse,
                        0 + (s.cf[2] - 0) * pulse,
                        0 + (s.cf[3] - 0) * pulse)
                else
                    core_grad_pix(_voxGradStripes, (y + _stripes[i].yoff[1]) // 1,
                        s.c[1] + (s.cf[1] - s.c[1]) * pulse,
                        s.c[2] + (s.cf[2] - s.c[2]) * pulse,
                        s.c[3] + (s.cf[3] - s.c[3]) * pulse)
                end
            end
        end
    end
end

_voxTimePosX = 240

function renderVoxLogos(t)
    local yy, max
    if _voxLinesSpectroxFactor[1] < 1 then
        -- Top logo.
        core_blit_render(_imgSpectrox, 120 - 177 // 2, 8, 0)

        max = #_voxLinesSpectrox * _voxLinesSpectroxFactor[1]
        for i = 1, max do
            yy = 7 + _voxLinesSpectrox[i]
            -- Color 1 is used for BDR.
            line(0, yy, 240, yy, 1)
        end
    end

    if _voxTimePosX >= -_imgTime.width then
        _voxTimePosX = _voxTimePosX + _voxTimeSpeedX[1]
        _voxTimePosX = _voxTimePosX
        -- Reflection.
        core_blit_scale(_imgTime, 0, 0, _imgTime.width, _imgTime.height, _voxTimePosX // 1, 114 + 2 * _imgTime.height,
            _imgTime.width, -_imgTime.height, 0, 9)
        -- Bottom logo.
        core_blit_render(_imgTime, _voxTimePosX // 1, 114, 0)
    end
end

--- White flash the palette.
--- @param srcPal any
--- @param p any
--- @param excludeMap any Color indices to exclude, e.g. excludeMap[0] = true
function logoFlash(srcPal, p, excludeMap)
    p = p < 0 and 0 or p
    p = p > 1 and 1 or p
    local dstPal = {}
    for i = 1, #srcPal do
        if not excludeMap[(i - 1) // 3] then
            dstPal[i] = srcPal[i] + p * (255 - srcPal[i])
        else
            dstPal[i] = srcPal[i]
        end
    end
    core_pal_apply(dstPal)
end

-- Determine which colors to exclude from the logo flash. See palette of the Spectrox logo pcx/gif.
_voxLogoFlashExcludedColorMap = {}
_voxLogoFlashExcludedColorMap[0] = true
_voxLogoFlashExcludedColorMap[3] = true
_voxLogoFlashExcludedColorMap[4] = true
_voxLogoFlashExcludedColorMap[5] = true
_voxLogoFlashExcludedColorMap[6] = true
_voxLogoFlashExcludedColorMap[7] = true
_voxLogoFlashExcludedColorMap[8] = true
_voxLogoFlashExcludedColorMap[9] = true

function renderTransit2VoxScene(t)
    cls(1)
    updateVoxStripes()
    renderVoxLogos(t)
    renderTransit2VoxTexts(t)
    renderVoxTransitionIn()
    logoFlash(_imgSpectrox.palette, _voxLogoSyncSnare8 * _voxLogoFlashFactor, _voxLogoFlashExcludedColorMap)
end

function bdrTransit2VoxScene(scanline)
    core_grad_bdr_offset(scanline, _voxGradStripes, 1, 0)
end

--- VOX EXECUTE
--- See: https://github.com/s-macke/VoxelSpace
--- See: https://github.com/gustavopezzi/voxelspace

function voxMap(x, y)
    return _voxMap[1 + x + y * _voxMapW]
end

function updateVoxMap(t)
    if _voxOrbitModeEnabled then
        local r = _voxOrbitCamRadius + 5 + 5 * sin(t.elapsed)
        local tx, ty = _voxOrbitCamTargetPos[1], _voxOrbitCamTargetPos[2]
        local angle = -t.elapsed

        _voxCam.pos.x = tx + cos(angle) * r
        _voxCam.pos.y = ty + sin(angle) * r
        _voxCam.angle = atan(ty - _voxCam.pos.y, tx - _voxCam.pos.x)
    else
        _voxCam.pos.x = _voxCam.pos.x + _voxSpdX[1] * t.delta
        _voxCam.pos.y = _voxCam.pos.y + _voxSpdY[1] * t.delta
        _voxCam.angle = _voxAng[1]
    end

    _voxCam.scale = _voxScale[1]
    _voxCam.horizon = _voxHoriz[1]
    _voxCam.height = _voxHeight[1]
end

function renderVoxMap(t)
    _voxClipIdx = (_voxClipIdx % #_voxClips) + 1

    -- Clear screen in the clip region that is being rendered.
    clip(_voxClips[_voxClipIdx][1], 0, _voxClips[_voxClipIdx][2] - _voxClips[_voxClipIdx][1] + 1, CORE_HEIGHT)
    cls(0)
    clip()

    -- Adjust dithering at the center seam. Makes sure that two dither pixels are not adjacent.
    local ditherOffset = _voxClipIdx - 1

    local camSin = sin(_voxCam.angle)
    local camCos = cos(_voxCam.angle)

    local pl = {
        x = camCos * _voxCam.dist + camSin * _voxCam.dist,
        y = camSin * _voxCam.dist - camCos * _voxCam.dist
    }
    local pr = {
        x = camCos * _voxCam.dist - camSin * _voxCam.dist,
        y = camSin * _voxCam.dist + camCos * _voxCam.dist
    }

    local invCamDist = 1 / _voxCam.dist
    local invW = 1 / CORE_WIDTH

    local b = {
        x = pl.x * invCamDist,
        y = pl.y * invCamDist
    }

    local s = {
        x = (pr.x - pl.x) * invW * invCamDist,
        y = (pr.y - pl.y) * invW * invCamDist
    }

    for i = _voxClips[_voxClipIdx][1], _voxClips[_voxClipIdx][2], 2 do
        local d = {
            x = b.x + s.x * i,
            y = b.y + s.y * i
        }

        local r = {
            x = _voxCam.pos.x,
            y = _voxCam.pos.y
        }

        local maxH = CORE_HEIGHT - 1
        local lastY = 0

        if _voxIsTwister then
            -- Find topmost pixel per x and z.
            for z = 1, _voxCam.dist, 24 do
                r.x = r.x + d.x * .5
                r.y = r.y + d.y * .5

                local hv = voxMap(r.x // 1 % _voxMapW, r.y // 1 % _voxMapH)
                local y = (((_voxCam.height - hv) / z * _voxCam.scale) + _voxCam.horizon) // 1

                if y < maxH then
                    for j = y, maxH do
                        lastY = y
                    end
                    maxH = y
                end
            end

            -- Reset.
            r = {
                x = _voxCam.pos.x,
                y = _voxCam.pos.y
            }
            maxH = CORE_HEIGHT - 1
        end

        for z = 1, _voxCam.dist, 24 do
            r.x = r.x + d.x * .5
            r.y = r.y + d.y * .5

            local hv = voxMap(r.x // 1 % _voxMapW, r.y // 1 % _voxMapH)
            local y = (((_voxCam.height - hv) / z * _voxCam.scale) + _voxCam.horizon) // 1

            if y < maxH then
                local shade
                if _voxShadePulseEnabled then
                    shade = 1 + ((5 + (8 + 8 * sin(t.elapsed * 2))) * hv // 255)
                else
                    shade = 1 + (_voxLightAmp[1] * hv) // 255
                end
                for j = y, maxH do
                    local col = shade
                    if (0 + (30 * hv // 255)) & 1 == 1 then
                        col = shade + (i ~ j) % 2
                    end
                    if col > 15 then
                        col = 15
                    end

                    local yoff = _voxYOff[1]
                    local dstY = yoff + j

                    if dstY >= -1 and dstY < 136 then
                        if j < _voxDitherDist[1] + abs(68 - lastY) then
                            if _voxDitherHoriz[1] >= _voxCam.dist then
                                line(i, dstY, i + 1, dstY + 1, col)
                            else
                                if z > _voxDitherHoriz[1] then
                                    -- Far horizon dither.
                                    if j & 1 == 0 then
                                        pix(i + ditherOffset, dstY, col)
                                    end
                                elseif z > _voxDitherHoriz[2] then
                                    -- Near horiozon dither.
                                    if j & 1 == 0 then
                                        line(i + ditherOffset, dstY, i + 1 + ditherOffset, dstY + 1, col)
                                    end
                                else
                                    line(i, dstY, i + 1, dstY + 1, col)
                                end
                            end
                        end
                    end
                end
                maxH = y
            end
        end
    end
end

function updateVoxGradients(t)
    -- VBank0
    if _voxGradStripedEnabled then
        updateVoxStripes()
    end

    core_grad_mix(_voxGradVbank0Src, _voxGradVbank0Dst, _voxGradVbank0, _voxGradVbank0Mix[1])

    -- VBank1
    core_grad_mix(_voxGradVbank1Src, _voxGradVbank1Dst, _voxGradVbank1, _voxGradVbank1Mix[1])
end

function renderVoxScene(t)
    updateVoxGradients(t)

    vbank(0)
    cls(1)

    renderTransit2VoxTexts(t)
    renderVoxLogos(t)

    -- Dither in front of incoming twister.
    local coverEnabled = _voxRectX[1] < 240
    local coverPosX
    if coverEnabled then
        coverPosX = (_voxRectX[1] + _voxRectAmp[1] * sin((2 + t.elapsed) * 3)) // 1
        core_dither_render_horizontal(coverPosX - 20, 50, 50, 40, 0, false, CoreDitherMatrixBayer4x4)
    end

    renderVoxTransitionIn()
    updateVoxMap(t)

    if _voxLogoFlashFactor > 0 then
        logoFlash(_imgSpectrox.palette, _voxLogoSyncSnare8 * _voxLogoFlashFactor, _voxLogoFlashExcludedColorMap)
    end

    ---
    vbank(1)
    -- No cls as we only render alternating clips to gain better perfomance.
    renderVoxMap(t)

    -- Used for fade-to-black scene cuts.
    core_pal_apply_black_fade(_voxPal, _voxFlashFactor[1]) -- vbank1

    -- Rect to cover voxels at the beginning.
    if coverEnabled then
        rect(coverPosX, 0, 240, 136, 0)
    end

    if _cubeEnabled then
        updateCube(t)
        renderCube()
    end

    updateWaterfieldPos(t)
end

function bdrVoxScene(scanline)
    vbank(0)
    core_grad_bdr_offset(scanline, _voxGradVbank0, 1, _bdrVox0OffFunc())
    vbank(1)
    core_grad_bdr_offset(scanline, _voxGradVbank1, 1, _bdrVox1OffFunc())
end

--- WATERFIELD EXECUTE

function zComparator(a, b)
    return a[Z] < b[Z]
end

function updateWaterParticles(t)
    local dy = t.delta * _waterParticlesSpd[1]
    for i = 1, #_waterParticles do
        local particle = _waterParticles[i]
        particle[Y] = particle[Y] + dy

        if _waterBGParticlesSpawnEnabled then
            if particle[Y] > _waterParticlesDim then
                particle[Y] = particle[Y] - _waterParticlesDim2
            end
        end
    end

    local tr = core_mat4_translate(0, 0, -_waterParticlesDim2)

    core_mat4_set_identity(_matModelWaterParticles)
    core_mat4_mul(_matModelWaterParticles, tr, _matModelWaterParticles)

    for i = 1, #_waterParticles do
        local out = { 0, 0, 0 }
        core_mat4_mul_vec3(out, _matModelWaterParticles, _waterParticles[i])
        core_mat4_mul_vec3_perspective(out, _matProj, out)
        _waterParticlesTransformed[i] = { out[X], out[Y], out[Z] }
    end

    table_sort(_waterParticlesTransformed, zComparator)
end

function renderWaterParticle(i, isFlickering, t)
    local p = _waterParticlesTransformed[i]
    local c, n, p1x, p2x
    if p[Z] < 0 then
        c = 8 + 5 * (_waterParticlesDim2 + p[Z] + _waterParticlesDim) / _waterParticlesDim2
        n = t.elapsed * 8 + i * .1

        p1x = p[X] + cos(n) * 3
        p2x = p[X] + cos(1 + n) * 2

        if not isFlickering or (p1x // 1) & 1 == 0 then
            pix(p1x, p[Y] + sin(n) * 3, c)
        end

        if not isFlickering or (p2x // 1) & 1 == 0 then
            pix(p2x, p[Y] + sin(2 + n) * 4, c)
        end
    end
end

function renderWaterParticles(filterFunc, isFlickering, t)
    for i = 1, #_waterParticlesTransformed do
        if filterFunc(_waterParticlesTransformed[i][Z]) then
            renderWaterParticle(i, isFlickering, t)
        end
    end
end

function waterFilterFuncBack(a)
    return a <= -20
end

function waterFilterFuncFront(a)
    return a > -20
end

function updateWaterfieldPos(t)
    _waterBGPosY = _waterBGPosY + _waterfieldBGSpeed[1] * t.delta
end

function updateWaterfieldGradients()
    if _waterGradMixEnabled then
        core_grad_mix(_waterGradSplash, _waterGradBG, _waterGradVbank0, _waterGradVbank0Mix[1])
    end
end

function updateCubeColors()
    core_pal_apply_color(5, _waterCubeColors[1][1], _waterCubeColors[1][2], _waterCubeColors[1][3]) -- Glitch line 1.
    core_pal_apply_color(6, _waterCubeColors[2][1], _waterCubeColors[2][2], _waterCubeColors[2][3]) -- Glitch line 2.
    core_pal_apply_color(7, _waterCubeColors[3][1], _waterCubeColors[3][2], _waterCubeColors[3][3]) -- White main line of cube.
end

--- Create new particle emitter.
--- @param numParticles any
--- @param pos any e.g. { x = 0, y = 0 }
--- @param maxAge any max particle age in seconds
--- @param spawnFreq any particle spawning frequency in seconds
--- @param posVariance any particle position variance, e.g. { x = 25, y = 10 }
--- @param speedVariance any particle speed variance, e.g. { min = 80, max = 100 }
--- @param ampVariance any particle sine amp variance, e.g. { min = 5, max = 10 }
--- @param freqVariance any particle frequency variance, e.g. { min = 4, max = 8 }
function newEmitter(numParticles, pos, maxAge, spawnFreq, posVariance, speedVariance, ampVariance, freqVariance)
    local e = {
        pos = pos,
        offset = { x = 0, y = 0 }, -- Offset used for rendering. No impact on actual particle calculations.
        particleMaxAge = maxAge,
        particleSpawnFreq = spawnFreq,
        particleSpawnPosVariance = posVariance,
        particleSpawnSpeedVariance = speedVariance,
        particleSpawnAmpVariance = ampVariance,
        particleSpawnFreqVariance = freqVariance,
        timeSinceLastSpawn = 0,
        isParticleRenderEnabled = true,
        isParticleSpawnEnabled = true,
    }

    local particles = {}
    for i = 1, numParticles do
        table_insert(particles,
            {
                isAlive = false,
                age = 0,
                pos = { x = 0, y = 0 },
                speed = 0,
                amp = { x = 0, y = 0 },
                freq = { x = 0, y = 0 },
                phase = { x = 0, y = 0 },
            }
        )
    end
    e.particles = particles

    return e
end

function resetEmitter(e)
    e.timeSinceLastSpawn = 0

    local p
    for i = 1, #e.particles do
        p = e.particles[i]
        p.age = 0
        p.isAlive = false
        p.pos.x = 0
        p.pos.y = 0
        p.pos.speed = 0
    end
end

function initParticle(e, p)
    p.age = 0
    p.pos.x = e.pos.x + core_math_randf(-e.particleSpawnPosVariance.x, e.particleSpawnPosVariance.x)
    p.pos.y = e.pos.y + core_math_randf(-e.particleSpawnPosVariance.y, e.particleSpawnPosVariance.y)
    p.speed = core_math_randf(e.particleSpawnSpeedVariance.min, e.particleSpawnSpeedVariance.max)
    p.amp.x = core_math_randf(e.particleSpawnAmpVariance.min, e.particleSpawnAmpVariance.max)
    p.freq.x = core_math_randf(e.particleSpawnFreqVariance.min, e.particleSpawnFreqVariance.max)
    p.phase.x = core_math_randf(0, 10)
end

function emitParticle(e, t)
    e.timeSinceLastSpawn = e.timeSinceLastSpawn + t.delta

    if (e.isParticleSpawnEnabled and e.timeSinceLastSpawn > e.particleSpawnFreq) then
        local desiredSpawns = (e.timeSinceLastSpawn / e.particleSpawnFreq) // 1
        e.timeSinceLastSpawn = 0

        local spawnCnt = 0
        for i = 1, #e.particles do
            if not e.particles[i].isAlive then
                e.particles[i].isAlive = true
                initParticle(e, e.particles[i])

                spawnCnt = spawnCnt + 1
                if spawnCnt >= desiredSpawns then
                    break
                end
            end
        end
    end
end

function updateParticleProc(p, e, t)
    p.pos.y = p.pos.y - p.speed * t.delta
end

function updateEmitter(e, t)
    emitParticle(e, t)

    local p
    for i = 1, #e.particles do
        p = e.particles[i]

        if not p.isAlive then
            goto continue
        end

        p.age = p.age + t.delta
        if p.age > e.particleMaxAge then
            p.isAlive = false
        end

        updateParticleProc(p, e, t)

        ::continue::
    end
end

function renderEmitter(e, t, start, col)
    if not e.isParticleRenderEnabled then
        return
    end

    local p, x, y
    for i = start, #e.particles, 2 do
        p = e.particles[i]
        if p.isAlive then
            x = e.offset.x + p.pos.x + p.amp.x * sin(t.elapsed * p.freq.x + p.phase.x)
            y = e.offset.y + p.pos.y

            if p.age < .05 then
                pix(x, y, col)
            elseif p.age < .1 then
                rect(x, y, 2, 2, col)
            elseif p.age < .3 then
                circb(x, y, 2, col)
            elseif p.age < .5 then
                circb(x, y, 1, col)
            elseif p.age < .6 then
                rect(x, y, 2, 2, col)
            else
                pix(x, y, col)
            end
        end
    end
end

_waterTextPosY = 136

function renderCredits()
    _waterTextPosY = _waterTextPosY + _waterTextPosSpd
    local yoff = _waterTextPosY // 1
    local yoff1 = yoff + 1

    core_pal_swap(15, 13)
    for i = 1, #_txtCredits do
        font(_txtCredits[i].txt, _txtCredits[i].x + 1, _txtCredits[i].y + yoff1, 0, 4, 12, false, _txtCredits[i].s)
    end

    core_pal_swap(15, 2)
    for i = 1, #_txtCredits do
        font(_txtCredits[i].txt, _txtCredits[i].x, _txtCredits[i].y + yoff, 0, 4, 12, false, _txtCredits[i].s)
    end

    core_pal_swap(15, 15)
end

function renderWaterfieldScene(t)
    cls(1)

    updateWaterfieldGradients()
    core_pal_apply_mix(_waterPal, _waterPurplePal, _underwaterPurpleMix[1])
    updateWaterParticles(t)
    renderWaterParticles(waterFilterFuncBack, true, t)
    renderCredits()

    if _cubeEnabled then
        updateCubeColors()
        updateCube(t)
        _waterCubeBubblesEmitter.pos.y = _cubeMaxY
        _waterCubeBubblesEmitter.particleSpawnPosVariance.x = _waterCubeBubblesPosVarX[1]
        updateEmitter(_waterCubeBubblesEmitter, t)
        renderEmitter(_waterCubeBubblesEmitter, t, 1, 3)
        renderCube()
        renderEmitter(_waterCubeBubblesEmitter, t, 2, 12)
    end

    renderWaterParticles(waterFilterFuncFront, false, t)
    updateWaterfieldPos(t)
end

function bdrWaterfieldScene(scanline)
    core_grad_bdr_offset(scanline, _waterGradVbank0, 1, (_waterBGPosY) // 1)
    core_grad_bdr_offset(scanline, _voxGradLakes1, 2, (50 * _localTimer.elapsed) // 1)
    core_grad_bdr_offset(scanline, _waterBubblesGrad, 3, 0)
end

--- UNDERWATER EXECUTE

function blitWave(image, x, y, colorTransparent, colorOverride, amp, phase, phaseFactor, t)
    local max = math.max
    local min = math.min
    local sx0 = max(0, -x)                 -- Source X start.
    local sx1 = min(image.width, 240 - x)  -- Source X end.
    local sy0 = max(0, -y)                 -- Source Y start.
    local sy1 = min(image.height, 136 - y) -- Source Y end.

    if sx0 >= sx1 or sy0 >= sy1 then return end

    local tx, ty, idx, c
    for iy = sy0, sy1 - 1 do
        tx = (x + sx0 + (image.height - iy) / image.height * sin(phase + 2 * t.elapsed + phaseFactor * iy) * amp) // 1
        ty = y + iy
        idx = iy * image.width + sx0 + 1

        for ix = sx0, sx1 - 1 do
            c = image.pixels[idx]
            if c ~= colorTransparent then
                pix(tx, ty, colorOverride or c)
            end
            idx = idx + 1
            tx = tx + 1
        end
    end
end

function renderEndLogoBack(t)
    if _underwaterLogoMaskPosY[1] < 0 then
        local a = sin(_localTimer.elapsed * 2 - 1) * _underwaterEndLogoAmp[1]
        blitWave(_imgThe, 108, 14 + a, 0, 2, 6, 0, .5, t)
        blitWave(_imgThe, 108, 16 + a, 0, 2, 6, M_PI_4, .5, t)

        blitWave(_imgEnd, 76, 26 + a, 0, 2, 12, 0, 1.2, t)
        blitWave(_imgEnd, 76, 30 + a, 0, 11, 12, M_PI_4, 1.2, t)

        core_dither_rect(65, 9, 110, 51, 0, .5, CoreDitherMatrixBayer4x4)
    end
end

function renderEndLogo()
    if _underwaterLogoMaskPosY[1] < 0 then
        local a = sin(_localTimer.elapsed * 2) * _underwaterEndLogoAmp[1]

        core_blit_render(_imgThe, 108, (15 + _underwaterEndLogoPosY[1] + a) // 1, 0)
        core_blit_render(_imgEnd, 76, (28 + _underwaterEndLogoPosY[1] + a) // 1, 0)
    end

    if _underwaterLogoMaskPosY[1] < 0 and _underwaterLogoMaskPosY[1] > -120 then
        rect(65, _underwaterLogoMaskPosY[1] // 1, 110, 55, 0)
        core_dither_render_vertical(65, 55 + (_underwaterLogoMaskPosY[1]) // 1, 110, 20, 0, false,
            CoreDitherMatrixBayer4x4)
    end
end

function renderUnderwaterScene(t)
    local yOff

    vbank(0)
    cls(15)

    -- Flicker cube colors.
    if not _underwaterBGParticlesEnabled then
        local a = -100 + 230 + 4 + 4 * sin(48 * t.elapsed) + 6 + 6 * sin(16 * t.elapsed)
        a = a / (-100 + 250)
        core_pal_apply_color(13, (255 * a) // 1, (255 * a) // 1, (255 * a) // 1)
        core_pal_apply_color(11, (189 * a) // 1, (226 * a) // 1, (234 * a) // 1)
        core_pal_apply_color(6, (124 * a) // 1, (197 * a) // 1, (214 * a) // 1)
    end

    -- Light beam.
    core_grad_mix(_gradUnderwater, _gradUnderwaterBrightBase, _gradUnderwaterBrightMix, _underwaterLightMix[1])
    local triXoff = (sin(t.elapsed * 2) * 3) // 1
    tri(120, -100, 120 - 80 + triXoff, 120, 120 + 80 + triXoff, 120, 14)

    if _underwaterBGParticlesEnabled then
        core_pal_apply_mix(_waterPal, _waterPurplePal, _underwaterPurpleMix[1])

        updateWaterParticles(t)
        renderWaterParticles(waterFilterFuncBack, true, t)
        renderCredits()
        renderWaterParticles(waterFilterFuncFront, false, t)
    end

    yOff = _underwaterBGPosY[1]
    core_blit_render(_imgKelpBG, 0, (45 + yOff) // 1, 0)
    rect(0, 45 + yOff + _imgKelpBG.height, 240, 30, 3)

    yOff = _underwaterSandPosY[1]
    core_blit_render(_imgSand, 0, (54 + yOff) // 1, 0)

    updateEmitter(_underwaterCubeEmitter, t)
    renderEmitter(_underwaterCubeEmitter, t, 1, 6)


    _underwaterEmitter.offset.y = yOff
    updateEmitter(_underwaterEmitter, t)
    renderEmitter(_underwaterEmitter, t, 1, 6)
    renderEmitter(_underwaterEmitter, t, 2, 13)

    ---
    vbank(1)
    cls(0)

    yOff = _underwaterSandPosY[1]
    core_blit_render(_imgSideRocksLeft, 0, (69 + yOff) // 1, 0)
    core_blit_render(_imgSideRocksRight, 186, (72 + yOff) // 1, 0)

    renderEndLogoBack(t)
    if not _underwaterLogoTopmost then
        renderEndLogo()
    end

    renderEmitter(_underwaterCubeEmitter, t, 2, 15)

    yOff = _underwaterWaveyKelpPosY[1]
    blitWave(_imgKelp1, 42, (36 + yOff) // 1, 0, nil, 4, 0, .08, t)
    blitWave(_imgKelp2, 59, (40 + yOff) // 1, 0, nil, 8, 1.5, .08, t)
    blitWave(_imgKelp3, 166, (45 + yOff) // 1, 0, nil, 4, 1, .08, t)

    yOff = _underwaterFGPosY[1]
    core_blit_render(_imgSandFG, 0, (72 + yOff) // 1, 0)
    blitWave(_imgKelpFGLeft1, 0, (6 + yOff) // 1, 0, nil, 4, 0, .08, t)
    blitWave(_imgKelpFGLeft2, 9, (20 + yOff) // 1, 0, nil, 8, 1.5, .08, t)
    blitWave(_imgKelpFGLeft3, 13, (40 + yOff) // 1, 0, nil, 8, 0, .08, t)
    blitWave(_imgKelpFGLeft4, 19, (68 + yOff) // 1, 0, nil, 8, 2.5, .08, t)
    blitWave(_imgKelpFGRight1, 209, (81 + yOff) // 1, 0, nil, 4, 0, .08, t)
    blitWave(_imgKelpFGRight2, 209, (55 + yOff) // 1, 0, nil, 8, 1.5, .08, t)
    blitWave(_imgKelpFGRight3, 213, (37 + yOff) // 1, 0, nil, 8, 0.5, .08, t)
    blitWave(_imgKelpFGRight4, 220, (13 + yOff) // 1, 0, nil, 8, 0, .08, t)
    blitWave(_imgKelpFGRight5, 228, (25 + yOff) // 1, 0, nil, 8, 2, .08, t)
    blitWave(_imgKelpFGRight6, 232, (69 + yOff) // 1, 0, nil, 4, 0, .08, t)

    if _coverLinesFactor[1] > 0 then
        renderCoverLines(1)
    end

    if _underwaterLogoTopmost then
        renderEndLogo()
    end
end

function bdrUnderwaterScene(scanline)
    vbank(0)
    if _underwaterBGParticlesEnabled then
        core_grad_bdr_offset(scanline, _voxGradLakes1, 2, (50 * _localTimer.elapsed) // 1)
    end
    core_grad_bdr_offset(scanline, _gradUnderwater, 15, _underwaterGradPosY[1] // 1)
    core_grad_bdr_offset(scanline, _gradUnderwaterBrightMix, 14, _underwaterGradPosY[1] // 1)
end

--- HIDDEN EXECUTE


function renderHiddenBG(yoff)
    line(0, 32 + yoff, 240, 32 + yoff, 6)
    line(0, 103 + yoff, 240, 103 + yoff, 6)
    line(0, 121 + yoff, 240, 121 + yoff, 6)
end

function renderHiddenTitle(x, y, colOutline, colBody)
    core_pal_swap(13, colOutline)
    core_pal_swap(14, colOutline)
    core_pal_swap(15, colOutline)

    for j = -4, 8, 4 do
        for i = -1, 1, 1 do
            if i ~= 0 and j ~= 4 then
                font(_hiddenTitle, x + i, y + j, 0, 8, 8, false, 8)
            end
        end
    end

    core_pal_swap(13, colBody)
    core_pal_swap(14, colBody)
    core_pal_swap(15, colBody)

    for j = -3, 3, 3 do
        font(_hiddenTitle, x, y + j, 0, 8, 8, false, 8)
    end

    core_pal_swap(13, 13)
    core_pal_swap(14, 14)
    core_pal_swap(15, 15)
end

function renderHiddenDelayRects()
    -- 12x8 tiles fit perfectly.
    -- Alternative: 15x9 tiles of 16x15px. Results in just 1 pixel row missing at bottom.
    local numW, numH, w, h, cnt = 12, 8, 20, 17, 1
    for j = 1, numH do
        for i = 1, numW do
            core_dither_rect((i - 1) * w, (j - 1) * h, w, h, 0,
                1 -
                (_hiddenCoverProgress[1] * 2 * _hiddenDelayFactor - _hiddenDelayMap[cnt] / (_hiddenDelayMapMaxVal / _hiddenDelayFactor)),
                CoreDitherMatrixWildBayer8x8)
            cnt = cnt + 1
        end
    end
end

function renderHiddenScroller(y)
    core_pal_swap(13, 12)
    core_pal_swap(14, 14)
    core_pal_swap(15, 12)
    font(_hiddenScrollText, _hiddenScrollX, y + 1, 0, 4, 8, false, 1)

    core_pal_swap(13, 13)
    core_pal_swap(14, 14)
    core_pal_swap(15, 15)
    local txtWidth = font(_hiddenScrollText, _hiddenScrollX, y, 0, 4, 8, false, 1)

    _hiddenScrollX = _hiddenScrollX - 1
    if _hiddenScrollX < -txtWidth - 20 then
        _hiddenScrollX = 400
    end
end

function renderHiddenScene(t)
    core_sound_play(_hiddenTracklist, true)
    core_sound_update(_soundState)

    cls(0)
    local x = -132
    local xoff = 150 * sin(t.elapsed * 1.5)
    local yoff = -10

    renderHiddenBG(yoff)
    renderHiddenTitle(x + xoff, 46 + yoff, 6, 0)

    if _hiddenCoverProgress[1] < 1 then
        renderHiddenDelayRects()
    end

    renderHiddenScroller(110 + yoff)
end

function bdrHiddenScene(scanline)
    local off = (_localTimer.elapsed * 100) // 1
    core_grad_bdr_offset(scanline, _gradHidden, 6, off)
end

-------------------------------------------------------------------------------
--- SOUND SYNC
-------------------------------------------------------------------------------

function handleSyncKick(soundState)
    _syncKick4 = 1
end

function handleVoxLogoSyncSnare(soundState)
    if soundState.pattern == 0 then
        if soundState.row == 28
            or soundState.row == 44
            or soundState.row == 60
        then
            _voxLogoSyncSnare8 = 1
        end
    elseif soundState.pattern == 1 then
        if soundState.row == 12
            or soundState.row == 28
            or soundState.row == 44
        then
            _voxLogoSyncSnare8 = 1
        end
    end
end

function handleSyncSnare(soundState)
    _syncSnare4 = 1
    _syncSnare8 = 1

    if core_anim_is_running(_schedule, AnimNames.BLOB) then
        if soundState.pattern >= 2 and soundState.pattern <= 3 then
            if (soundState.pattern == 2 and soundState.row >= 4)
                or (soundState.pattern == 3 and soundState.row <= 58)
            then
                _blobSyncSnare = 1
                _blobListIdx = (_blobListIdx % #_blobList) + 1
            end
        end
    end

    if core_anim_is_running(_schedule, AnimNames.LISSA) then
        if soundState.pattern >= 6 then
            _lissaSyncColor = 1
        end
    end

    if core_anim_is_running(_schedule, AnimNames.TRANSIT2VOX) or core_anim_is_running(_schedule, AnimNames.VOX) then
        handleVoxLogoSyncSnare(soundState)
    end
end

function handleVoxSyncKickOrSnare(soundState)
    if soundState.pattern > 2 then
        return
    end

    if soundState.pattern == 2 then
        if soundState.row <= 48 then
            _voxKickSnare4 = 1
        end

        if soundState.row >= 48 then
            _voxStripesModeBlackEnables = true
        end
    end
end

function handleSyncKickOrSnare(soundState)
    _syncKickSnare4 = 1

    if core_anim_is_running(_schedule, AnimNames.VOX) then
        handleVoxSyncKickOrSnare(soundState)
    end
end

function handleRunnerSyncCustom(soundState)
    if soundState.track ~= 2 then
        return
    end

    if
        soundState.row == 2
        or soundState.row == 6
        or soundState.row == 10
        or soundState.row == 14
        or soundState.row == 18
        or soundState.row == 22
        or soundState.row == 26
        or soundState.row == 30
        or soundState.row == 34
        or soundState.row == 38
        or soundState.row == 42
        or soundState.row == 46
        or soundState.row == 50
        or soundState.row == 54
        or soundState.row == 58
        or soundState.row == 62
    then
        _runnerSyncSnare = 1
    end
end

function handleLissaSyncCustom(soundState)
    if soundState.pattern >= 5 and soundState.pattern <= 7 then
        if soundState.row == 12
            or soundState.row == 28
            or soundState.row == 44
            or soundState.row == 60
        then
            _lissaRotVelocity = _lissaRotImpulse
            _lissaSyncColor = 1
        end
    end

    if soundState.pattern == 5 then
        if soundState.row == 60 then
            _lissaRotVelocity = -_lissaRotImpulse * 1.5
            _lissaSyncColor = 1
        end
        if soundState.row == 62 then
            _lissaRotVelocity = _lissaRotImpulse
            _lissaSyncColor = 1
        end
    end
end

function handleSync(soundState)
    local isKick = (soundState.row) % 8 == 0 and core_sound_not_fired(soundState)
    local isSnare = (soundState.row + 4) % 8 == 0 and core_sound_not_fired(soundState)


    if core_anim_is_running(_schedule, AnimNames.LISSA) then
        handleLissaSyncCustom(soundState)
    end

    if core_anim_is_running(_schedule, AnimNames.HAVE2RUN) or core_anim_is_running(_schedule, AnimNames.RUNNER) then
        handleRunnerSyncCustom(soundState)
    end

    if isKick then
        core_sound_fire(soundState)
        handleSyncKick(soundState)
    end

    if isSnare then
        core_sound_fire(soundState)
        handleSyncSnare(soundState)
    end

    if isKick or isSnare then
        -- `core_sound_fire` not needed as it is executed before for sure.
        handleSyncKickOrSnare(soundState)
    end
end

function updateSyncVariables()
    local d4 = _timer.delta * 4
    local d8 = _timer.delta * 8
    _syncKick4 = core_math_lerp(_syncKick4, 0, d4)
    _syncSnare4 = core_math_lerp(_syncSnare4, 0, d4)
    _syncSnare8 = core_math_lerp(_syncSnare8, 0, d8)
    _syncKickSnare4 = core_math_lerp(_syncKickSnare4, 0, d4)


    if core_anim_is_running(_schedule, AnimNames.BLOB) then
        _blobSyncSnare = core_math_lerp(_blobSyncSnare, 0, d4)
    end
    if core_anim_is_running(_schedule, AnimNames.LISSA) then
        _lissaSyncColor = core_math_lerp(_lissaSyncColor, 0, d4)
    end
    if core_anim_is_running(_schedule, AnimNames.HAVE2RUN) or core_anim_is_running(_schedule, AnimNames.RUNNER) then
        _runnerSyncSnare = core_math_lerp(_runnerSyncSnare, 0, d4)
    end
    if core_anim_is_running(_schedule, AnimNames.TRANSIT2VOX) or core_anim_is_running(_schedule, AnimNames.VOX) then
        _voxKickSnare4 = core_math_lerp(_voxKickSnare4, 0, d4)
        _voxLogoSyncSnare8 = core_math_lerp(_voxLogoSyncSnare8, 0, d8)
    end
end

-------------------------------------------------------------------------------
--- TIC FUNCTIONS
-------------------------------------------------------------------------------

function BOOT()
    -- Hide mouse.
    poke(0x7FC3F, 1, 1)

    -- Border color
    poke(0x3FF8, 0)

    initFont()
    initScreenFaderScene()
    initPresentsScene()
    initTitleScene()
    initBlobsScene()
    initCreditsScene()
    initTransit2LissaScene()
    initLissajousScene()
    initTransit2ShadowScene()
    initShadowScene()
    initHave2RunScene()
    initRunnerScene()
    initTransit2VoxScene()
    initVoxScene()
    initWaterfieldScene()
    initUnderwaterScene()
    initHiddenScene()
end

function BDR(scanline)
    if core_anim_is_running(_schedule, AnimNames.HAVE2RUN) then
        bdrHave2RunScene(scanline)
    elseif core_anim_is_running(_schedule, AnimNames.RUNNER) then
        bdrRunnerScene(scanline)
    elseif core_anim_is_running(_schedule, AnimNames.TRANSIT2VOX) then
        bdrTransit2VoxScene(scanline)
    elseif core_anim_is_running(_schedule, AnimNames.VOX) then
        bdrVoxScene(scanline)
    elseif core_anim_is_running(_schedule, AnimNames.WATERFIELD) then
        bdrWaterfieldScene(scanline)
    elseif core_anim_is_running(_schedule, AnimNames.UNDERWATER) then
        bdrUnderwaterScene(scanline)
    elseif core_anim_is_running(_schedule, AnimNames.HIDDEN) then
        bdrHiddenScene(scanline)
    end
end

-- Initial anim.
_START_AT = AnimNames.STARTUP_DELAY
--_START_AT = AnimNames.BLOB
--_START_AT = AnimNames.LISSA
--_START_AT = AnimNames.TRANSIT2SHADOW
--_START_AT = AnimNames.HAVE2RUN
--_START_AT = AnimNames.TRANSIT2VOX
--_START_AT = AnimNames.WATERFIELD

_schedule.anims[_START_AT].isAutostart = true

-- Configure directly startable scenes. For debugging only.
if _START_AT == AnimNames.BLOB then
    _schedule.anims[AnimNames.BLOB].isAutostart = true
    _tracklist.tracks[2].bank = 0
    _tracklist.tracks[2].pattern = 1
    _tracklist.tracks[2].row = 55
    _tracklist.current = 2 - 1
    _musicStarted = true
elseif _START_AT == AnimNames.LISSA then
    _schedule.anims[AnimNames.LISSA].isAutostart = true
    _tracklist.tracks[2].bank = 0
    _tracklist.tracks[2].pattern = 4
    _tracklist.tracks[2].row = 63
    _tracklist.current = 2 - 1
    _musicStarted = true
elseif _START_AT == AnimNames.TRANSIT2SHADOW then
    _schedule.anims[AnimNames.TRANSIT2SHADOW].isAutostart = true
    _tracklist.tracks[2].bank = 0
    _tracklist.tracks[2].pattern = 7
    _tracklist.tracks[2].row = 54
    _tracklist.current = 2 - 1
    _musicStarted = true
elseif _START_AT == AnimNames.HAVE2RUN then
    _schedule.anims[AnimNames.HAVE2RUN].isAutostart = true
    _tracklist.tracks[2].bank = 0
    _tracklist.tracks[2].pattern = 12
    _tracklist.tracks[2].row = 0
    _tracklist.current = 2 - 1
    _musicStarted = true
elseif _START_AT == AnimNames.TRANSIT2VOX then
    _schedule.anims[AnimNames.TRANSIT2VOX].isAutostart = true
    _tracklist.tracks[3].bank = 0
    _tracklist.tracks[3].pattern = 2
    _tracklist.tracks[3].row = 59
    _tracklist.current = 3 - 1
    _musicStarted = true
elseif _START_AT == AnimNames.WATERFIELD then
    _schedule.anims[AnimNames.WATERFIELD].isAutostart = true
    _tracklist.tracks[4].bank = 0
    _tracklist.tracks[4].pattern = 6
    _tracklist.tracks[4].row = 63
    _tracklist.current = 4 - 1
    _musicStarted = true
end

function TIC()
    core_timer_start(_timer)
    core_timer_update(_timer)
    core_anim_process_schedule(_schedule, _timer)

    if _musicStarted then
        core_sound_play(_tracklist, false)
        core_sound_update(_soundState)
    end

    handleSync(_soundState)

    if core_anim_is_running(_schedule, AnimNames.STARTUP_DELAY) then
        core_anim_update_local_timer(_schedule, AnimNames.STARTUP_DELAY, _localTimer, _timer)
        renderStartupDelayScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.SCREEN_FADER) then
        core_anim_update_local_timer(_schedule, AnimNames.SCREEN_FADER, _localTimer, _timer)
        renderScreenFaderScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.PRESENTS) then
        core_anim_update_local_timer(_schedule, AnimNames.PRESENTS, _localTimer, _timer)
        renderPresentsScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.TITLE) then
        core_anim_update_local_timer(_schedule, AnimNames.TITLE, _localTimer, _timer)
        renderTitleScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.BLOB) then
        core_anim_update_local_timer(_schedule, AnimNames.BLOB, _localTimer, _timer)
        renderBlobScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.CREDITS) then
        core_anim_update_local_timer(_schedule, AnimNames.CREDITS, _localTimer, _timer)
        renderCreditsScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.TRANSIT2LISSA) then
        core_anim_update_local_timer(_schedule, AnimNames.TRANSIT2LISSA, _localTimer, _timer)
        renderTransit2LissaScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.LISSA) then
        core_anim_update_local_timer(_schedule, AnimNames.LISSA, _localTimer, _timer)
        renderLissaScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.TRANSIT2SHADOW) then
        core_anim_update_local_timer(_schedule, AnimNames.TRANSIT2SHADOW, _localTimer, _timer)
        renderTransit2ShadowScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.SHADOW) then
        -- Hack: Shadow scene uses local timer of previous scene,
        --       so that shadow cube sine positions transition continuously.
        core_anim_update_local_timer(_schedule, AnimNames.TRANSIT2SHADOW, _localTimer, _timer)
        renderShadowScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.HAVE2RUN) then
        core_anim_update_local_timer(_schedule, AnimNames.HAVE2RUN, _localTimer, _timer)
        renderHave2RunScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.RUNNER) then
        -- Hack: Runner scene uses local timer of previous scene,
        --       so that runner sine positions transition continuously.
        core_anim_update_local_timer(_schedule, AnimNames.HAVE2RUN, _localTimer, _timer)
        renderRunnerScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.TRANSIT2VOX) then
        core_anim_update_local_timer(_schedule, AnimNames.TRANSIT2VOX, _localTimer, _timer)
        renderTransit2VoxScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.VOX) then
        core_anim_update_local_timer(_schedule, AnimNames.VOX, _localTimer, _timer)
        renderVoxScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.WATERFIELD) then
        core_anim_update_local_timer(_schedule, AnimNames.WATERFIELD, _localTimer, _timer)
        renderWaterfieldScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.UNDERWATER) then
        -- Hack: Underwater scene uses local timer of previous scene,
        --       so that BG bubbles sine positions transition continuously.
        core_anim_update_local_timer(_schedule, AnimNames.WATERFIELD, _localTimer, _timer)
        renderUnderwaterScene(_localTimer)
    elseif core_anim_is_running(_schedule, AnimNames.HIDDEN) then
        core_anim_update_local_timer(_schedule, AnimNames.HIDDEN, _localTimer, _timer)
        renderHiddenScene(_localTimer)
    end

    updateSyncVariables()
    core_timer_update_global_frame_counter()
end

-- <WAVES>
-- 000:0123456789abcdef0123456789abcdef
-- 001:001234566789abcd1234567889abcdef
-- 002:00122345567889ab345667899abccdef
-- 003:002233445566779955778899aabbccee
-- 004:00112233445566778899aabbccddeeff
-- 005:00112233445566778877665544332211
-- 006:489abcdeffedcba98765432100123456
-- 007:789abcdeeeedcba98765432111123456
-- 008:789abcddddddcba98765432222223456
-- 009:789abccccccccba98765433333333456
-- 010:789abbbbbbbbbba98765444444444456
-- 011:789aaaaaaaaaaaa98765555555555556
-- 012:78999999999999998766666666666666
-- 013:ffffffffffffffffffffffffffffffff
-- 015:eeeeeeeeeeeeeee000000000000eeeee
-- </WAVES>

-- <SFX>
-- 000:00001100220033004400540064009400c400e400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400102000000000
-- 001:04001300240033004400530064009300c400e400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400102000000000
-- 002:00001100220033004400540064009400c400e400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400102000000000
-- 003:04001300220031004200530064009400c400e400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400267000000000
-- 004:0ff006d006b016a0368056606650764086409630b63fc62cd619e608e608f600f600f600f600f600f600f600f600f600f600f600f600f600f600f600204000000000
-- 005:0ef02ee01ed0fed04ec0feb05ea0fe906e80fe708e60fe50ae40fe30ce20fe20de00fe00ee00fe00ee00fe00ee00fe00fe00fe00fe00fe00fe00fe00302000000000
-- 006:0df006d01df016a0368056606650764086409630b63fc62cd619e608f6f8f6f0fef0fef0fef0fef0fef0fef0fef0fef0fef0fef0fef0fef0fef0fef0209000000000
-- 007:b6c0770088c09900aac0ba00c9c0d800d2c0c300b400b400b200b200b400b400b400b400b400b400b400b400b400b400b400b400b400b400b400b400369026710200
-- 008:60c0710082c09300a4c0b400c3c0d200d2c0c300b400b400b200b200b400b400b400b400b400b400b400b400b400b400b400b400b400b400b400b400363026710200
-- 009:7000710082009300a400b400b300b200b200b300b400b400b200b200b400b400b400b400b400b400b400b400b400b400b400b400b400b400b400b40036b02601000a
-- 010:35f045d055a0757085409520b500c500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500402000000000
-- 011:950045210532356355a585e6b5f7e517f510f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500f500404000090600
-- 012:000001000200030004000400030002000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000152009000000
-- 013:000031007200a300f400f400f300f200f100f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f00015200c040000
-- 014:e000d100c200b300a4009400830072006100500040003000200010000000000000000000000000000000000000000000000000000000000000000000350009000000
-- 015:af00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0022a000020000
-- 016:90207040707071c07200730074007400740003000200010002000200010001000000000000000000000000000000000000000000000000000000000035200c010405
-- 017:90207030707071c07200730074007400740003000200010002000200010001000000000000000000000000000000000000000000000000000000000025200c010405
-- 018:90107050707071a07200730074007400740003000200010002000200010001000000000000000000000000000000000000000000000000000000000035200c010405
-- 019:90007030708071a07200730074007400740003000200010002000200010001000000000000000000000000000000000000000000000000000000000035200c010405
-- 020:e020d040c070b1c0a2009300840074006400530042003100220012000100110020003000400050006000700080009000a000b000c000d000e000f00036500c000405
-- 025:0e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e0040b000000000
-- 027:7f00ef000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f00363000020000
-- 028:def0ede0cedfeecebebeeeafae90ee819e72ee618e50ee4f7e30ee206e10ee006e00ee000e00ee000e00ee000e00ee000e00ee000e00ee000e00ee00301002f2000b
-- 029:0ef71ed61ed52eb53eb43ea44ea34e935e825e816e716e717e607e508e5f8e4f9e4e9e4eae3ebe2dbe2dbe2dce1dce1cde0cde0cde0bee0aee0aee09302000000000
-- 030:bef0e6e08ed0eecf6ebdeeab6e99ee8a6e7cee6d6e5eee4f6e30ee206e10ee006e00ee000e00ee000e00ee000e00ee000e00ee000e00ee000e00ee00275002f2000b
-- 031:e610d690c659beffae5d9ea28e277e8a7ed77e6d7e1e7eaf7e507e207ed07e007e007e007e007e007e007e007e007e007e007e007e007e007e007e003d2002f20f0b
-- 032:06c00700080009000a000b000c000b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000362062000000
-- 036:7df076d07dc086a09d80a660bd50c640dd30d620dd1fe60ced09e608fd08f600ee00ee00ee00ee00ee00ee00ee00ee00ee00ee00ee00ee00ee00ee00219002b80000
-- 040:a6008700680059006a008b00ac00cb00e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000e000504062000000
-- 048:00001100220033004400540064009400c400e400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400379000000000
-- 049:0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00307000000000
-- 063:060006000600060006000600060006000600060006000600060006000600060006000600060006000600060006000600060006000600060006000600307000000000
-- </SFX>

-- <PATTERNS>
-- 000:d00042600012600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600004d00042600004600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600002d00042900012900022900002d00042900012900022900004d00042900012900022900002d00042900012900022900004d00042900004900022900002d00042900012900022900004d00042900012900022900002d00042900012900022900002
-- 001:6ff1170ff0000881000000000000000000000ff1000ff0000881000000000000000000000ff1000000000881000000006ff1190000000ee1000000000dd1000000000cc1000000000bb1000000000aa1000000000991000000000881000000006ff1270ff0000881000000000000000000000ff1000ff0000881000000000000000000000ff1000000000881000000006ff1290000000ee1000000000dd1000000000cc1000000000bb1000000000aa100000000099100000000088100000000
-- 002:6ff1370ff0000881000000000000000000000ff1000ff0000881000000000000000000000ff1000000000881000000006ff1390000000ee1000000000dd1000000000cc1000000000bb1000000000aa1000000000991000000000881000000006ff1070ff0000881000000000000000000000ff1000ff0000881000000000000000000000ff1000000000881000000006ff1090000000ee1000000000dd1000000000cc1000000000bb1000000000aa100000000099100000000088100000000
-- 003:d00042e00012e00022e00002d00042e00012e00022e00004d00042e00012e00022e00002d00042e00012e00022e00004d00042e00004e00022e00002d00042e00012e00022e00004d00042e00012e00022e00002d00042e00012e00022e00002d00042600012600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600004d00042600004600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600002
-- 004:0000006ff1fa00210000f10068815a0a01006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000006ff1fa00210000f10068815a0a01006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000004ff1fa00210000f10068815a0a01004ff1fa00210000f10002010000000000000068815a0a01004ff1fa0021000000004ff1fa00210000f10068815a0a01004ff1fa00210000f10002010000000000000068815a0a01004ff1fa002100
-- 005:0000006ff1fa00210000f10068815a0a01006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000006ff1fa00210000f10068815a0a01006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000006ff1fa00210000f10068815a0a01006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000006ff1fa00210000f10068815a0a01006ff1fa00210000f10002010000000000000068815a0a01006ff1fa002100
-- 006:000000680117000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000680127000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:6231c2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021100000000000000000000011100000000000000000000
-- 008:d00042600012600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600004d00042600004600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600002d00042600012600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600004d00042600004600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600002
-- 009:0000006ff1fa00210000f1000201000000006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000006ff1fa00210000f1000201000000006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000006ff1fa00210000f1000201000000006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000006ff1fa00210000f1000201000000006ff1fa00210000f10002010000000000000068815a0a01006ff1fa002100
-- 010:0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006ff1fc5404f0000000000000000000000000000000000000
-- 011:d00042600012600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600004d00042600004600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600002d00042600012600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600004d00042600004600022600002d00042600012600022600004d000420000000000000000006aa146604146f4c1449c4144
-- 012:6321c40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004006881f26784fa0aa1000bb1000cc1000dd1000ee1000ff100000000000000000000000000000000000000000000000000
-- 013:0000006ff1fa00210000f1000201000000006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000006ff1fa00210000f1000201000000006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000006ff1fa00210000f1000201000000006ff1fa00210000f10002010000000000000068815a0a01006ff1fa0021000000006ff1fa00210000f1000201000000006ff1fa00210000f100020100000100000000000000000000000000000000
-- 014:6231e2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:0000006801370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006801070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006ff1fc5404f0000000000000000000000000000000000000
-- 016:00000068011700000001f6006fa1980000005000986084980004000000008000980000000000000441009fa19804f60000000000000061f698000000b00098d1049800040004f60000000000000000000000000008610006410004210001f600dfa19800000010000000000040009a000000b00098d04498100000000400b0009800000000000000000091f69800000002f60000000003f60000000004f6000000000e91000c81000a7100086100064100043100032100021100011100000000
-- 017:efa19801f600043100000000dfa1980000009000980000000441000000006fa198000000000000000000d00096e0849600040001f60001f600000000000000000000086100000000000000000000042100000000efa196000000043100000000dfa1960000000431000000006fa198000000a04498000000100000000400b00098000000000000000000a1f69800000002f60000000003f60000000004f6000000000e91000c81000a7100086100064100043100032100021100011100000000
-- 018:00000068011700000001f6006fa1980000005000986084980004000000008000980000000000000441009fa19804f60000000000000041f69a000000b00098d1049800040004f60000000000000000000000000008610006410004210001f600efa19800000010000000000040009a000000b00098d04498100000000400b00098000000000000000000d1f69800000002f60000000003f60000000004f6000000000e91000c81000a71000751000531000321000211001ff10061f698900098
-- 019:efa19801f600043100000000dfa1980000009000980000000431000000006fa198000000000000000000d00096e0849600040001f60001f600000000000000000000086100000000000000000000043100000000efa196000000043100000000dfa196000000043100000000afa198000000a04498000000000000010400b10098000000000000020400d1f69800000002f60000000003f60000000004f6000000000e91000c81000a7100086100064100043100032100021100011100000000
-- 020:6a4109020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800039000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 021:d00042600012600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600004d00042600004600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600002d00042600012600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600004d00042600004600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600002
-- 022:6ff1866ff19800010000f10068818a0a01006ff1fa00010000f1000001006f018600f10068815a0a01006ff1fa0001000000006ff18660019800f10068818a0a01006ff1fa00010000f1000001006f018600f10068815a0a01006ff1fa0001006ff1866ff19800010000f10068818a0a01006ff1fa00010000f1000001006f018600f10068815a0a01006ff1fa0001000000006ff18660019800f10068818a0a01006ff1fa00010000f1000001006f018600f10068815a0a01006ff1fa000100
-- 023:6f119601f1000ff1000f110001f1000ff1000f110001f1000181006181090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f119601f1000ff1000f110001f1000ff1000f110001f100018100818139000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 024:6321e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 025:6000d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 026:6f01070f11000f21000f31000f41000f51000f61000f71000f81000f91000fa1000fb1000fc1000fd1000fe1000ff1008ff1370ef1000df1000cf1000bf1000af10009f10008f10007f10006f10005f10004f10003f10002f10001f10000f100b0f10701f10002f10003f10004f10005f10006f10007f10008f10009f1000af1000bf1000cf1000df1000ef1000ff1006ff1090fe1000fd1000fc1000fb1000fa1000f91000f81000f71000f61000f51000f41000f31000f21000f11000f0100
-- 027:6000426000426000646181d80000006ff1fa6ff1646000f860000b60004260006468810b0000006ff1fa6000640000006000426000426000646181d80000006ff1fa6ff1646000f880003b60004260006488813b0000006ff1fa6000640000006000426000426000646181d80000006ff1fa6ff1646000f8b0000b600042600064b8810b0000006ff1fa6000640000006000426000426000646181d80000006ff1fa6ff1646000f860000b60004260006468810b0000006ff1fa600064000000
-- 028:6ff18800000062a1888ff18800000082a188aff188000000a2a188dff188000000d2a1886ff18a000000dff18862a18a4ff18a00000042a18afff188000000f2a188dff188000000d2a188000000d161880000000000000000000000000000006ff18800000062a1888ff18800000082a188aff188000000a2a188dff188000000d2a188aff1880000008ff188a2a188aff188000000a2a188000000a16188000000000000000000000000000000000000000000000000a60188000000000000
-- 029:9000d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 030:9f01070f11000f21000f31000f41000f51000f61000f71000f81000f91000fa1000fb1000fc1000fd1000fe1000ff100bff1370ef1000df1000cf1000bf1000af10009f10008f10007f10006f10005f10004f10003f10002f10001f10000f100e0f10701f10002f10003f10004f10005f10006f10007f10008f10009f1000af1000bf1000cf1000df1000ef1000ff1009ff1090fe1000fd1000fc1000fb1000fa1000f91000f81000f71000f61000f51000f41000f31000f21000f11000f0100
-- 031:6000426000426000649181d80000009ff1fa6ff1649000f89000096000426000649881090000009ff1fa6000640000006000426000426000649181d80000009ff1fa6ff1649000f8b00039600042600064b881390000009ff1fa6000640000006000426000426000649181d80000009ff1fa6ff1649000f8e00009600042600064e881090000009ff1fa6000640000006000426000426000649181d80000009ff1fa6ff1649000f890000b60004260006498810b0000009ff1fa600064000000
-- 032:9ff18800000092a188bff188000000b2a188dff188000000d2a1884ff18a00000042a18a9ff18a0000004ff18a92a18a7ff18a00000072a18a6ff18a00000062a18a4ff18a00000042a18a00000041618a0000000000000000000000000000009ff18800000092a188bff188000000b2a188dff188000000d2a1884ff18a00000042a18adff188000000bff188d2a188dff188000000d2a188000000d16188000000000000000000000000000000000000000000000000000000000000000000
-- 033:d00042600012600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600004d00042600004600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600002d00042600012600022600002d00042600012600022600004d00042600012600022600002d00042600012600022600004d00042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 034:6ff1866ff19800010000f10068818a0a01006ff1fa00010000f1000001006f018600f10068815a0a01006ff1fa0001000000006ff18660019800f10068818a0a01006ff1fa00010000f1000001006f018600f10068815a0a01006ff1fa0001006ff1866ff19800010000f10068818a0a01006ff1fa00010000f1000001006f018600f10068815a0a01006ff1fa0001000000006ff18660019800f10068818a0a01006ff1fa00010000f100000100000000000000000000000000000000000000
-- 035:6000d20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000d20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000d20000000000000000000000000000000000000000000000000000000000000000006ff1d2088100044100022100
-- 036:6f01070f11000f21000f31000f41000f51000f61000f71000f81000f91000fa1000fb1000fc1000fd1000fe1000ff100aff1370ef1000df1000cf1000bf1000af10009f10008f10007f10006f10005f10004f10003f10002f10001f10000f100e0f10701f10002f10003f10004f10005f10006f10007f10008f10009f1000af1000bf1000cf1000df1000ef1000ff100aff1390fe1000fd1000fc1000fb1000fa1000f91000f81000f71000f61000f51000f41000f31000c21000a1100080100
-- 037:6004426000426000646181d80000006ff1fa6ff1646000f86000096000426000646881090000006ff1fa7000640000006000426000426000648181d80000008ff1fa6ff1648000f8a00039600042600064a881390000008ff1fa6000640000006000426000426000646181d80000006ff1fa6ff1646000f8e00009600042600064e881090000006ff1fa6000640000006000426000426000646181d80000006ff1fa6ff1646000f86000096000426000646881096ff142000000000000000000
-- 038:00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009040090019b811197012100013100014100014100014100014100014100
-- 039:6a410904a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000a410004a1000841000471000641000451000441000431000241000411000041000401000041000401000041000401000041000411000241000431000441000451000641000471000841000491000a410004a1000a310004a1000a210004a1000a110003a100
-- 040:6ff1866ff19800010000f10068818a0a01006ff1fa00010000f1000001006f018600f10000000000000000000000000068848400f00001f00002f00003f00004f00005f00006f00007f00008f00009f0000af0000bf0000cf0000df0000ef00080f1f701f10002f10003f10004f10005f10006f10007f10008f10009f1000af1000bf1000cf1000df1000ef1000fe1000fd1000fc1000fb1000fa1000f91000f81000f71000f6100022100000000000000000000000000000000000000000000
-- 041:0000006ff1fa64011760f1fa68815a0a01006ff1fa00210000f10064011700000000000068815a0a01006ff1fa6801fa0021006ff1fa64011960f1fa68815a0a01006ff1fa00210000f10064011900000000000068815a0a01006ff1fa0021000000004ff1fa64012740f1fa68815a0a01004ff1fa00210000f10064012700000000000068815a0a01004ff1fa0021000000004ff1fa64012940f1fa68815a0a01004ff1fa00210000f10064012900000000000068815a0a01004ff1fa002100
-- 042:0000006ff1fa64013760f1fa68815a0a01006ff1fa00210000f10064013700000000000068815a0a01006ff1fa6801fa0021006ff1fa64013960f1fa68815a0a01006ff1fa00210000f10064013900000000000068815a0a01006ff1fa0021000000006ff1fa64010760f1fa68815a0a01006ff1fa00210000f10064010700000000000068815a0a01006ff1fa0021000000006ff1fa64010960f1fa68815a0a01006ff1fa00210000f10064010900000000000068815a0a01006ff1fa002100
-- 043:6a4109000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800039000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094100084100074100064100054100044100034100024100
-- 044:6f119601f1000ff1000f110001f1000ff1000f110001f1000181006181090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001008c049181019d020100030100040100040100040100040100040100000000000000041100041100042100042100043100043100044100034100024100014100004100003100003100001100000000000000000000000000000000000000000000000100000000000000000000
-- 045:6481996604930000000000000000000000000000000000000000000000000241000131000121000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0400400091000000000000000000000000000000000000000000011100000000000000000000000000000000000000000000
-- 046:6001a209f10060a4ac6001a20f91006074ac0000000000000000000000000000006001a209f10060a4ac6001a20f91006074ac0000006001a20ff1006084ac6001a208910060a4ac6001a20441006084ac6001a202210060a4ac6001a2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040400da4902000000000000000000000000000000000000000000000000000000
-- 047:6001a20ff10060a4ac6001a20ff1006074bab001b8bf01b800f1008f01b80601000401006001a204810060a4ac6001a20841006074ac0000006001a20841006084ac6001a208410060a4ac6001a2b081b6080100004100000100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 048:6ff1c20ee1000dd1000cc1000bb1000aa1000991000881000771000661000551000441000331006001930011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f04000000000000000000000f0400400091000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000
-- 049:0000000000000000000230000000006011e20000000121000231000000000000000000000000000000000000000000000120000000009231e2000000000000000000000000000000000000000000012000000000e231e20000000000000000000000000000000000000000000120000000006231e2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 050:0000000000000000000010006101d50101000000000000006881e50661000441000221000111000001000000000000000000000660009881e5066100044100022100011100000100000000000000000000000000d881e50661000441000221000111000001000000000000000000000e04006881e10771000661000551000441000331000221000111000101000011000101000011000101000011000100000c04000c04006341c9078100087100067100065100045100043100023100021100
-- 051:0000000000006021d70011000000000001006001ff0804006081fd0701000061000501000041000301000021000101000011006001fd6081fb0701000061000501000041000301000021000101000011006001fb6081f90701000061000501000041000301000021000101000011006001fd6081fb070100006100050100004100030100002100010100001100010100001100010100001100010100001100010100001100010100000100621147000000000000000000632147000000000000
-- 052:0000000000000000000000000000000000000000000000006081c70061000041000021000011000001000000000000000000000000006081c70061000041000021000011000001000000000000000000000000006081c70061000041000021000011000001000000000000000000000000006081c70061000041000021000011000001006111b7022100023100024100025100026100027100028100028100026100024100022100623147000000000000000000645149000000000000000000
-- 053:efa19801f600043100000000dfa1980000009000980000000431000000006fa198000000000000000000efa19801f600043100000000dfa1980000000431000000009fa1980000006fa198000000043100000000efa1960000000431000204004fa19861f69800000000000000000000000000000000000000000000000000000000000000000000000000000000000002f60000000003f60000000004f6000000000e91000c81000a7100086100064100043100032100021100011100000000
-- </PATTERNS>

-- <PATTERNS1>
-- 000:dff902000000da4902000000dff9440a4100dff902000000000000000000da4902000000dff9440a4100d4a904000000dff902000000dff902000000dff9440a4100dff902000000000000000000da4902000000dff9440a410004a1000a4100dff902000000da4902000000dff9440a4100dff902000000000000000000da4902000000dff9440a4100d4a904000000dff902000000dff902000000dff9440a4100dff902000000000000000000da4902000000dff944da4902d4a904da4906
-- 001:dff902000000da4902000000d00804000000000000000000000000000000000000000000012100000000000000000000000000000000da4902000000da4904000000000000000000000000000000000000000000012100000000000000000000dff902000000da4902000000d00804000000000000000000000000000000000000000000012100000000000000000000000000000000da4902000000d00804000000000000000000000000000000000000000000012100000000000000000000
-- 002:9ff9020000009a4902000000dff9440a41009ff9040000000000000000009a4904000000dff9440a410094a9040000009ff9020000009ff902000000dff9440a41009ff9040000000000000000009a4904000000dff9440a410004a1000a41006ff9020000006a4902000000dff9440a41006ff9040000000000000000006a4904000000dff9440a410064a9040000008ff9020000008ff902000000dff9440a41008ff9040000000000000000008a4904000000dff9448a490284a9048a4906
-- 003:9ff9020000009a49020000009008040000000000000000000000000000000000000000000121000000000000000000000000000000009a49020000009a49040000000000000000000000000000000000000000000121000000000000000000006a49020000006a49020000006008040000000000000000000000000000000000000000000121000000000000000000000000000000008a4902000000800804000000000000000000000000000000000000000000012100000000000000000000
-- 004:dff902000000da4902000000da49040000000941000000000841000040000741000000000621000000000521000000000421000000000221000000000211000100000211000000006271b80681006f81b608f1000f8100dc41b80641009441b8022100000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006721b608410068f1b80f810008f100d4c1b60461009241b6000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:54c98a60088a54a88ad4a88884a88864a88854a888d0088650088a60088a50088ad00888800888600888500888d0088650088a60088a50088ad00888800888600888500888d0088650088a60088a50088ad00888800888600888500888d00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886
-- 010:00000058298a60088a54a88ad4a88884a88864a88854a888d0088650088a60088a50088ad00888800888600888500888d0088650088a60088a50088ad00888800888600888500888d0088650088a60088a50088ad00888800888600888500888d00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886
-- 011:00000000000000000052598a60088a54a88ad4a88884a88864a88854a888d0088650088a60088a50088ad00888800888600888500888d0088650088a60088a50088ad00888800888600888500888d0088650088a60088a50088ad00888800888600888500888d00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888
-- 012:b8298650088a60088a54a88ad4a88884a88864a88854a888d0088650088a60088a50088ad00888800888600888500888d0088650088a60088a50088ad00888800888600888500888d0088650088a60088a50088ad00888800888600888500888d00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886
-- 013:425988f00886b0088652598a60088a54a88ad4a88884a88864a88854a888d0088650088a60088a50088ad00888800888600888500888d0088650088a60088a50088ad00888800888600888500888d0088650088a60088a50088ad00888800888600888500888d00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888
-- 014:f4c98840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886d00888f00888d00888900888400888f00886d00886900886d00888f00888d00888900888400888f00886d00886900886d00888f00888d00888900888400888f00886d00886900886d00888f00888d00888900888400888f00886d00886900886f0088840088af00888c00888800888600888f00886c00886f0088840088af00888c00888800888600888f00886c00886
-- 015:000000f8298840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886d00888f00888d00888900888400888f00886d00886900886d00888f00888d00888900888400888f00886d00886900886d00888f00888d00888900888400888f00886d00886900886d00888f00888d00888900888400888f00886d00886900886f0088840088af00888c00888800888600888f00886c00886f0088840088af00888c00888800888600888f00886
-- 016:54c98a64c98a54c98ad4c98884c98864c98854b988d4b98654b98a64b98a54b98ad4b98883a98863a98853a988d3a98653a98a63a98a53998ad39988839988639988539988d3998652898a62898a52898ad28988828988628988527988d2798652798a62798a52798ad27988826988626988526988d2698652698a62698a52598ad25988825988625988525988d2598652498a62498a52498ad24988824988624988523988d2398652398a62398a52298ad22988822988622988522988d22986
-- 017:00000058298a68298a58298ad82988882988682988582988d8298657298a67298a57298ad72988872988672988572988d7298657298a66298a56298ad62988862988662988562988d6298656298a66298a55298ad52988852988652988552988d5298655298a65298a54298ad42988842988642988542988d4298654298a64298a54298ad32988832988632988532988d3298653298a63298a53298ad22988822988622988522988d2298652298a62298a52298ad22988822988611988511988
-- 018:000000f8298840088af00888b00888600888400888f00886b00886f0088840088af00888b00888600888400888f00886b00886d00888f00888d00888900888400888f00886d00886900886d00888f00888d00888900888400888f00886d00886900886d00888f00888d008886271b80681006f81b608f1000f8100dc41b80641009441b8982988400888f00886d00886900886f0088840088af00888c00888800888600888f00886c00886f0088840088af00888c00888800888600888f00886
-- 019:5ff178000000000000003400508178000000dff176000000000000000000d08176000000000000000000d401760000000000000000008ff1760000005000780000006000780000008000780000000000006ff1780000000000005ff1780000006000780000000000000000005ff178000000fff176000000000000000000f08176000000000000000000f40176000000000000000000f02176000000000000000000000000000000000000000000000000000000000000000000d88176fcc176
-- 020:5ff1780000000000000034005081780000008ff178000000000000000000808178000000000000000000840178000000000000000000dff178000000b000780000008000780000008000780000000000006ff1780000000000005ff1780000006000780000000000000000005ff178000000fff176000000000000000000f08176000000000000000000f40176000000000000000000f02176000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 021:f00076000000000000003400f081760000006ff178000000000000000000608178000000fff176000000d00076000000000000000000d08176000000000000000000d40176000000000000000000d02176000000000000000000000000000000dff176000000000000000000d081760000004ff178000000000000000000408178000000dff176000000f00076000000000000000000f08176000000000000000000f40176000000000000000000f02176000000000000000000000000000000
-- 022:5ff1780000000000000034005081780000008ff178000000000000000000808178000000000000000000840178000000000000000000dff178000000b000780000008000780000008000780000000000006ff1780000000000005ff1780000006000780000000000000000008ff17800c400aff178000000000000000000a08178000000000000000000a40178000000000000000000a02178000000000000000000b441b66104b66cf1b80fc1006f81b60ff1000f8100dc41b80841009441b8
-- 025:6000d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 026:6f01070f11000f21000f31000f41000f51000f61000f71000f81000f91000fa1000fb1000fc1000fd1000fe1000ff1008ff1370ef1000df1000cf1000bf1000af10009f10008f10007f10006f10005f10004f10003f10002f10001f10000f100b0f10701f10002f10003f10004f10005f10006f10007f10008f10009f1000af1000bf1000cf1000df1000ef1000ff1006ff1090fe1000fd1000fc1000fb1000fa1000f91000f81000f71000f61000f51000f41000f31000f21000f11000f0100
-- 027:6000426000426000646181d80000006ff1fa6ff1646000f860000b60004260006468810b0000006ff1fa6000640000006000426000426000646181d80000006ff1fa6ff1646000f880003b60004260006488813b0000006ff1fa6000640000006000426000426000646181d80000006ff1fa6ff1646000f8b0000b600042600064b8810b0000006ff1fa6000640000006000426000426000646181d80000006ff1fa6ff1646000f860000b60004260006468810b0000006ff1fa600064000000
-- 028:6ff18800000062a1888ff18800000082a188aff188000000a2a188dff188000000d2a1886ff18a000000dff18862a18a4ff18a00000042a18afff188000000f2a188dff188000000d2a188000000d161880000000000000000000000000000006ff18800000062a1888ff18800000082a188aff188000000a2a188dff188000000d2a188aff1880000008ff188a2a188aff188000000a2a188000000a16188000000000000000000000000000000000000000000000000a60188000000000000
-- 029:9000d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 030:9f01070f11000f21000f31000f41000f51000f61000f71000f81000f91000fa1000fb1000fc1000fd1000fe1000ff100bff1370ef1000df1000cf1000bf1000af10009f10008f10007f10006f10005f10004f10003f10002f10001f10000f100e0f10701f10002f10003f10004f10005f10006f10007f10008f10009f1000af1000bf1000cf1000df1000ef1000ff1009ff1090fe1000fd1000fc1000fb1000fa1000f91000f81000f71000f61000f51000f41000f31000f21000f11000f0100
-- 031:6000426000426000649181d80000009ff1fa6ff1649000f89000096000426000649881090000009ff1fa6000640000006000426000426000649181d80000009ff1fa6ff1649000f8b00039600042600064b881390000009ff1fa6000640000006000426000426000649181d80000009ff1fa6ff1649000f8e00009600042600064e881090000009ff1fa6000640000006000426000426000649181d80000009ff1fa6ff1649000f890000b60004260006498810b0000009ff1fa600064000000
-- 032:9ff18800000092a188bff188000000b2a188dff188000000d2a1884ff18a00000042a18a9ff18a0000004ff18a92a18a7ff18a00000072a18a6ff18a00000062a18a4ff18a00000042a18a00000041618a0000000000000000000000000000009ff18800000092a188bff188000000b2a188dff188000000d2a1884ff18a00000042a18adff188000000bff188d2a188dff188000000d2a188000000d16188000000000000000000000000000000000000000000000000000000000000000000
-- 034:6ff18800000062a1888ff18800000082a188aff188000000a2a188dff188000000d2a1886ff18a000000dff18862a18a4ff18a00000042a18afff188000000f2a188dff188000000d2a188000000d161880000000000000000000000000000006ff18800000062a1888ff18800000082a1889ff18800000092a188eff188000000e2a1889ff1880000008ff18892a188aff188000000a2a188000000a16188000000000000000000000000000000000000000000000000000000000000000000
-- 035:6000d20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000d20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 036:6f01070f11000f21000f31000f41000f51000f61000f71000f81000f91000fa1000fb1000fc1000fd1000fe1000ff100aff1370ef1000df1000cf1000bf1000af10009f10008f10007f10006f10005f10004f10003f10002f10001f10000f100e0f10701f10002f10003f10004f10005f10006f10007f10008f10009f1000af1000bf1000cf1000df1000ef1000ff100aff1390fe1000fd1000fc1000fb1000fa1000f91000f81000f71000f61000f51000f41000f31000f21000f11000f0100
-- 037:6004426000426000646181d80000006ff1fa6ff1646000f86000096000426000646881090000006ff1fa7000640000006000426000426000648181d80000008ff1fa6ff1648000f8a00039600042600064a881390000008ff1fa6000640000006000426000426000646181d80000006ff1fa6ff1646000f8e00009600042600064e881090000006ff1fa6000640000006000426000426000646181d80000006ff1fa6ff1646000f86000096000426000646881090000006ff1fa6ff1646000f8
-- </PATTERNS1>

-- <TRACKS>
-- 000:900000900ac21805c14c06046d3a46c02e431805c14c0604180a644c0ba4180ae44c0b2565571622b326000000000000000020
-- 001:2fc47d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021
-- 002:ad6c57ed70684696e90000000000000000000000000000000000000000000000000000000000000000000000000000000000a0
-- 003:65575b65532622a963180a644c0ba4180ae44c0badeeb07c000000000000000000000000000000000000000000000000000020
-- </TRACKS>

-- <TRACKS1>
-- 000:282b03282d83182d05182d453c3095282d05282dc54c3395544252000000000000000000000000000000000000000000000040
-- 001:ad6c10ad6c10ed7020ed7020ad6c57ad6c57ed7068ed70684696200000000000000000000000000000000000000000000000a0
-- </TRACKS1>

-- <PALETTE>
-- 000:1a1c2c5d275db13e53ef7d57ffcd75a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57
-- </PALETTE>
